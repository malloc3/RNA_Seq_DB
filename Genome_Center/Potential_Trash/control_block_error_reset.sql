-- MySQL dump 10.13  Distrib 5.7.27, for Linux (x86_64)
--
-- Host: localhost    Database: production
-- ------------------------------------------------------
-- Server version	5.7.27

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `account_logs`
--

DROP TABLE IF EXISTS `account_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `account_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `row1` int(11) DEFAULT NULL,
  `row2` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `note` text COLLATE utf8_unicode_ci,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_account_log_associations_on_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `account_logs`
--

LOCK TABLES `account_logs` WRITE;
/*!40000 ALTER TABLE `account_logs` DISABLE KEYS */;
/*!40000 ALTER TABLE `account_logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accounts`
--

DROP TABLE IF EXISTS `accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transaction_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `amount` float DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `category` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `job_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `labor_rate` float DEFAULT NULL,
  `markup_rate` float DEFAULT NULL,
  `operation_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_accounts_on_budget_id` (`budget_id`),
  KEY `index_accounts_on_job_id` (`job_id`),
  KEY `index_accounts_on_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=243 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `accounts`
--

LOCK TABLES `accounts` WRITE;
/*!40000 ALTER TABLE `accounts` DISABLE KEYS */;
INSERT INTO `accounts` VALUES (1,'debit',0,1,1,'materials',1,'2020-03-11 16:30:53','2020-03-11 16:30:53','Materials',0,0,1),(2,'debit',0,1,1,'labor',1,'2020-03-11 16:30:53','2020-03-11 16:30:53','Labor: 0 minutes @ $0.0/min',0,0,1),(3,'debit',0,1,1,'materials',2,'2020-03-11 16:32:21','2020-03-11 16:32:21','Materials',0,0,1),(4,'debit',0,1,1,'labor',2,'2020-03-11 16:32:21','2020-03-11 16:32:21','Labor: 0 minutes @ $0.0/min',0,0,1),(5,'debit',0,1,1,'materials',4,'2020-03-11 17:26:51','2020-03-11 17:26:51','Materials',0,0,1),(6,'debit',0,1,1,'labor',4,'2020-03-11 17:26:51','2020-03-11 17:26:51','Labor: 0 minutes @ $0.0/min',0,0,1),(7,'debit',0,1,1,'materials',5,'2020-03-11 17:28:12','2020-03-11 17:28:12','Materials',0,0,1),(8,'debit',0,1,1,'labor',5,'2020-03-11 17:28:12','2020-03-11 17:28:12','Labor: 0 minutes @ $0.0/min',0,0,1),(9,'debit',0,1,1,'materials',6,'2020-03-11 17:30:43','2020-03-11 17:30:43','Materials',0,0,1),(10,'debit',0,1,1,'labor',6,'2020-03-11 17:30:43','2020-03-11 17:30:43','Labor: 0 minutes @ $0.0/min',0,0,1),(11,'debit',0,1,1,'materials',7,'2020-03-11 17:32:01','2020-03-11 17:32:01','Materials',0,0,1),(12,'debit',0,1,1,'labor',7,'2020-03-11 17:32:01','2020-03-11 17:32:01','Labor: 0 minutes @ $0.0/min',0,0,1),(13,'debit',0,1,1,'materials',8,'2020-03-11 17:32:27','2020-03-11 17:32:27','Materials',0,0,1),(14,'debit',0,1,1,'labor',8,'2020-03-11 17:32:27','2020-03-11 17:32:27','Labor: 0 minutes @ $0.0/min',0,0,1),(15,'debit',0,1,1,'materials',9,'2020-03-11 17:35:53','2020-03-11 17:35:53','Materials',0,0,1),(16,'debit',0,1,1,'labor',9,'2020-03-11 17:35:53','2020-03-11 17:35:53','Labor: 0 minutes @ $0.0/min',0,0,1),(17,'debit',0,1,1,'materials',10,'2020-03-11 17:36:35','2020-03-11 17:36:35','Materials',0,0,2),(18,'debit',0,1,1,'labor',10,'2020-03-11 17:36:35','2020-03-11 17:36:35','Labor: 0 minutes @ $0.0/min',0,0,2),(19,'debit',0,1,1,'materials',11,'2020-03-11 17:37:05','2020-03-11 17:37:05','Materials',0,0,2),(20,'debit',0,1,1,'labor',11,'2020-03-11 17:37:05','2020-03-11 17:37:05','Labor: 0 minutes @ $0.0/min',0,0,2),(21,'debit',0,1,1,'materials',12,'2020-03-11 17:37:52','2020-03-11 17:37:52','Materials',0,0,1),(22,'debit',0,1,1,'labor',12,'2020-03-11 17:37:52','2020-03-11 17:37:52','Labor: 0 minutes @ $0.0/min',0,0,1),(23,'debit',0,1,1,'materials',12,'2020-03-11 17:37:52','2020-03-11 17:37:52','Materials',0,0,2),(24,'debit',0,1,1,'labor',12,'2020-03-11 17:37:52','2020-03-11 17:37:52','Labor: 0 minutes @ $0.0/min',0,0,2),(25,'debit',0,1,1,'materials',15,'2020-03-11 20:49:48','2020-03-11 20:49:48','Materials',0,0,1),(26,'debit',0,1,1,'labor',15,'2020-03-11 20:49:48','2020-03-11 20:49:48','Labor: 0 minutes @ $0.0/min',0,0,1),(27,'debit',0,1,1,'materials',16,'2020-03-11 21:07:39','2020-03-11 21:07:39','Materials',0,0,3),(28,'debit',0,1,1,'labor',16,'2020-03-11 21:07:39','2020-03-11 21:07:39','Labor: 0 minutes @ $0.0/min',0,0,3),(29,'debit',0,1,1,'materials',17,'2020-03-11 21:09:56','2020-03-11 21:09:56','Materials',0,0,1),(30,'debit',0,1,1,'labor',17,'2020-03-11 21:09:56','2020-03-11 21:09:56','Labor: 0 minutes @ $0.0/min',0,0,1),(31,'debit',0,1,1,'materials',17,'2020-03-11 21:09:56','2020-03-11 21:09:56','Materials',0,0,3),(32,'debit',0,1,1,'labor',17,'2020-03-11 21:09:56','2020-03-11 21:09:56','Labor: 0 minutes @ $0.0/min',0,0,3),(33,'debit',0,1,1,'materials',18,'2020-03-11 21:12:29','2020-03-11 21:12:29','Materials',0,0,1),(34,'debit',0,1,1,'labor',18,'2020-03-11 21:12:29','2020-03-11 21:12:29','Labor: 0 minutes @ $0.0/min',0,0,1),(35,'debit',0,1,1,'materials',19,'2020-03-11 21:25:45','2020-03-11 21:25:45','Materials',0,0,1),(36,'debit',0,1,1,'labor',19,'2020-03-11 21:25:45','2020-03-11 21:25:45','Labor: 0 minutes @ $0.0/min',0,0,1),(37,'debit',0,1,1,'materials',23,'2020-03-11 21:56:45','2020-03-11 21:56:45','Materials',0,0,1),(38,'debit',0,1,1,'labor',23,'2020-03-11 21:56:45','2020-03-11 21:56:45','Labor: 0 minutes @ $0.0/min',0,0,1),(39,'debit',0,1,1,'materials',24,'2020-03-11 22:00:16','2020-03-11 22:00:16','Materials',0,0,2),(40,'debit',0,1,1,'labor',24,'2020-03-11 22:00:16','2020-03-11 22:00:16','Labor: 0 minutes @ $0.0/min',0,0,2),(41,'debit',0,1,1,'materials',25,'2020-03-11 22:00:38','2020-03-11 22:00:38','Materials',0,0,3),(42,'debit',0,1,1,'labor',25,'2020-03-11 22:00:38','2020-03-11 22:00:38','Labor: 0 minutes @ $0.0/min',0,0,3),(43,'debit',0,1,1,'materials',26,'2020-03-11 22:01:27','2020-03-11 22:01:27','Materials',0,0,1),(44,'debit',0,1,1,'labor',26,'2020-03-11 22:01:27','2020-03-11 22:01:27','Labor: 0 minutes @ $0.0/min',0,0,1),(45,'debit',0,1,1,'materials',26,'2020-03-11 22:01:27','2020-03-11 22:01:27','Materials',0,0,2),(46,'debit',0,1,1,'labor',26,'2020-03-11 22:01:27','2020-03-11 22:01:27','Labor: 0 minutes @ $0.0/min',0,0,2),(47,'debit',0,1,1,'materials',26,'2020-03-11 22:01:27','2020-03-11 22:01:27','Materials',0,0,3),(48,'debit',0,1,1,'labor',26,'2020-03-11 22:01:27','2020-03-11 22:01:27','Labor: 0 minutes @ $0.0/min',0,0,3),(49,'debit',0,1,1,'materials',27,'2020-03-11 22:06:57','2020-03-11 22:06:57','Materials',0,0,1),(50,'debit',0,1,1,'labor',27,'2020-03-11 22:06:57','2020-03-11 22:06:57','Labor: 0 minutes @ $0.0/min',0,0,1),(51,'debit',0,1,1,'materials',29,'2020-03-11 22:11:38','2020-03-11 22:11:38','Materials',0,0,1),(52,'debit',0,1,1,'labor',29,'2020-03-11 22:11:38','2020-03-11 22:11:38','Labor: 0 minutes @ $0.0/min',0,0,1),(53,'debit',0,1,1,'materials',30,'2020-03-11 22:12:41','2020-03-11 22:12:41','Materials',0,0,1),(54,'debit',0,1,1,'labor',30,'2020-03-11 22:12:41','2020-03-11 22:12:41','Labor: 0 minutes @ $0.0/min',0,0,1),(57,'debit',0,1,1,'materials',40,'2020-03-12 22:32:18','2020-03-12 22:32:18','Materials',0,0,4),(58,'debit',0,1,1,'labor',40,'2020-03-12 22:32:18','2020-03-12 22:32:18','Labor: 0 minutes @ $0.0/min',0,0,4),(59,'debit',0,1,1,'materials',41,'2020-03-12 22:33:09','2020-03-12 22:33:09','Materials',0,0,4),(60,'debit',0,1,1,'labor',41,'2020-03-12 22:33:09','2020-03-12 22:33:09','Labor: 0 minutes @ $0.0/min',0,0,4),(61,'debit',0,1,1,'materials',42,'2020-03-12 22:34:15','2020-03-12 22:34:15','Materials',0,0,4),(62,'debit',0,1,1,'labor',42,'2020-03-12 22:34:15','2020-03-12 22:34:15','Labor: 0 minutes @ $0.0/min',0,0,4),(63,'debit',0,1,1,'materials',43,'2020-03-12 22:36:50','2020-03-12 22:36:50','Materials',0,0,11),(64,'debit',0,1,1,'labor',43,'2020-03-12 22:36:50','2020-03-12 22:36:50','Labor: 0 minutes @ $0.0/min',0,0,11),(65,'debit',0,1,1,'materials',45,'2020-03-12 22:45:03','2020-03-12 22:45:03','Materials',0,0,11),(66,'debit',0,1,1,'labor',45,'2020-03-12 22:45:03','2020-03-12 22:45:03','Labor: 0 minutes @ $0.0/min',0,0,11),(67,'debit',0,1,1,'materials',47,'2020-03-12 22:45:45','2020-03-12 22:45:45','Materials',0,0,11),(68,'debit',0,1,1,'labor',47,'2020-03-12 22:45:45','2020-03-12 22:45:45','Labor: 0 minutes @ $0.0/min',0,0,11),(69,'debit',0,1,1,'materials',48,'2020-03-12 22:47:45','2020-03-12 22:47:45','Materials',0,0,11),(70,'debit',0,1,1,'labor',48,'2020-03-12 22:47:45','2020-03-12 22:47:45','Labor: 0 minutes @ $0.0/min',0,0,11),(71,'debit',0,1,1,'materials',51,'2020-03-12 22:57:07','2020-03-12 22:57:07','Materials',0,0,11),(72,'debit',0,1,1,'labor',51,'2020-03-12 22:57:07','2020-03-12 22:57:07','Labor: 0 minutes @ $0.0/min',0,0,11),(73,'debit',0,1,1,'materials',52,'2020-03-12 22:58:27','2020-03-12 22:58:27','Materials',0,0,12),(74,'debit',0,1,1,'labor',52,'2020-03-12 22:58:27','2020-03-12 22:58:27','Labor: 0 minutes @ $0.0/min',0,0,12),(75,'debit',0,1,1,'materials',53,'2020-03-12 23:01:01','2020-03-12 23:01:01','Materials',0,0,13),(76,'debit',0,1,1,'labor',53,'2020-03-12 23:01:01','2020-03-12 23:01:01','Labor: 0 minutes @ $0.0/min',0,0,13),(77,'debit',0,1,1,'materials',53,'2020-03-12 23:01:01','2020-03-12 23:01:01','Materials',0,0,14),(78,'debit',0,1,1,'labor',53,'2020-03-12 23:01:01','2020-03-12 23:01:01','Labor: 0 minutes @ $0.0/min',0,0,14),(79,'debit',0,1,1,'materials',54,'2020-03-13 15:32:54','2020-03-13 15:32:54','Materials',0,0,13),(80,'debit',0,1,1,'labor',54,'2020-03-13 15:32:54','2020-03-13 15:32:54','Labor: 0 minutes @ $0.0/min',0,0,13),(81,'debit',0,1,1,'materials',55,'2020-03-13 15:37:05','2020-03-13 15:37:05','Materials',0,0,13),(82,'debit',0,1,1,'labor',55,'2020-03-13 15:37:05','2020-03-13 15:37:05','Labor: 0 minutes @ $0.0/min',0,0,13),(83,'debit',0,1,1,'materials',56,'2020-03-13 15:38:06','2020-03-13 15:38:06','Materials',0,0,13),(84,'debit',0,1,1,'labor',56,'2020-03-13 15:38:06','2020-03-13 15:38:06','Labor: 0 minutes @ $0.0/min',0,0,13),(85,'debit',0,1,1,'materials',57,'2020-03-13 15:39:25','2020-03-13 15:39:25','Materials',0,0,13),(86,'debit',0,1,1,'labor',57,'2020-03-13 15:39:25','2020-03-13 15:39:25','Labor: 0 minutes @ $0.0/min',0,0,13),(87,'debit',0,1,1,'materials',58,'2020-03-13 15:40:28','2020-03-13 15:40:28','Materials',0,0,13),(88,'debit',0,1,1,'labor',58,'2020-03-13 15:40:28','2020-03-13 15:40:28','Labor: 0 minutes @ $0.0/min',0,0,13),(89,'debit',0,1,1,'materials',59,'2020-03-13 15:41:43','2020-03-13 15:41:43','Materials',0,0,13),(90,'debit',0,1,1,'labor',59,'2020-03-13 15:41:43','2020-03-13 15:41:43','Labor: 0 minutes @ $0.0/min',0,0,13),(91,'debit',0,1,1,'materials',60,'2020-03-13 15:42:32','2020-03-13 15:42:32','Materials',0,0,13),(92,'debit',0,1,1,'labor',60,'2020-03-13 15:42:32','2020-03-13 15:42:32','Labor: 0 minutes @ $0.0/min',0,0,13),(93,'debit',0,1,1,'materials',61,'2020-03-13 15:43:56','2020-03-13 15:43:56','Materials',0,0,13),(94,'debit',0,1,1,'labor',61,'2020-03-13 15:43:56','2020-03-13 15:43:56','Labor: 0 minutes @ $0.0/min',0,0,13),(95,'debit',0,1,1,'materials',62,'2020-03-13 17:39:42','2020-03-13 17:39:42','Materials',0,0,13),(96,'debit',0,1,1,'labor',62,'2020-03-13 17:39:42','2020-03-13 17:39:42','Labor: 0 minutes @ $0.0/min',0,0,13),(97,'debit',0,1,1,'materials',63,'2020-03-13 17:42:59','2020-03-13 17:42:59','Materials',0,0,13),(98,'debit',0,1,1,'labor',63,'2020-03-13 17:42:59','2020-03-13 17:42:59','Labor: 0 minutes @ $0.0/min',0,0,13),(99,'debit',0,1,1,'materials',64,'2020-03-13 17:49:22','2020-03-13 17:49:22','Materials',0,0,13),(100,'debit',0,1,1,'labor',64,'2020-03-13 17:49:22','2020-03-13 17:49:22','Labor: 0 minutes @ $0.0/min',0,0,13),(101,'debit',0,1,1,'materials',66,'2020-03-13 18:06:24','2020-03-13 18:06:24','Materials',0,0,13),(102,'debit',0,1,1,'labor',66,'2020-03-13 18:06:24','2020-03-13 18:06:24','Labor: 0 minutes @ $0.0/min',0,0,13),(103,'debit',0,1,1,'materials',72,'2020-03-13 18:16:07','2020-03-13 18:16:07','Materials',0,0,13),(104,'debit',0,1,1,'labor',72,'2020-03-13 18:16:07','2020-03-13 18:16:07','Labor: 0 minutes @ $0.0/min',0,0,13),(105,'debit',0,1,1,'materials',83,'2020-03-13 18:30:40','2020-03-13 18:30:40','Materials',0,0,13),(106,'debit',0,1,1,'labor',83,'2020-03-13 18:30:40','2020-03-13 18:30:40','Labor: 0 minutes @ $0.0/min',0,0,13),(107,'debit',0,1,1,'materials',86,'2020-03-13 18:52:45','2020-03-13 18:52:45','Materials',0,0,11),(108,'debit',0,1,1,'labor',86,'2020-03-13 18:52:45','2020-03-13 18:52:45','Labor: 0 minutes @ $0.0/min',0,0,11),(109,'debit',0,1,1,'materials',88,'2020-03-13 19:00:04','2020-03-13 19:00:04','Materials',0,0,12),(110,'debit',0,1,1,'labor',88,'2020-03-13 19:00:05','2020-03-13 19:00:05','Labor: 0 minutes @ $0.0/min',0,0,12),(111,'debit',0,1,1,'materials',94,'2020-03-13 19:21:15','2020-03-13 19:21:15','Materials',0,0,11),(112,'debit',0,1,1,'labor',94,'2020-03-13 19:21:15','2020-03-13 19:21:15','Labor: 0 minutes @ $0.0/min',0,0,11),(113,'debit',0,1,1,'materials',96,'2020-03-13 19:23:35','2020-03-13 19:23:35','Materials',0,0,11),(114,'debit',0,1,1,'labor',96,'2020-03-13 19:23:35','2020-03-13 19:23:35','Labor: 0 minutes @ $0.0/min',0,0,11),(115,'debit',0,1,1,'materials',104,'2020-03-13 19:50:25','2020-03-13 19:50:25','Materials',0,0,11),(116,'debit',0,1,1,'labor',104,'2020-03-13 19:50:25','2020-03-13 19:50:25','Labor: 0 minutes @ $0.0/min',0,0,11),(117,'debit',0,1,1,'materials',105,'2020-03-13 19:51:05','2020-03-13 19:51:05','Materials',0,0,1),(118,'debit',0,1,1,'labor',105,'2020-03-13 19:51:05','2020-03-13 19:51:05','Labor: 0 minutes @ $0.0/min',0,0,1),(119,'debit',0,1,1,'materials',106,'2020-03-13 20:04:45','2020-03-13 20:04:45','Materials',0,0,1),(120,'debit',0,1,1,'labor',106,'2020-03-13 20:04:45','2020-03-13 20:04:45','Labor: 0 minutes @ $0.0/min',0,0,1),(121,'debit',0,1,1,'materials',110,'2020-03-13 20:21:21','2020-03-13 20:21:21','Materials',0,0,11),(122,'debit',0,1,1,'labor',110,'2020-03-13 20:21:21','2020-03-13 20:21:21','Labor: 0 minutes @ $0.0/min',0,0,11),(123,'debit',0,1,1,'materials',111,'2020-03-13 20:33:53','2020-03-13 20:33:53','Materials',0,0,18),(124,'debit',0,1,1,'labor',111,'2020-03-13 20:33:53','2020-03-13 20:33:53','Labor: 0 minutes @ $0.0/min',0,0,18),(125,'debit',0,1,1,'materials',112,'2020-03-13 20:34:11','2020-03-13 20:34:11','Materials',0,0,16),(126,'debit',0,1,1,'labor',112,'2020-03-13 20:34:11','2020-03-13 20:34:11','Labor: 0 minutes @ $0.0/min',0,0,16),(127,'debit',0,1,1,'materials',115,'2020-03-13 20:39:41','2020-03-13 20:39:41','Materials',0,0,21),(128,'debit',0,1,1,'labor',115,'2020-03-13 20:39:41','2020-03-13 20:39:41','Labor: 0 minutes @ $0.0/min',0,0,21),(129,'debit',0,1,1,'materials',116,'2020-03-13 20:39:58','2020-03-13 20:39:58','Materials',0,0,24),(130,'debit',0,1,1,'labor',116,'2020-03-13 20:39:58','2020-03-13 20:39:58','Labor: 0 minutes @ $0.0/min',0,0,24),(131,'debit',0,1,1,'materials',117,'2020-03-13 20:40:32','2020-03-13 20:40:32','Materials',0,0,22),(132,'debit',0,1,1,'labor',117,'2020-03-13 20:40:32','2020-03-13 20:40:32','Labor: 0 minutes @ $0.0/min',0,0,22),(133,'debit',0,1,1,'materials',118,'2020-03-13 20:41:27','2020-03-13 20:41:27','Materials',0,0,25),(134,'debit',0,1,1,'labor',118,'2020-03-13 20:41:27','2020-03-13 20:41:27','Labor: 0 minutes @ $0.0/min',0,0,25),(135,'debit',0,1,1,'materials',119,'2020-03-13 21:46:11','2020-03-13 21:46:11','Materials',0,0,29),(136,'debit',0,1,1,'labor',119,'2020-03-13 21:46:11','2020-03-13 21:46:11','Labor: 0 minutes @ $0.0/min',0,0,29),(137,'debit',0,1,1,'materials',120,'2020-03-13 21:46:29','2020-03-13 21:46:29','Materials',0,0,28),(138,'debit',0,1,1,'labor',120,'2020-03-13 21:46:29','2020-03-13 21:46:29','Labor: 0 minutes @ $0.0/min',0,0,28),(139,'debit',0,1,1,'materials',121,'2020-03-13 21:46:51','2020-03-13 21:46:51','Materials',0,0,26),(140,'debit',0,1,1,'labor',121,'2020-03-13 21:46:51','2020-03-13 21:46:51','Labor: 0 minutes @ $0.0/min',0,0,26),(141,'debit',0,1,1,'materials',124,'2020-03-13 21:49:16','2020-03-13 21:49:16','Materials',0,0,27),(142,'debit',0,1,1,'labor',124,'2020-03-13 21:49:16','2020-03-13 21:49:16','Labor: 0 minutes @ $0.0/min',0,0,27),(143,'debit',0,1,1,'materials',126,'2020-03-13 21:53:29','2020-03-13 21:53:29','Materials',0,0,32),(144,'debit',0,1,1,'labor',126,'2020-03-13 21:53:29','2020-03-13 21:53:29','Labor: 0 minutes @ $0.0/min',0,0,32),(145,'debit',0,1,1,'materials',126,'2020-03-13 21:53:29','2020-03-13 21:53:29','Materials',0,0,38),(146,'debit',0,1,1,'labor',126,'2020-03-13 21:53:29','2020-03-13 21:53:29','Labor: 0 minutes @ $0.0/min',0,0,38),(147,'debit',0,1,1,'materials',127,'2020-03-13 21:53:49','2020-03-13 21:53:49','Materials',0,0,31),(148,'debit',0,1,1,'labor',127,'2020-03-13 21:53:49','2020-03-13 21:53:49','Labor: 0 minutes @ $0.0/min',0,0,31),(149,'debit',0,1,1,'materials',128,'2020-03-13 21:54:12','2020-03-13 21:54:12','Materials',0,0,37),(150,'debit',0,1,1,'labor',128,'2020-03-13 21:54:12','2020-03-13 21:54:12','Labor: 0 minutes @ $0.0/min',0,0,37),(151,'debit',0,1,1,'materials',129,'2020-03-13 21:54:39','2020-03-13 21:54:39','Materials',0,0,33),(152,'debit',0,1,1,'labor',129,'2020-03-13 21:54:39','2020-03-13 21:54:39','Labor: 0 minutes @ $0.0/min',0,0,33),(153,'debit',0,1,1,'materials',129,'2020-03-13 21:54:39','2020-03-13 21:54:39','Materials',0,0,35),(154,'debit',0,1,1,'labor',129,'2020-03-13 21:54:39','2020-03-13 21:54:39','Labor: 0 minutes @ $0.0/min',0,0,35),(155,'debit',0,1,1,'materials',130,'2020-03-13 21:56:30','2020-03-13 21:56:30','Materials',0,0,34),(156,'debit',0,1,1,'labor',130,'2020-03-13 21:56:30','2020-03-13 21:56:30','Labor: 0 minutes @ $0.0/min',0,0,34),(157,'debit',0,1,1,'materials',130,'2020-03-13 21:56:30','2020-03-13 21:56:30','Materials',0,0,36),(158,'debit',0,1,1,'labor',130,'2020-03-13 21:56:30','2020-03-13 21:56:30','Labor: 0 minutes @ $0.0/min',0,0,36),(159,'debit',0,1,1,'materials',132,'2020-03-13 21:58:27','2020-03-13 21:58:27','Materials',0,0,34),(160,'debit',0,1,1,'labor',132,'2020-03-13 21:58:27','2020-03-13 21:58:27','Labor: 0 minutes @ $0.0/min',0,0,34),(161,'debit',0,1,1,'materials',132,'2020-03-13 21:58:27','2020-03-13 21:58:27','Materials',0,0,36),(162,'debit',0,1,1,'labor',132,'2020-03-13 21:58:27','2020-03-13 21:58:27','Labor: 0 minutes @ $0.0/min',0,0,36),(163,'debit',0,1,1,'materials',133,'2020-03-13 21:59:44','2020-03-13 21:59:44','Materials',0,0,42),(164,'debit',0,1,1,'labor',133,'2020-03-13 21:59:44','2020-03-13 21:59:44','Labor: 0 minutes @ $0.0/min',0,0,42),(165,'debit',0,1,1,'materials',134,'2020-03-13 22:00:00','2020-03-13 22:00:00','Materials',0,0,44),(166,'debit',0,1,1,'labor',134,'2020-03-13 22:00:00','2020-03-13 22:00:00','Labor: 0 minutes @ $0.0/min',0,0,44),(167,'debit',0,1,1,'materials',135,'2020-03-13 22:00:22','2020-03-13 22:00:22','Materials',0,0,41),(168,'debit',0,1,1,'labor',135,'2020-03-13 22:00:22','2020-03-13 22:00:22','Labor: 0 minutes @ $0.0/min',0,0,41),(169,'debit',0,1,1,'materials',136,'2020-03-13 22:00:43','2020-03-13 22:00:43','Materials',0,0,43),(170,'debit',0,1,1,'labor',136,'2020-03-13 22:00:43','2020-03-13 22:00:43','Labor: 0 minutes @ $0.0/min',0,0,43),(171,'debit',0,1,1,'materials',137,'2020-03-13 22:01:14','2020-03-13 22:01:14','Materials',0,0,39),(172,'debit',0,1,1,'labor',137,'2020-03-13 22:01:14','2020-03-13 22:01:14','Labor: 0 minutes @ $0.0/min',0,0,39),(173,'debit',0,1,1,'materials',138,'2020-03-13 22:01:45','2020-03-13 22:01:45','Materials',0,0,45),(174,'debit',0,1,1,'labor',138,'2020-03-13 22:01:45','2020-03-13 22:01:45','Labor: 0 minutes @ $0.0/min',0,0,45),(175,'debit',0,1,1,'materials',143,'2020-03-17 00:48:24','2020-03-17 00:48:24','Materials',0,0,47),(176,'debit',0,1,1,'labor',143,'2020-03-17 00:48:24','2020-03-17 00:48:24','Labor: 0 minutes @ $0.0/min',0,0,47),(177,'debit',0,1,1,'materials',143,'2020-03-17 00:48:24','2020-03-17 00:48:24','Materials',0,0,55),(178,'debit',0,1,1,'labor',143,'2020-03-17 00:48:24','2020-03-17 00:48:24','Labor: 0 minutes @ $0.0/min',0,0,55),(179,'debit',0,1,1,'materials',144,'2020-03-17 00:48:58','2020-03-17 00:48:58','Materials',0,0,49),(180,'debit',0,1,1,'labor',144,'2020-03-17 00:48:58','2020-03-17 00:48:58','Labor: 0 minutes @ $0.0/min',0,0,49),(181,'debit',0,1,1,'materials',144,'2020-03-17 00:48:58','2020-03-17 00:48:58','Materials',0,0,54),(182,'debit',0,1,1,'labor',144,'2020-03-17 00:48:58','2020-03-17 00:48:58','Labor: 0 minutes @ $0.0/min',0,0,54),(183,'debit',0,1,1,'materials',146,'2020-03-17 00:53:33','2020-03-17 00:53:33','Materials',0,0,50),(184,'debit',0,1,1,'labor',146,'2020-03-17 00:53:33','2020-03-17 00:53:33','Labor: 0 minutes @ $0.0/min',0,0,50),(185,'debit',0,1,1,'materials',148,'2020-03-17 00:56:08','2020-03-17 00:56:08','Materials',0,0,53),(186,'debit',0,1,1,'labor',148,'2020-03-17 00:56:08','2020-03-17 00:56:08','Labor: 0 minutes @ $0.0/min',0,0,53),(187,'debit',0,1,1,'materials',153,'2020-03-17 01:19:47','2020-03-17 01:19:47','Materials',0,0,51),(188,'debit',0,1,1,'labor',153,'2020-03-17 01:19:47','2020-03-17 01:19:47','Labor: 0 minutes @ $0.0/min',0,0,51),(189,'debit',0,1,1,'materials',153,'2020-03-17 01:19:47','2020-03-17 01:19:47','Materials',0,0,52),(190,'debit',0,1,1,'labor',153,'2020-03-17 01:19:47','2020-03-17 01:19:47','Labor: 0 minutes @ $0.0/min',0,0,52),(191,'debit',0,1,1,'materials',154,'2020-03-17 01:22:05','2020-03-17 01:22:05','Materials',0,0,59),(192,'debit',0,1,1,'labor',154,'2020-03-17 01:22:05','2020-03-17 01:22:05','Labor: 0 minutes @ $0.0/min',0,0,59),(193,'debit',0,1,1,'materials',156,'2020-03-17 01:24:33','2020-03-17 01:24:33','Materials',0,0,58),(194,'debit',0,1,1,'labor',156,'2020-03-17 01:24:33','2020-03-17 01:24:33','Labor: 0 minutes @ $0.0/min',0,0,58),(195,'debit',0,1,1,'materials',156,'2020-03-17 01:24:33','2020-03-17 01:24:33','Materials',0,0,65),(196,'debit',0,1,1,'labor',156,'2020-03-17 01:24:33','2020-03-17 01:24:33','Labor: 0 minutes @ $0.0/min',0,0,65),(197,'debit',0,1,1,'materials',157,'2020-03-17 01:26:20','2020-03-17 01:26:20','Materials',0,0,63),(198,'debit',0,1,1,'labor',157,'2020-03-17 01:26:20','2020-03-17 01:26:20','Labor: 0 minutes @ $0.0/min',0,0,63),(199,'debit',0,1,1,'materials',157,'2020-03-17 01:26:20','2020-03-17 01:26:20','Materials',0,0,64),(200,'debit',0,1,1,'labor',157,'2020-03-17 01:26:20','2020-03-17 01:26:20','Labor: 0 minutes @ $0.0/min',0,0,64),(201,'debit',0,1,1,'materials',158,'2020-03-17 01:26:43','2020-03-17 01:26:43','Materials',0,0,62),(202,'debit',0,1,1,'labor',158,'2020-03-17 01:26:43','2020-03-17 01:26:43','Labor: 0 minutes @ $0.0/min',0,0,62),(203,'debit',0,1,1,'materials',159,'2020-03-17 01:27:28','2020-03-17 01:27:28','Materials',0,0,57),(204,'debit',0,1,1,'labor',159,'2020-03-17 01:27:28','2020-03-17 01:27:28','Labor: 0 minutes @ $0.0/min',0,0,57),(205,'debit',0,1,1,'materials',159,'2020-03-17 01:27:28','2020-03-17 01:27:28','Materials',0,0,66),(206,'debit',0,1,1,'labor',159,'2020-03-17 01:27:28','2020-03-17 01:27:28','Labor: 0 minutes @ $0.0/min',0,0,66),(207,'debit',0,1,1,'materials',161,'2020-03-17 01:29:27','2020-03-17 01:29:27','Materials',0,0,61),(208,'debit',0,1,1,'labor',161,'2020-03-17 01:29:27','2020-03-17 01:29:27','Labor: 0 minutes @ $0.0/min',0,0,61),(209,'debit',0,1,1,'materials',162,'2020-03-17 01:31:09','2020-03-17 01:31:09','Materials',0,0,60),(210,'debit',0,1,1,'labor',162,'2020-03-17 01:31:09','2020-03-17 01:31:09','Labor: 0 minutes @ $0.0/min',0,0,60),(211,'debit',0,1,1,'materials',162,'2020-03-17 01:31:09','2020-03-17 01:31:09','Materials',0,0,67),(212,'debit',0,1,1,'labor',162,'2020-03-17 01:31:09','2020-03-17 01:31:09','Labor: 0 minutes @ $0.0/min',0,0,67),(213,'debit',0,1,1,'materials',164,'2020-03-17 01:45:54','2020-03-17 01:45:54','Materials',0,0,68),(214,'debit',0,1,1,'labor',164,'2020-03-17 01:45:54','2020-03-17 01:45:54','Labor: 0 minutes @ $0.0/min',0,0,68),(215,'debit',0,1,1,'materials',165,'2020-03-17 01:46:47','2020-03-17 01:46:47','Materials',0,0,69),(216,'debit',0,1,1,'labor',165,'2020-03-17 01:46:47','2020-03-17 01:46:47','Labor: 0 minutes @ $0.0/min',0,0,69),(217,'debit',0,1,1,'materials',165,'2020-03-17 01:46:47','2020-03-17 01:46:47','Materials',0,0,74),(218,'debit',0,1,1,'labor',165,'2020-03-17 01:46:47','2020-03-17 01:46:47','Labor: 0 minutes @ $0.0/min',0,0,74),(219,'debit',0,1,1,'materials',166,'2020-03-17 01:48:12','2020-03-17 01:48:12','Materials',0,0,75),(220,'debit',0,1,1,'labor',166,'2020-03-17 01:48:12','2020-03-17 01:48:12','Labor: 0 minutes @ $0.0/min',0,0,75),(221,'debit',0,1,1,'materials',168,'2020-03-17 01:51:12','2020-03-17 01:51:12','Materials',0,0,70),(222,'debit',0,1,1,'labor',168,'2020-03-17 01:51:12','2020-03-17 01:51:12','Labor: 0 minutes @ $0.0/min',0,0,70),(223,'debit',0,1,1,'materials',169,'2020-03-17 01:51:51','2020-03-17 01:51:51','Materials',0,0,71),(224,'debit',0,1,1,'labor',169,'2020-03-17 01:51:51','2020-03-17 01:51:51','Labor: 0 minutes @ $0.0/min',0,0,71),(225,'debit',0,1,1,'materials',169,'2020-03-17 01:51:51','2020-03-17 01:51:51','Materials',0,0,72),(226,'debit',0,1,1,'labor',169,'2020-03-17 01:51:51','2020-03-17 01:51:51','Labor: 0 minutes @ $0.0/min',0,0,72),(227,'debit',0,1,1,'materials',170,'2020-03-17 01:53:45','2020-03-17 01:53:45','Materials',0,0,72),(228,'debit',0,1,1,'labor',170,'2020-03-17 01:53:45','2020-03-17 01:53:45','Labor: 0 minutes @ $0.0/min',0,0,72),(229,'debit',0,1,1,'materials',171,'2020-03-17 01:54:02','2020-03-17 01:54:02','Materials',0,0,73),(230,'debit',0,1,1,'labor',171,'2020-03-17 01:54:02','2020-03-17 01:54:02','Labor: 0 minutes @ $0.0/min',0,0,73),(231,'debit',0,1,1,'materials',172,'2020-03-17 01:56:33','2020-03-17 01:56:33','Materials',0,0,78),(232,'debit',0,1,1,'labor',172,'2020-03-17 01:56:33','2020-03-17 01:56:33','Labor: 0 minutes @ $0.0/min',0,0,78),(233,'debit',0,1,1,'materials',175,'2020-03-17 01:57:50','2020-03-17 01:57:50','Materials',0,0,81),(234,'debit',0,1,1,'labor',175,'2020-03-17 01:57:50','2020-03-17 01:57:50','Labor: 0 minutes @ $0.0/min',0,0,81),(235,'debit',0,1,1,'materials',177,'2020-03-17 01:59:08','2020-03-17 01:59:08','Materials',0,0,77),(236,'debit',0,1,1,'labor',177,'2020-03-17 01:59:08','2020-03-17 01:59:08','Labor: 0 minutes @ $0.0/min',0,0,77),(237,'debit',0,1,1,'materials',179,'2020-03-17 01:59:44','2020-03-17 01:59:44','Materials',0,0,82),(238,'debit',0,1,1,'labor',179,'2020-03-17 01:59:44','2020-03-17 01:59:44','Labor: 0 minutes @ $0.0/min',0,0,82),(239,'debit',0,1,1,'materials',180,'2020-03-17 02:00:08','2020-03-17 02:00:08','Materials',0,0,76),(240,'debit',0,1,1,'labor',180,'2020-03-17 02:00:08','2020-03-17 02:00:08','Labor: 0 minutes @ $0.0/min',0,0,76),(241,'debit',0,1,1,'materials',180,'2020-03-17 02:00:08','2020-03-17 02:00:08','Materials',0,0,83),(242,'debit',0,1,1,'labor',180,'2020-03-17 02:00:08','2020-03-17 02:00:08','Labor: 0 minutes @ $0.0/min',0,0,83);
/*!40000 ALTER TABLE `accounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `allowable_field_types`
--

DROP TABLE IF EXISTS `allowable_field_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `allowable_field_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `field_type_id` int(11) DEFAULT NULL,
  `sample_type_id` int(11) DEFAULT NULL,
  `object_type_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_allowable_field_types_on_field_type_id` (`field_type_id`),
  KEY `index_allowable_field_types_on_object_type_id` (`object_type_id`),
  KEY `index_allowable_field_types_on_sample_type_id` (`sample_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `allowable_field_types`
--

LOCK TABLES `allowable_field_types` WRITE;
/*!40000 ALTER TABLE `allowable_field_types` DISABLE KEYS */;
INSERT INTO `allowable_field_types` VALUES (1,10,1,3,'2020-03-11 15:57:53','2020-03-11 15:57:53'),(2,11,1,3,'2020-03-11 22:16:41','2020-03-11 22:16:41'),(3,12,1,4,'2020-03-11 22:16:41','2020-03-11 22:16:41'),(4,13,1,4,'2020-03-13 20:24:05','2020-03-13 20:24:05'),(6,15,1,4,'2020-03-13 21:01:53','2020-03-13 21:01:53'),(7,16,1,4,'2020-03-13 21:01:53','2020-03-13 21:01:53');
/*!40000 ALTER TABLE `allowable_field_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `announcements`
--

DROP TABLE IF EXISTS `announcements`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `announcements` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `message` text COLLATE utf8_unicode_ci,
  `active` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `announcements`
--

LOCK TABLES `announcements` WRITE;
/*!40000 ALTER TABLE `announcements` DISABLE KEYS */;
INSERT INTO `announcements` VALUES (1,'Welcome to Aquarium','If you are just starting Aquarium for the first time, you may need to add some content. Go to http://www.aquarium.bio/ and click on COMMUNITY and then Workflows to find protocols and workflows you can add to this instance of Aquarium. Enjoy!',1,'2018-12-21 17:58:04','2018-12-21 17:58:27');
/*!40000 ALTER TABLE `announcements` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `budgets`
--

DROP TABLE IF EXISTS `budgets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `budgets` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `overhead` float DEFAULT NULL,
  `contact` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `email` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `phone` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `budgets`
--

LOCK TABLES `budgets` WRITE;
/*!40000 ALTER TABLE `budgets` DISABLE KEYS */;
INSERT INTO `budgets` VALUES (1,'My First Budget',NULL,'Joe','2018-07-17 22:10:05','2018-07-17 22:10:05','An example budget','joe@nasa.org','8675309');
/*!40000 ALTER TABLE `budgets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `codes`
--

DROP TABLE IF EXISTS `codes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `codes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `content` text COLLATE utf8_unicode_ci,
  `parent_id` int(11) DEFAULT NULL,
  `parent_class` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=440 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `codes`
--

LOCK TABLES `codes` WRITE;
/*!40000 ALTER TABLE `codes` DISABLE KEYS */;
INSERT INTO `codes` VALUES (1,'protocol','# Title: Inventory Purchase Protocol\n# Author: Eric Klavins\n# Date: May 31, 2016 \n\nneeds \"Standard Libs/Debug\"\n\nclass Protocol\n\n  include Debug\n\n  def labor_rate\n    Parameter.get_float(\'labor rate\')\n  end\n  \n  def main\n    if !operations.one?\n      show do\n        title \"Too many batched!\"\n        \n        note \"Right now, this protocol only supports one Direct Purchase at a time. Please re-batch in jobs of one.\"\n      end\n      \n      return {}\n    end\n    \n    \n    @object_types = ObjectType.all\n    @user = operations.first.user\n    user = @user # Can\'t put @user in show, because it would refer to the wrong object\n\n    result = show do\n      title \"Choose a budget\"\n      note \"User: #{user.name} (#{user.login})\"\n      select user.budget_info.collect { |bi| bi[:budget].name }, var: \"choice\", label: \"Choose a budget\", default: 0\n    end\n    \n    @budget = Budget.find_by_name(result[:choice])\n    @overhead = Parameter.get_float(\"markup rate\")\n    @transactions = []\n    \n    operations.first.plan.budget_id = @budget.id\n    operations.first.plan.save \n    \n    again = true\n    \n    while again \n    \n      result = show do\n        title \"Select Category\"\n        note \"Basics: tubes, tip boxes, ...\"\n        note \"Samples: media, ...\"\n        note \"Batched: Gibson Aliquots, plates, ...\"\n        select [ \"Basics\", \"Samples\", \"Batched\" ], var: \"choice\", label: \"Choose something\", default: 1\n      end\n      \n      case result[:choice]\n        when \"Basics\"then basic_chooser\n        when \"Samples\" then sample_chooser \n        when \"Batched\" then batched_chooser\n      end\n      \n      tab = [ [ \"Description\", \"Amount\" ] ]\n      tab += @transactions.collect do |t| \n        [\n          t[:description],\n          currency((1 + @overhead) * t[:amount])\n        ]\n      end\n      \n      result = show do\n        title  \"Summary\"\n        table tab if tab.length > 1 \n        note \"No purchases made\" unless tab.length > 1\n        select [ \"No\", \"Yes\" ], var: \"again\", label: \"Would you like to make another purchase?\", default: 0\n      end\n    \n      again = ( result[:again] == \"Yes\" )\n      \n    end\n    \n    operations.first.associate :transactions, @transactions\n    \n    return {}\n   end\n\n  def choose_object_from objects, number=false\n    result = show do\n      title \"Choose Object\"\n      select objects.collect { |ot| ot.name }, var: \"choice\", label: \"Choose object:\", default: 0\n      get \"number\", var: \"n\", label: \"How many?\", default: 5 if number\n    end\n\n    return objects.find { |b| b.name == result[:choice] } unless number\n    return [ objects.find { |b| b.name == result[:choice] }, result[:n] ] if number\n  end\n  \n  ###############################################################################################################\n  def basic_chooser \n    \n    basics = @object_types.select { |ot| basic? ot }      \n    ot = choose_object_from basics\n\n    error \"There seems to be a problem with the object you\'ve chosen.\" if ot.nil?\n\n    vol = {}\n  \n    m = ot.data_object[:materials]\n    l = ot.data_object[:labor]\n    u = ot.data_object[:unit] \n    vol[:n] = 1\n \n    vol = show do\n      title \"Choose Amount\"\n      get \"number\", var: \"n\", label: \"How many #{u.pluralize} of #{ot.name}?\", default: 5\n    end\n\n    message = \"Purchase #{vol[:n]} #{ot.name.pluralize}\"\n    if confirm message, currency((1+@overhead) * ((m* vol[:n])+(l * labor_rate* vol[:n])) ) \n      transaction = make_purchase message, m*vol[:n], l*vol[:n]\n    end        \n    \n  end\n\n  ###############################################################################################################\n  def sample_chooser \n   \n    samples = @object_types.select { |ot| sample? ot }   \n    ot = choose_object_from samples\n\n    error \"There seems to be a problem with the object you\'ve chosen.\" if ot.nil?\n\n    result = show do\n      title \"Choose Sample\"\n      select ot.data_object[:samples].collect { |s| s[:name] }, var: \"choice\", label: \"Choose sample\", default: 2\n    end\n    \n    descriptor = ot.data_object[:samples].find { |d| d[:name] == result[:choice] }\n    m = descriptor[:materials]\n    l = descriptor[:labor] \n    u = descriptor[:unit]\n    s = descriptor[:name] \n    vol = {}\n\n    items = Sample.find_by_name(s).items.reject { |i| i.deleted? }.reject {|i| i.object_type.name != ot.name }\n    \n    if items.length > 0\n      item = choose_item items, \"Choose #{ot.name} of #{s}\"\n\n      if ot.name.include?(\"Agar\")\n        vol[:n] = descriptor[:total_volume]\n      else\n        vol = show do\n          title \"Choose Volume\"\n          get \"number\", var: \"n\", label: \"How many #{u.pluralize} of #{s}?\", default: 5 \n          select [\"No\", \"Yes\"], var: \"delete\", label: \"Are you purchasing the whole container or is the container now empty?\", default: 0\n        end\n      end\n\n\n      cost = currency((1+@overhead)*((m* vol[:n])+(l * labor_rate* vol[:n]))) \n      message = \"Purchase #{ot.name} of #{s}, item #{item.id}\"\n      if confirm message, cost\n        take [item]\n        transaction = make_purchase message, m*vol[:n], l*vol[:n]\n        release [item]\n        if (descriptor[:delete] || vol[:delete] == \"Yes\")\n          item.mark_as_deleted\n        end\n      end\n    else\n      error \"There are no items of #{ot.name}/#{s} in stock\"\n    end \n  end    \n  ###############################################################################################################\n  def batched_chooser \n\n    collections = @object_types.select { |ot| batched? ot }\n    ot = choose_object_from collections\n\n    error \"There seems to be a problem with the object you\'ve chosen.\" if ot.nil?\n  \n    result = show do\n      title \"Choose sample type\" \n      select ot.data_object[:samples].collect { |s| s[:name] }, var: \"choice\", label: \"Choose sample\", default: 0\n    end\n  \n    descriptor = ot.data_object[:samples].find { |d| d[:name] == result[:choice] }\n    m = descriptor[:materials]\n    l = descriptor[:labor] \n    cost = currency((1+@overhead)*(m+(l*labor_rate)))\n  \n    s = Sample.find_by_name(descriptor[:name])\n    collections = ot.items.reject { |i| i.deleted? }.collect { |i| collection_from i }\n    # filter out collections based on user\'s sample input\n    collections.reject! { |c| c.matrix[0][0] != s.id }\n    cids = collections.collect { |c| c.id.to_s }\n  \n    if cids.length > 0\n  \n      result = show do \n        title \"Choose #{ot.name} and number of #{s.name.pluralize} (#{cost} each)\"\n        table [ [ \"id\", \"Location\", \"Number of Samples\" ] ] + (collections.collect { |i| [ \"#{i}\", i.location, i.num_samples ] } )\n        select cids, var: \"id\", label: \"Choose collection\", default: 0\n        get \"number\", var: \"n\", label: \"How many #{s.name.pluralize}?\", default: 2\n      end\n      \n      collection = collections.find { |c| c.id == result[:id].to_i }\n      \n      n = [ collection.num_samples, [ 1, result[:n]].max ].min\n      total_cost = currency((1+@overhead)*(n*m+(n*l* labor_rate)))\n      message = \"Purchase #{n} #{s.name.pluralize} from #{ot.name} #{collection.id}\"\n      \n      if confirm message, total_cost \n        take_samples collection, n\n        transaction = make_purchase message, n*m, n*l\n        release [collection]\n        if collection.num_samples == 0\n          collection.mark_as_deleted\n        end\n      end    \n    else\n      error \"There are no #{ot.name} in stock\"\n    end\n  end\n\n  def take_samples collection, n\n   \n    m = collection.matrix\n    x = 0\n  \n    (0..m.length-1).reverse_each do |i|\n      (0..m[i].length-1).reverse_each do |j|\n        if m[i][j] != -1 && x < n\n          m[i][j] = -1\n          x += 1\n        end\n      end\n    end\n  \n    collection.matrix = m\n    collection.save\n    take [collection]\n    \n  end\n\n  def error msg, details=nil\n    show do \n      title msg\n      note details if details\n      note \"Please report this problem to a BIOFAB lab manager.\"\n    end      \n  end\n\n  def confirm message, cost\n    result = show do \n      title message\n      note \"Cost: #{cost}\"\n      select [ \"Ok\", \"Cancel\" ], var: \"choice\", label: \"Ok to purchase?\", default: 0\n    end\n    return (result[:choice] == \"Ok\")\n  end\n\n  def choose_item items, message\n    options = (items.collect { |i| i.id.to_s })\n    result = show do \n      title message\n      note \"Please choose which item you would like to use: \"\n      select options, var: \"choice\", label: \"Choose item\", default: 0\n    end\n    Item.find(result[:choice])          \n  end\n\n\n  def make_purchase description, mat, lab\n    transaction = {\n      description: description,\n      amount: mat + lab * labor_rate,\n    }\n    \n    @transactions << transaction\n    \n    transaction\n  end\n\n  def valid_sample_descriptor s\n    val = s[:name]      && s[:name].class == String &&\n          s[:materials] && ( s[:materials].class == Float || s[:materials].class == Fixnum ) &&\n          s[:labor]     && ( s[:labor].class == Float     || s[:labor].class == Fixnum ) && \n          s[:unit]      && s[:unit].class == String &&\n          s[:total_volume] && (s[:total_volume].is_a?(Integer))\n    #error(\"Bad descriptor\", s.to_s) unless val #comment this out so user doesn\'t see it\n    val\n  end\n\n  def basic? ot\n    ot.handler != \"sample_container\" && ot.handler != \"collection\"  &&\n    ot.data_object[:materials] && ot.data_object[:labor] && ot.data_object[:unit]     \n  end\n\n  def sample? ot\n    ot.handler == \"sample_container\" && ot.data_object[:samples] && \n    ot.data_object[:samples].each { |s| return nil unless valid_sample_descriptor s }\n  end\n\n  def batched? ot\n    ot.handler == \"collection\" && ot.data_object[:samples] && \n    ot.data_object[:samples].each { |s| return nil unless (s[:materials] && s[:labor] && s[:unit]) }\n  end\n\n  def currency num\n    ActionController::Base.helpers.number_to_currency num\n  end  \n\nend\n',1,'OperationType','2020-01-24 16:50:00','2020-01-24 16:50:00',1),(2,'precondition','def precondition(op)\n  true\nend',1,'OperationType','2020-01-24 16:50:00','2020-01-24 16:50:00',1),(3,'cost_model','def cost(op)\n  trans = op.get(:transactions) || [{ amount: 0.1 }]\n  total_cost = trans.map { |t| t[:amount] }.sum\n  \n  { labor: 0, materials: total_cost }\nend',1,'OperationType','2020-01-24 16:50:00','2020-01-24 16:50:00',1),(4,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',1,'OperationType','2020-01-24 16:50:00','2020-01-24 16:50:00',1),(5,'test','',1,'OperationType','2020-01-24 16:50:00','2020-01-24 16:50:00',1),(6,'source','module Debug\n  def print_object obj\n    if [Numeric, String].any? { |c| obj.is_a? c }\n      obj\n    elsif [Array].any? { |c| obj.is_a? c }\n      obj.map { |item| print_object item }\n    elsif [Hash].any? { |c| obj.is_a? c }\n      Hash[obj.map { |k, v| [k, print_object(v)] }]\n    else\n      s = obj ? obj.id.to_s : \"\"\n      s += \" #{obj.name}\" if obj.class.method_defined? :name\n      s\n    end\n  end\n\n  def log_info *args\n    if debug\n      show do\n        title \"Debug slide (#{args.length} #{\"arg\".pluralize args.length})\"\n\n        args.each do |arg|\n          note \"#{arg.class}: #{print_object arg}\"\n        end\n      end\n    end\n  end\n\n    def inspect(object, ident=nil)\n        show do\n            title \"<span style=\\\"background-color:yellow\\\">INSPECTING #{ident} (#{object.class})</span>\"\n            if object.kind_of?(Array)\n              table object\n            else\n              note object.to_json\n            end\n        end\n    end\nend\n',1,'Library','2020-01-24 16:50:00','2020-01-24 16:50:00',1),(7,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CollectionDisplay\"\n\nclass Protocol\n  include Debug, CollectionDisplay\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    #batch them together (assign samples to wells in working plate)\n    assign_working_plate_well(working_plate)\n\n    #Instructions for batching\n    transfer_from_stock(working_plate)\n    \n    #return stock plates with samples\n    operations.store(opts = {io: \'input\'})\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_sample_well_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_sample_well_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n      sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n      sample_arry_by_collection.each do |input_collection, fv_array|\n        sample_array = fv_array.map{|fv| fv.sample}\n        transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n      end\n  end\n\n\n  #Transfers from stock plate to working plate using appropriate libraries.\n  def transfer_from_stock(working_plate)\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n  end\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1\n  def get_sample_well_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each do |loc|\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def assign_working_plate_well(working_plate)\n    operations.each do |op|\n      sample_array = []\n      input_array = op.input_array(INPUT_ARRAY).sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array, options = { reverse: false })\n    end\n\n    if debug\n      show do \n        title \"Debug Window.  Working Plate\"\n        table highlight_non_empty(working_plate)\n      end\n    end\n  end\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(8,'precondition','def precondition(_op)\n  true\nend',2,'OperationType','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(9,'cost_model','def cost(_op)\n  { labor: 0, materials: 0 }\nend',2,'OperationType','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(10,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',2,'OperationType','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(11,'test','',2,'OperationType','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(12,'source','# frozen_string_literal: true\n\n# Module with methods and classes that seek to help with associating data\n# to, and retrieving data from, items, operations, plans, collections, and parts.\n#\nmodule AssociationManagement\n  require \'matrix\'\n\n  # Associates a key and value to the associations hash of the given object.\n  # Replaces an existing association for the given key.\n  #\n  # A part may be represented as a part item, or a collection and coordinate.\n  #\n  # @param object [DataAssociator]  the object to associate data\n  # @param key [String]  the key for the association\n  # @param data [serializable object]  the data for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [Array]  row, column pair if the object is a collection\n  # @option data_matrix [String]  optional data matrix for a collection\n  def associate_data(object, key, data, opts = {})\n    AssociationMap.associate_data(object, key, data, opts)\n  end\n\n  # Returns the associated value from the associations hash of a given object.\n  # If an association doesn\'t exist for the key, returns nil.\n  #\n  # @param object [DataAssociator]  the object to associated data\n  # @param key [String]  the key for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [tuple Array]  row, column of part if object is a collection.\n  # @option data_matrix [String]  optional data matrix\n  # @return [serializable object]  the value associated with the given key\n  def get_associated_data(object, key, opts = {})\n    AssociationMap.get_associated_data(object, key, opts)\n  end\n\n  # Defines a map to manage the associations for an {Item}, {Operation}, or\n  # {Plan} object, which are Aquarium classes that extend {DataAssociator}.\n  #\n  # Note: if `map` contains associations, it is necessary to call `map.save` for\n  #       the associations to be saved to Aquarium.\n  #\n  class AssociationMap\n    DATAMATRIX_KEY = \'part_data\'\n\n    # Initializes an {AssociationMap} for the given item, operation, or plan.\n    #\n    # @param object [DataAssociator]  the object to which to associated data\n    def initialize(object)\n      @object = object\n      @map = {}\n\n      @object.associations.each do |datum|\n        @map[datum[0]] =\n          if @object.upload(datum[0]).nil?\n            datum[1]\n          else\n            UploadAssoc.new(datum[1], @object.upload(datum[0]))\n          end\n      end\n\n      if object.is_a? Collection\n        initialize_part_data\n        data_matrix_all(@object, @map[DATAMATRIX_KEY])\n      end\n    end\n\n    # Retrieves part_data from the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    def data_matrix_all(coll, data_matrix)\n      pas = coll.part_associations\n      part_ids = pas.collect(&:part_id)\n      das = DataAssociation.where(parent_class: \'Item\', parent_id: part_ids)\n      pas.each do |pa|\n        data_matrix[pa.row][pa.column] = {}\n        das.select { |da| da.parent_id == pa.part_id }.each do |da|\n          data_matrix[pa.row][pa.column][da.key] = da.value\n        end\n      end\n      data_matrix\n    end\n\n    # All in one static method which associates a key and value\n    # to the associations hash of a given object. If an association already\n    # exists at the given key, it will be replaced. Can associate to parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated. Can be an io field value\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when associating to a part of a collection, use a\n    #                         data matrix besides the default one\n    def self.associate_data(object, key, data, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot associate to a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        assoc_map.putrc(object.row, object.column, key, data)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        assoc_map.putrc(opts[:coord][0], opts[:coord][1], key, data)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        assoc_map.put(key, data)\n      end\n      assoc_map.save\n    end\n\n    # All in one static method which gets an associated value\n    # from the associations hash of a given object. If an association doesn\'t\n    # exist at the given key, returns nil. Can get associations from parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated, can be an io field value\n    # @param key [String]  the key for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when retrieving association from a part of a collection,\n    #                         use a matrix besides the default one\n    # @return [serializable object]  the data stored in the associations of the given object at the given key\n    def self.get_associated_data(object, key, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot get data from a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        return assoc_map.getrc(object.row, object.column, key)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.getrc(opts[:coord][0], opts[:coord][1], key)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.get(key)\n      end\n    end\n\n    # Adds an association for the data with the key.\n    # The data must be serializable.\n    #\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  Additional Options\n    # @option tag  [String]  If putting an Upload, optionally specify an extra label\n    def put(key, data, opts = { tag: {} })\n      @map[key] = if data.is_a?(Upload)\n                    UploadAssoc.new(opts[:tag], data)\n                  else\n                    data\n                  end\n    end\n\n    # Adds an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # If the data_matrix for the collection has not been created yet, it is initialized\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def putrc(row, column, key, data, data_matrix = DATAMATRIX_KEY)\n      # if the data_matrix for this collection does not exist yet, initialize it.\n      initialize_part_data(data_matrix)\n      @map[data_matrix][row][column][key] = data\n    end\n\n    # To be called when the object of association is a collection,\n    # establishes a matrix parallel to the sample matrix which can\n    # be used to store additional information about individual parts\n    # Each slot in the matrix will be a new empty hash.\n    #\n    # @param coll [Collection]  the object for which part-data matrix will be initialized\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def initialize_part_data(data_matrix = DATAMATRIX_KEY)\n      raise \"Invalid Method Call: cannot associate part data to an object that isn\'t a collection\" unless @object.is_a?(Collection)\n      # TODO: fix the following so that can use the Base method\n      # coll = collection_from(@object.id)\n      coll = Collection.find(@object.id)\n      @map[data_matrix] = Array.new(coll.dimensions[0]) { Array.new(coll.dimensions[1]) { {} } } if @map[data_matrix].nil?\n    end\n\n    # Returns the associated data for the key, if any.\n    #\n    # @param key [String]  the key for the association\n    # @returns the data object for the key, `nil` otherwise\n    def get(key)\n      data = @map[key]\n      if data.is_a?(UploadAssoc)\n        data.upload\n      else\n        data\n      end\n    end\n\n    # Gets an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # Returns the associated data for the key, if any.\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns the data object for the key, `nil` otherwise\n    def getrc(row, column, key, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix][row][column][key] unless @map[data_matrix].nil?\n    end\n\n    # Retrieve the associations for all parts of the collection\n    # as a matrix.\n    # @requires  current object is a collection\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns  the data matrix, if one exists\n    def get_data_matrix(data_matrix = DATAMATRIX_KEY)\n      Matrix.rows(@map[data_matrix])\n    end\n\n    # Replace or initialize the data matrix for this object\n    # with a custom one.\n    # @requires  the current object is a collection\n    # `matrix` have the same row column dimensions as the collection\n    #\n    # @param new_matrix [Matrix]  the new data matrix\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix (by key) to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n\n    def set_data_matrix(matrix, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix] = matrix.to_a\n    end\n\n    # Saves the associations in this map to Aquarium.\n    def save\n      das = []\n      @map.each_key do |key|\n        if key == DATAMATRIX_KEY\n          das.concat save_data_matrix_alt(@object, @map[key])\n        elsif @map[key].is_a? UploadAssoc\n          # TODO: update this to lazy associate once aq is updated to hav lazy upload assoc (on master, just not on server yet)\n          @object.associate(key, @map[key].tag, @map[key].upload)\n        else\n          das << @object.lazy_associate(key, @map[key])\n        end\n      end\n      DataAssociation.import(das, on_duplicate_key_update: [:object]) unless das.empty?\n      @object.save\n      nil\n    end\n\n    # saves part_data to the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    # built off of set_data_matrix from collection.rb\n    def save_data_matrix_alt(coll, matrix, offset: [0, 0])\n      pm = coll.part_matrix\n      das = []\n\n      uniq_keys = matrix.flatten.map(&:keys).flatten.uniq\n      dms_by_key = {}\n      uniq_keys.each do |key|\n        dms_by_key[key] = coll.data_matrix(key)\n      end\n\n      coll.each_row_col(matrix, offset: offset) do |x, y, ox, oy|\n        next unless !matrix[x][y].nil? && pm[ox][oy] # this part has das\n        matrix[x][y].each do |k, v|\n          if pm[ox][oy]\n            if dms_by_key[k][ox][oy]\n              da = dms_by_key[k][ox][oy]\n              da.object = { k => v }.to_json\n              das << da\n            else\n              das << pm[ox][oy].lazy_associate(k, v)\n            end\n          end\n        end\n      end\n\n      das\n    end\n\n    # Returns an array of all the keys in this map\n    def keys\n      @map.keys\n    end\n\n    # Returns the string representation of the map\n    def to_string\n      @map.to_s\n    end\n\n    alias to_s to_string\n  end\n\n  # private class that is used to deal with associating upload objects alongside their tag\n  class UploadAssoc\n    def initialize(tag, upload)\n      @upload = upload\n      @tag = tag || {}\n    end\n\n    def change_tag(new_tag)\n      @tag = new_tag\n    end\n\n    attr_reader :upload\n\n    attr_reader :tag\n  end\n\n  # Utilizes the part-data matrix of collections to store information about the history of\n  # parts of a collection. PartProvenance initializes and relies on two fields of every part-data\n  # slot: `source` and `destination`.\n  # `source` will store a list of item ids (with rc index if applicable),\n  # of all the ingredients used to make this part, and destination will use the same data format\n  # to record all of the places this part was used in.\n  # Item-Item provenance can technically be recorded as well with this library, but it will not\n  # be necessary.\n  #\n  module PartProvenance\n    SOURCE = \'source\'\n    DESTINATION = \'destination\'\n\n    # Record an entry to the provenance data between two parts, or a part and an item.\n    # This will populate the destination field of `from`, and the source field\n    # of the `to` in their respective associations. If from_coord or to_coord is specified, then\n    # the associations of the part of the from/to collection at that coordinate will\n    # populated instead.\n    #\n    # @param opts [Hash]  Arguments specifying which objects to record relation for\n    # @option from [Item/Collection]  the item or collection where sample transfer originated\n    # @option to [Item/Collection]  the item or collection for destination of sample transfer\n    # @option from_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `to` was a collection\n    # @option to_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `from` was a collection\n    # @option additional_relation_data [Hash]  optionally, add additional key/value pairs to add to both object\'s routing data\n    #                         for this relation. For example, you might want to specify the volume of the transfer,\n    #                         or which colony was picked from a plate\n    # @option from_map [AssociationMap]  existing AssociationMap for the given from-object, required to successfully associate provenance to\n    #                           the `from` item\n    # @option to_map [AssociationMap]  existing AssociationMap for the given to-object, required to successfully associate provenance to\n    #                           the `to` item\n    def add_provenance(opts = {})\n      if opts[:from] == opts[:to] # special case: provenance between two parts on the same collection\n        opts[:from_map] = opts[:to_map] # ensure from map and to map are the same object for this case\n      end\n\n      # creating information hashes to represent `from` and `to` relationship data\n      from_info = serialize_as_simple_tag(opts[:from], opts[:from_coord], opts[:additional_relation_data])\n      to_info = serialize_as_simple_tag(opts[:to], opts[:to_coord], opts[:additional_relation_data])\n\n      # in destination field of `from`, add information tag representing `to`\n      append_to_association(opts[:from_map], DESTINATION, to_info, coord: opts[:from_coord]) if opts[:from_map]\n\n      # in source field of `to`, add information tag representing `from`\n      append_to_association(opts[:to_map], SOURCE, from_info, coord: opts[:to_coord]) if opts[:to_map]\n    end\n\n    # Retrieves a list of sources that were used to construct the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def sources(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, SOURCE, coord: coord)\n      else\n        AssociationMap.get_associated_data(object, SOURCE)\n      end\n    end\n\n    # Retrieves a list of destinations that were made using the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def destinations(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, DESTINATION, coord: opts[:coord])\n      else\n        AssociationMap.get_associated_data(object, DESTINATION)\n      end\n    end\n\n    # For the given associatable target object, appends or concatenates the given datum_to_append to the association\n    # at `key` for that object\n    #\n    # @param association_map [AssocioationMap]  an AssociationMap that will have its associations appended to.\n    # @param key [String/Symbol]  The association key which maps to an appendable object\n    # @param datum_to_append [Serializable Object]  the element to append to the list at the value for the given key\n    # @param opts [Hash]  additional options\n    # @option coord [Tuple array]  coordinate of target part, if association target is a collection\n    def append_to_association(association_map, key, datum_to_append, opts = {})\n      if opts[:coord] # we will be interacting with the associations of a part of a collection if coord is specified\n        association_map.putrc(opts[:coord][0], opts[:coord][1], key, []) if association_map.getrc(opts[:coord][0], opts[:coord][1], key).nil?\n        association_map.getrc(opts[:coord][0], opts[:coord][1], key) <<  datum_to_append\n      else\n        association_map.put(key, []) if association_map.get(key).nil?\n        association_map.get(key) << datum_to_append\n      end\n    end\n\n    # Given an item, or a part of a collection, serializes it into a simple tag which can be used to retrieve it.\n    #\n    # @param item [Item/FieldValue]  can be either an Item, or\n    #                         an i/o object corresponding to a part of a collection, which can be thought of\n    #                         as constituting a \'sub item\'\n    def serialize_as_simple_tag(item, coord, additional_info)\n      info = if item.collection? && coord\n               { id: item.id, row: coord[0], column: coord[1] }\n             elsif (item.is_a? Item) || (item.is_a? Collection)\n               { id: item.id }\n             else\n               raise \'Argument is neither a part nor an item\'\n             end\n      info.merge!(additional_info) unless additional_info.nil?\n      info\n    end\n  end\nend\n',2,'Library','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(13,'source','module CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(14,'source','module PlanParams\n\n  # Gets :options from the plan associations and uses it to override default_plan_params\n  #\n  # @return [Hash] plan_params\n  def update_plan_params(plan_params:, opts:)\n    if opts.present?\n      opts = JSON.parse(opts, { symbolize_names: true })\n      plan_params.update(opts)\n    end\n    plan_params\n  end\n\n  #gets the options on the first operaton of a plan\n  def get_opts(operations)\n    operations.first.plan.associations[:options]\n  end\n\n  #gets the options on a specific operation\n  def get_op_opts(op)\n    op.plan.associations[:options]\n  end\n\n  #sets plan params as a temporary association to the operation under the :plan_params key\n  def set_temporary_op_params(op, default_plan_parameters)\n      opts = get_op_opts(op)\n      op.temporary[:plan_params] = update_plan_params(plan_params: default_plan_params, opts: opts)\n  end\n \nend',4,'Library','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(15,'source','module Units\n    \n    EMPTY = -1\n    \n    # Volume\n    MICROLITERS = \'l\'\n    MILLILITERS = \'ml\'\n    \n    # Weight\n    NANOGRAMS = \'ng\'\n    MICROGRAMS = \'g\'\n    \n    # Concentration\n    PICOMOLAR = \'pM\'\n    NANOMOLAR = \'nM\'\n    MICROMOLAR = \'M\'\n    MILLIMOLAR = \'mM\'\n    MOLAR = \'M\'\n    \n    # Temperature\n    DEGREES_C = \'C\'\n    \n    # Time\n    MINUTES = \'min\'\n    SECONDS = \'sec\'\n    HOURS =\'hr\'\n    # Force\n    TIMES_G = \'x g\'\n    \n    # R/DNA Length\n    BASEPAIRS = \'bp\'\n    KILOBASEPAIRS = \'kbp\'\n    MEGABASEPAIRS = \'mbp\'\n    GIGABASEPAIRS = \'gbp\'\n    \n    # Voltage\n    VOLTS = \'V\'\n\n    def self.qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def add_qty_display(options)\n        new_items = {}\n        \n        options.each do |key, value|\n            key =~ /^(.+_)+([a-z]+)$/\n            \n            case $2\n            when \'microliters\'\n                units = MICROLITERS\n            when \'milliliters\'\n                units = MILLILITERS\n            when \'minutes\'\n                units = MINUTES\n            else\n                next\n            end\n            \n            qty = value.to_f\n            \n            new_items[\"#{$1}qty\".to_sym] = { qty: qty, units: units }\n        end\n        \n        options.update(new_items)\n    end\n    \n    # Return the unit constant for the the unit name if there is one.\n    #\n    # @param unit_name [String] the name of the unit\n    # @returns the value of the constant with the given name\n    # @raises BadUnitNameError if the name is not the name of a defined unit\n    def self.get_unit(unit_name:)\n        self.const_get(unit_name.upcase)\n      rescue\n        raise BadUnitNameError.new(name: unit_name)\n    end\n    \n    # Exception class for bad unit name arguments to Units::get_unit.\n    #\n    # @attr_reader [String] name  the bad unit name\n    class BadUnitNameError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"Unknown unit name\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n    \n    # Return a key for the measure hash defined on the given object type.\n    #\n    # The measure hash must be defined in the data proerty of the object type as JSON.\n    # For instance\n    #\n    #   { \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }\n    #\n    # The key is constructed as the type name, an underscore, and the unit name.\n    #\n    # @param object_type [ObjectType] the object type\n    # @returns the key for the measure of the the object type if there is one\n    # @raises MissingObjectTypeMeasure if the object type has no measure data_object\n    def self.get_measure_key(object_type:)\n        data_object = object_type.data_object\n        raise MissingObjectTypeMeasureError.new(name: object_type.name) if !data_object.key?(:measure)\n        \n        measure = object_type.data_object[:measure]\n        type_name = measure[:type]\n        unit_name = measure[:unit]\n        \"#{type_name}_#{self.get_unit(unit_name: unit_name)}\"\n    end\n    \n    # Exception class for an object type with out a measure hash definition.\n    #\n    # @attr_reader [String] name  the name of the object type where measure has was expected\n    class MissingObjectTypeMeasureError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"ObjectType has no measure in data object\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n   \nend',5,'Library','2020-03-11 15:57:53','2020-03-11 15:57:53',1),(16,'source','# Library code here',6,'Library','2020-03-11 16:37:49','2020-03-11 16:37:49',1),(17,'source','# Library code here',6,'Library','2020-03-11 17:02:42','2020-03-11 17:02:42',1),(18,'source','# Library code here',7,'Library','2020-03-11 17:05:09','2020-03-11 17:05:09',1),(19,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    #batch them together (assign samples to wells in working plate)\n    assign_working_plate_well(working_plate)\n\n    #Instructions for batching\n    transfer_from_stock(working_plate)\n    \n    #return stock plates with samples\n    operations.store(opts = {io: \'input\'})\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n\n\n  #Transfers from stock plate to working plate using appropriate libraries.\n  def transfer_from_stock(working_plate)\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n  end\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1\n  def get_sample_well_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each do |loc|\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def assign_working_plate_well(working_plate)\n    operations.each do |op|\n      sample_array = []\n      input_array = op.input_array(INPUT_ARRAY).sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array, options = { reverse: false })\n    end\n\n    if debug\n      show do \n        title \"Debug Window.  Working Plate\"\n        table highlight_non_empty(working_plate)\n      end\n    end\n  end\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 17:05:25','2020-03-11 17:05:25',1),(20,'source','module Collection_Transfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_sample_well_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_sample_well_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:05:27','2020-03-11 17:05:27',1),(21,'source','module SampleManagement\n#Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1\n  def get_sample_well_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each do |loc|\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def assign_working_plate_well(working_plate)\n    operations.each do |op|\n      sample_array = []\n      input_array = op.input_array(INPUT_ARRAY).sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array, options = { reverse: false })\n    end\n\n    if debug\n      show do \n        title \"Debug Window.  Working Plate\"\n        table highlight_non_empty(working_plate)\n      end\n    end\n  end\nend',7,'Library','2020-03-11 17:06:43','2020-03-11 17:06:43',1),(22,'source','module SampleManagement\n#Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1\n  def get_sample_well_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each do |loc|\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def assign_working_plate_well(working_plate)\n    operations.each do |op|\n      sample_array = []\n      input_array = op.input_array(INPUT_ARRAY).sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array, options = { reverse: false })\n    end\n\n    if debug\n      show do \n        title \"Debug Window.  Working Plate\"\n        table highlight_non_empty(working_plate)\n      end\n    end\n  end\nend',7,'Library','2020-03-11 17:07:26','2020-03-11 17:07:26',1),(23,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    #batch them together (assign samples to wells in working plate)\n    assign_working_plate_well(working_plate)\n\n    #Instructions for batching\n    transfer_from_stock(working_plate)\n    \n    #return stock plates with samples\n    operations.store(opts = {io: \'input\'})\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n  #Transfers from stock plate to working plate using appropriate libraries.\n  def transfer_from_stock(working_plate)\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 17:07:31','2020-03-11 17:07:31',1),(24,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:23:35','2020-03-11 17:23:35',1),(25,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store(opts = {io: \'input\'})\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 17:23:41','2020-03-11 17:23:41',1),(26,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:25:22','2020-03-11 17:25:22',1),(27,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_sample_well_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_sample_well_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:25:46','2020-03-11 17:25:46',1),(28,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_sample_well_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_sample_well_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:25:46','2020-03-11 17:25:46',1),(29,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:26:25','2020-03-11 17:26:25',1),(30,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:26:26','2020-03-11 17:26:26',1),(31,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:28:21','2020-03-11 17:28:21',1),(32,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:28:22','2020-03-11 17:28:22',1),(33,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:28:25','2020-03-11 17:28:25',1),(34,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:28:25','2020-03-11 17:28:25',1),(35,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      inspect input_array.first.collection.find(input_array.first.sample)\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:29:47','2020-03-11 17:29:47',1),(36,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      inspect input_array[2].collection.find(input_array[2].sample)\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[2]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:30:39','2020-03-11 17:30:39',1),(37,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      inspect input_array[2].collection.find(input_array[2].sample)\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[0],fv.collection.find(fv.sample).first[1]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:31:55','2020-03-11 17:31:55',1),(38,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:36:28','2020-03-11 17:36:28',1),(39,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:36:37','2020-03-11 17:36:37',1),(40,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n        sub_array.push(output_sample_location)\n        output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:36:38','2020-03-11 17:36:38',1),(41,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array)\n  end\n\nend',7,'Library','2020-03-11 17:36:38','2020-03-11 17:36:38',1),(42,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.item if part.class != \"Item\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.item}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:47:41','2020-03-11 17:47:41',1),(43,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.item if part.class != \"Item\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.item}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 17:47:41','2020-03-11 17:47:41',1),(44,'source','# frozen_string_literal: true\n\n# Module with methods and classes that seek to help with associating data\n# to, and retrieving data from, items, operations, plans, collections, and parts.\n#\nmodule AssociationManagement\n  require \'matrix\'\n\n  # Associates a key and value to the associations hash of the given object.\n  # Replaces an existing association for the given key.\n  #\n  # A part may be represented as a part item, or a collection and coordinate.\n  #\n  # @param object [DataAssociator]  the object to associate data\n  # @param key [String]  the key for the association\n  # @param data [serializable object]  the data for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [Array]  row, column pair if the object is a collection\n  # @option data_matrix [String]  optional data matrix for a collection\n  def associate_data(object, key, data, opts = {})\n    AssociationMap.associate_data(object, key, data, opts)\n  end\n\n  # Returns the associated value from the associations hash of a given object.\n  # If an association doesn\'t exist for the key, returns nil.\n  #\n  # @param object [DataAssociator]  the object to associated data\n  # @param key [String]  the key for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [tuple Array]  row, column of part if object is a collection.\n  # @option data_matrix [String]  optional data matrix\n  # @return [serializable object]  the value associated with the given key\n  def get_associated_data(object, key, opts = {})\n    AssociationMap.get_associated_data(object, key, opts)\n  end\n\n  # Defines a map to manage the associations for an {Item}, {Operation}, or\n  # {Plan} object, which are Aquarium classes that extend {DataAssociator}.\n  #\n  # Note: if `map` contains associations, it is necessary to call `map.save` for\n  #       the associations to be saved to Aquarium.\n  #\n  class AssociationMap\n    DATAMATRIX_KEY = \'part_data\'\n\n    # Initializes an {AssociationMap} for the given item, operation, or plan.\n    #\n    # @param object [DataAssociator]  the object to which to associated data\n    def initialize(object)\n      @object = object\n      @map = {}\n\n      @object.associations.each do |datum|\n        @map[datum[0]] =\n          if @object.upload(datum[0]).nil?\n            datum[1]\n          else\n            UploadAssoc.new(datum[1], @object.upload(datum[0]))\n          end\n      end\n\n      if object.is_a? Collection\n        initialize_part_data\n        data_matrix_all(@object, @map[DATAMATRIX_KEY])\n      end\n    end\n\n    # Retrieves part_data from the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    def data_matrix_all(coll, data_matrix)\n      pas = coll.part_associations\n      part_ids = pas.collect(&:part_id)\n      das = DataAssociation.where(parent_class: \'Item\', parent_id: part_ids)\n      pas.each do |pa|\n        data_matrix[pa.row][pa.column] = {}\n        das.select { |da| da.parent_id == pa.part_id }.each do |da|\n          data_matrix[pa.row][pa.column][da.key] = da.value\n        end\n      end\n      data_matrix\n    end\n\n    # All in one static method which associates a key and value\n    # to the associations hash of a given object. If an association already\n    # exists at the given key, it will be replaced. Can associate to parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated. Can be an io field value\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when associating to a part of a collection, use a\n    #                         data matrix besides the default one\n    def self.associate_data(object, key, data, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot associate to a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        assoc_map.putrc(object.row, object.column, key, data)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        assoc_map.putrc(opts[:coord][0], opts[:coord][1], key, data)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        assoc_map.put(key, data)\n      end\n      assoc_map.save\n    end\n\n    # All in one static method which gets an associated value\n    # from the associations hash of a given object. If an association doesn\'t\n    # exist at the given key, returns nil. Can get associations from parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated, can be an io field value\n    # @param key [String]  the key for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when retrieving association from a part of a collection,\n    #                         use a matrix besides the default one\n    # @return [serializable object]  the data stored in the associations of the given object at the given key\n    def self.get_associated_data(object, key, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot get data from a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        return assoc_map.getrc(object.row, object.column, key)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.getrc(opts[:coord][0], opts[:coord][1], key)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.get(key)\n      end\n    end\n\n    # Adds an association for the data with the key.\n    # The data must be serializable.\n    #\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  Additional Options\n    # @option tag  [String]  If putting an Upload, optionally specify an extra label\n    def put(key, data, opts = { tag: {} })\n      @map[key] = if data.is_a?(Upload)\n                    UploadAssoc.new(opts[:tag], data)\n                  else\n                    data\n                  end\n    end\n\n    # Adds an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # If the data_matrix for the collection has not been created yet, it is initialized\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def putrc(row, column, key, data, data_matrix = DATAMATRIX_KEY)\n      # if the data_matrix for this collection does not exist yet, initialize it.\n      initialize_part_data(data_matrix)\n      @map[data_matrix][row][column][key] = data\n    end\n\n    # To be called when the object of association is a collection,\n    # establishes a matrix parallel to the sample matrix which can\n    # be used to store additional information about individual parts\n    # Each slot in the matrix will be a new empty hash.\n    #\n    # @param coll [Collection]  the object for which part-data matrix will be initialized\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def initialize_part_data(data_matrix = DATAMATRIX_KEY)\n      raise \"Invalid Method Call: cannot associate part data to an object that isn\'t a collection\" unless @object.is_a?(Collection)\n      # TODO: fix the following so that can use the Base method\n      # coll = collection_from(@object.id)\n      coll = Collection.find(@object.id)\n      @map[data_matrix] = Array.new(coll.dimensions[0]) { Array.new(coll.dimensions[1]) { {} } } if @map[data_matrix].nil?\n    end\n\n    # Returns the associated data for the key, if any.\n    #\n    # @param key [String]  the key for the association\n    # @returns the data object for the key, `nil` otherwise\n    def get(key)\n      data = @map[key]\n      if data.is_a?(UploadAssoc)\n        data.upload\n      else\n        data\n      end\n    end\n\n    # Gets an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # Returns the associated data for the key, if any.\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns the data object for the key, `nil` otherwise\n    def getrc(row, column, key, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix][row][column][key] unless @map[data_matrix].nil?\n    end\n\n    # Retrieve the associations for all parts of the collection\n    # as a matrix.\n    # @requires  current object is a collection\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns  the data matrix, if one exists\n    def get_data_matrix(data_matrix = DATAMATRIX_KEY)\n      Matrix.rows(@map[data_matrix])\n    end\n\n    # Replace or initialize the data matrix for this object\n    # with a custom one.\n    # @requires  the current object is a collection\n    # `matrix` have the same row column dimensions as the collection\n    #\n    # @param new_matrix [Matrix]  the new data matrix\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix (by key) to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n\n    def set_data_matrix(matrix, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix] = matrix.to_a\n    end\n\n    # Saves the associations in this map to Aquarium.\n    def save\n      das = []\n      @map.each_key do |key|\n        if key == DATAMATRIX_KEY\n          das.concat save_data_matrix_alt(@object, @map[key])\n        elsif @map[key].is_a? UploadAssoc\n          # TODO: update this to lazy associate once aq is updated to hav lazy upload assoc (on master, just not on server yet)\n          @object.associate(key, @map[key].tag, @map[key].upload)\n        else\n          das << @object.lazy_associate(key, @map[key])\n        end\n      end\n      DataAssociation.import(das, on_duplicate_key_update: [:object]) unless das.empty?\n      @object.save\n      nil\n    end\n\n    # saves part_data to the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    # built off of set_data_matrix from collection.rb\n    def save_data_matrix_alt(coll, matrix, offset: [0, 0])\n      pm = coll.part_matrix\n      das = []\n\n      uniq_keys = matrix.flatten.map(&:keys).flatten.uniq\n      dms_by_key = {}\n      uniq_keys.each do |key|\n        dms_by_key[key] = coll.data_matrix(key)\n      end\n\n      coll.each_row_col(matrix, offset: offset) do |x, y, ox, oy|\n        next unless !matrix[x][y].nil? && pm[ox][oy] # this part has das\n        matrix[x][y].each do |k, v|\n          if pm[ox][oy]\n            if dms_by_key[k][ox][oy]\n              da = dms_by_key[k][ox][oy]\n              da.object = { k => v }.to_json\n              das << da\n            else\n              das << pm[ox][oy].lazy_associate(k, v)\n            end\n          end\n        end\n      end\n\n      das\n    end\n\n    # Returns an array of all the keys in this map\n    def keys\n      @map.keys\n    end\n\n    # Returns the string representation of the map\n    def to_string\n      @map.to_s\n    end\n\n    alias to_s to_string\n  end\n\n  # private class that is used to deal with associating upload objects alongside their tag\n  class UploadAssoc\n    def initialize(tag, upload)\n      @upload = upload\n      @tag = tag || {}\n    end\n\n    def change_tag(new_tag)\n      @tag = new_tag\n    end\n\n    attr_reader :upload\n\n    attr_reader :tag\n  end\n\n  # Utilizes the part-data matrix of collections to store information about the history of\n  # parts of a collection. PartProvenance initializes and relies on two fields of every part-data\n  # slot: `source` and `destination`.\n  # `source` will store a list of item ids (with rc index if applicable),\n  # of all the ingredients used to make this part, and destination will use the same data format\n  # to record all of the places this part was used in.\n  # Item-Item provenance can technically be recorded as well with this library, but it will not\n  # be necessary.\n  #\n  module PartProvenance\n    SOURCE = \'source\'\n    DESTINATION = \'destination\'\n\n    # Record an entry to the provenance data between two parts, or a part and an item.\n    # This will populate the destination field of `from`, and the source field\n    # of the `to` in their respective associations. If from_coord or to_coord is specified, then\n    # the associations of the part of the from/to collection at that coordinate will\n    # populated instead.\n    #\n    # @param opts [Hash]  Arguments specifying which objects to record relation for\n    # @option from [Item/Collection]  the item or collection where sample transfer originated\n    # @option to [Item/Collection]  the item or collection for destination of sample transfer\n    # @option from_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `to` was a collection\n    # @option to_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `from` was a collection\n    # @option additional_relation_data [Hash]  optionally, add additional key/value pairs to add to both object\'s routing data\n    #                         for this relation. For example, you might want to specify the volume of the transfer,\n    #                         or which colony was picked from a plate\n    # @option from_map [AssociationMap]  existing AssociationMap for the given from-object, required to successfully associate provenance to\n    #                           the `from` item\n    # @option to_map [AssociationMap]  existing AssociationMap for the given to-object, required to successfully associate provenance to\n    #                           the `to` item\n    def add_provenance(opts = {})\n      if opts[:from] == opts[:to] # special case: provenance between two parts on the same collection\n        opts[:from_map] = opts[:to_map] # ensure from map and to map are the same object for this case\n      end\n\n      # creating information hashes to represent `from` and `to` relationship data\n      from_info = serialize_as_simple_tag(opts[:from], opts[:from_coord], opts[:additional_relation_data])\n      to_info = serialize_as_simple_tag(opts[:to], opts[:to_coord], opts[:additional_relation_data])\n\n      # in destination field of `from`, add information tag representing `to`\n      append_to_association(opts[:from_map], DESTINATION, to_info, coord: opts[:from_coord]) if opts[:from_map]\n\n      # in source field of `to`, add information tag representing `from`\n      append_to_association(opts[:to_map], SOURCE, from_info, coord: opts[:to_coord]) if opts[:to_map]\n    end\n\n    # Retrieves a list of sources that were used to construct the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def sources(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, SOURCE, coord: coord)\n      else\n        AssociationMap.get_associated_data(object, SOURCE)\n      end\n    end\n\n    # Retrieves a list of destinations that were made using the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def destinations(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, DESTINATION, coord: opts[:coord])\n      else\n        AssociationMap.get_associated_data(object, DESTINATION)\n      end\n    end\n\n    # For the given associatable target object, appends or concatenates the given datum_to_append to the association\n    # at `key` for that object\n    #\n    # @param association_map [AssocioationMap]  an AssociationMap that will have its associations appended to.\n    # @param key [String/Symbol]  The association key which maps to an appendable object\n    # @param datum_to_append [Serializable Object]  the element to append to the list at the value for the given key\n    # @param opts [Hash]  additional options\n    # @option coord [Tuple array]  coordinate of target part, if association target is a collection\n    def append_to_association(association_map, key, datum_to_append, opts = {})\n      if opts[:coord] # we will be interacting with the associations of a part of a collection if coord is specified\n        association_map.putrc(opts[:coord][0], opts[:coord][1], key, []) if association_map.getrc(opts[:coord][0], opts[:coord][1], key).nil?\n        association_map.getrc(opts[:coord][0], opts[:coord][1], key) <<  datum_to_append\n      else\n        association_map.put(key, []) if association_map.get(key).nil?\n        association_map.get(key) << datum_to_append\n      end\n    end\n\n    # Given an item, or a part of a collection, serializes it into a simple tag which can be used to retrieve it.\n    #\n    # @param item [Item/FieldValue]  can be either an Item, or\n    #                         an i/o object corresponding to a part of a collection, which can be thought of\n    #                         as constituting a \'sub item\'\n    def serialize_as_simple_tag(item, coord, additional_info)\n      info = if item.collection? && coord\n               { id: item.id, row: coord[0], column: coord[1] }\n             elsif (item.is_a? Item) || (item.is_a? Collection)\n               { id: item.id }\n             else\n               raise \'Argument is neither a part nor an item\'\n             end\n      info.merge!(additional_info) unless additional_info.nil?\n      info\n    end\n  end\nend\n',2,'Library','2020-03-11 17:53:01','2020-03-11 17:53:01',1),(45,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\nend',7,'Library','2020-03-11 20:48:14','2020-03-11 20:48:14',1),(46,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 20:48:15','2020-03-11 20:48:15',1),(47,'source','module Units\n    \n    EMPTY = -1\n    \n    # Volume\n    MICROLITERS = \'ul\'\n    MILLILITERS = \'ml\'\n    \n    # Weight\n    NANOGRAMS = \'ng\'\n    MICROGRAMS = \'g\'\n    \n    # Concentration\n    PICOMOLAR = \'pM\'\n    NANOMOLAR = \'nM\'\n    MICROMOLAR = \'M\'\n    MILLIMOLAR = \'mM\'\n    MOLAR = \'M\'\n    \n    # Temperature\n    DEGREES_C = \'C\'\n    \n    # Time\n    MINUTES = \'min\'\n    SECONDS = \'sec\'\n    HOURS =\'hr\'\n    # Force\n    TIMES_G = \'x g\'\n    \n    # R/DNA Length\n    BASEPAIRS = \'bp\'\n    KILOBASEPAIRS = \'kbp\'\n    MEGABASEPAIRS = \'mbp\'\n    GIGABASEPAIRS = \'gbp\'\n    \n    # Voltage\n    VOLTS = \'V\'\n\n    def self.qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def add_qty_display(options)\n        new_items = {}\n        \n        options.each do |key, value|\n            key =~ /^(.+_)+([a-z]+)$/\n            \n            case $2\n            when \'microliters\'\n                units = MICROLITERS\n            when \'milliliters\'\n                units = MILLILITERS\n            when \'minutes\'\n                units = MINUTES\n            else\n                next\n            end\n            \n            qty = value.to_f\n            \n            new_items[\"#{$1}qty\".to_sym] = { qty: qty, units: units }\n        end\n        \n        options.update(new_items)\n    end\n    \n    # Return the unit constant for the the unit name if there is one.\n    #\n    # @param unit_name [String] the name of the unit\n    # @returns the value of the constant with the given name\n    # @raises BadUnitNameError if the name is not the name of a defined unit\n    def self.get_unit(unit_name:)\n        self.const_get(unit_name.upcase)\n      rescue\n        raise BadUnitNameError.new(name: unit_name)\n    end\n    \n    # Exception class for bad unit name arguments to Units::get_unit.\n    #\n    # @attr_reader [String] name  the bad unit name\n    class BadUnitNameError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"Unknown unit name\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n    \n    # Return a key for the measure hash defined on the given object type.\n    #\n    # The measure hash must be defined in the data proerty of the object type as JSON.\n    # For instance\n    #\n    #   { \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }\n    #\n    # The key is constructed as the type name, an underscore, and the unit name.\n    #\n    # @param object_type [ObjectType] the object type\n    # @returns the key for the measure of the the object type if there is one\n    # @raises MissingObjectTypeMeasure if the object type has no measure data_object\n    def self.get_measure_key(object_type:)\n        data_object = object_type.data_object\n        raise MissingObjectTypeMeasureError.new(name: object_type.name) if !data_object.key?(:measure)\n        \n        measure = object_type.data_object[:measure]\n        type_name = measure[:type]\n        unit_name = measure[:unit]\n        \"#{type_name}_#{self.get_unit(unit_name: unit_name)}\"\n    end\n    \n    # Exception class for an object type with out a measure hash definition.\n    #\n    # @attr_reader [String] name  the name of the object type where measure has was expected\n    class MissingObjectTypeMeasureError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"ObjectType has no measure in data object\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n   \nend',5,'Library','2020-03-11 20:48:17','2020-03-11 20:48:17',1),(48,'source','module PlanParams\n\n  # Gets :options from the plan associations and uses it to override default_plan_params\n  #\n  # @return [Hash] plan_params\n  def update_plan_params(plan_params:, opts:)\n    if opts.present?\n      opts = JSON.parse(opts, { symbolize_names: true })\n      plan_params.update(opts)\n    end\n    plan_params\n  end\n\n  #gets the options on the first operaton of a plan\n  def get_opts(operations)\n    operations.first.plan.associations[:options]\n  end\n\n  #gets the options on a specific operation\n  def get_op_opts(op)\n    op.plan.associations[:options]\n  end\n\n  #sets plan params as a temporary association to the operation under the :plan_params key\n  def set_temporary_op_params(op, default_plan_parameters)\n      opts = get_op_opts(op)\n      op.temporary[:plan_params] = update_plan_params(plan_params: default_plan_params, opts: opts)\n  end\n \nend',4,'Library','2020-03-11 20:48:17','2020-03-11 20:48:17',1),(49,'source','# frozen_string_literal: true\n\n# Module with methods and classes that seek to help with associating data\n# to, and retrieving data from, items, operations, plans, collections, and parts.\n#\nmodule AssociationManagement\n  require \'matrix\'\n\n  # Associates a key and value to the associations hash of the given object.\n  # Replaces an existing association for the given key.\n  #\n  # A part may be represented as a part item, or a collection and coordinate.\n  #\n  # @param object [DataAssociator]  the object to associate data\n  # @param key [String]  the key for the association\n  # @param data [serializable object]  the data for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [Array]  row, column pair if the object is a collection\n  # @option data_matrix [String]  optional data matrix for a collection\n  def associate_data(object, key, data, opts = {})\n    AssociationMap.associate_data(object, key, data, opts)\n  end\n\n  # Returns the associated value from the associations hash of a given object.\n  # If an association doesn\'t exist for the key, returns nil.\n  #\n  # @param object [DataAssociator]  the object to associated data\n  # @param key [String]  the key for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [tuple Array]  row, column of part if object is a collection.\n  # @option data_matrix [String]  optional data matrix\n  # @return [serializable object]  the value associated with the given key\n  def get_associated_data(object, key, opts = {})\n    AssociationMap.get_associated_data(object, key, opts)\n  end\n\n  # Defines a map to manage the associations for an {Item}, {Operation}, or\n  # {Plan} object, which are Aquarium classes that extend {DataAssociator}.\n  #\n  # Note: if `map` contains associations, it is necessary to call `map.save` for\n  #       the associations to be saved to Aquarium.\n  #\n  class AssociationMap\n    DATAMATRIX_KEY = \'part_data\'\n\n    # Initializes an {AssociationMap} for the given item, operation, or plan.\n    #\n    # @param object [DataAssociator]  the object to which to associated data\n    def initialize(object)\n      @object = object\n      @map = {}\n\n      @object.associations.each do |datum|\n        @map[datum[0]] =\n          if @object.upload(datum[0]).nil?\n            datum[1]\n          else\n            UploadAssoc.new(datum[1], @object.upload(datum[0]))\n          end\n      end\n\n      if object.is_a? Collection\n        initialize_part_data\n        data_matrix_all(@object, @map[DATAMATRIX_KEY])\n      end\n    end\n\n    # Retrieves part_data from the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    def data_matrix_all(coll, data_matrix)\n      pas = coll.part_associations\n      part_ids = pas.collect(&:part_id)\n      das = DataAssociation.where(parent_class: \'Item\', parent_id: part_ids)\n      pas.each do |pa|\n        data_matrix[pa.row][pa.column] = {}\n        das.select { |da| da.parent_id == pa.part_id }.each do |da|\n          data_matrix[pa.row][pa.column][da.key] = da.value\n        end\n      end\n      data_matrix\n    end\n\n    # All in one static method which associates a key and value\n    # to the associations hash of a given object. If an association already\n    # exists at the given key, it will be replaced. Can associate to parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated. Can be an io field value\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when associating to a part of a collection, use a\n    #                         data matrix besides the default one\n    def self.associate_data(object, key, data, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot associate to a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        assoc_map.putrc(object.row, object.column, key, data)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        assoc_map.putrc(opts[:coord][0], opts[:coord][1], key, data)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        assoc_map.put(key, data)\n      end\n      assoc_map.save\n    end\n\n    # All in one static method which gets an associated value\n    # from the associations hash of a given object. If an association doesn\'t\n    # exist at the given key, returns nil. Can get associations from parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated, can be an io field value\n    # @param key [String]  the key for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when retrieving association from a part of a collection,\n    #                         use a matrix besides the default one\n    # @return [serializable object]  the data stored in the associations of the given object at the given key\n    def self.get_associated_data(object, key, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot get data from a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        return assoc_map.getrc(object.row, object.column, key)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.getrc(opts[:coord][0], opts[:coord][1], key)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.get(key)\n      end\n    end\n\n    # Adds an association for the data with the key.\n    # The data must be serializable.\n    #\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  Additional Options\n    # @option tag  [String]  If putting an Upload, optionally specify an extra label\n    def put(key, data, opts = { tag: {} })\n      @map[key] = if data.is_a?(Upload)\n                    UploadAssoc.new(opts[:tag], data)\n                  else\n                    data\n                  end\n    end\n\n    # Adds an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # If the data_matrix for the collection has not been created yet, it is initialized\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def putrc(row, column, key, data, data_matrix = DATAMATRIX_KEY)\n      # if the data_matrix for this collection does not exist yet, initialize it.\n      initialize_part_data(data_matrix)\n      @map[data_matrix][row][column][key] = data\n    end\n\n    # To be called when the object of association is a collection,\n    # establishes a matrix parallel to the sample matrix which can\n    # be used to store additional information about individual parts\n    # Each slot in the matrix will be a new empty hash.\n    #\n    # @param coll [Collection]  the object for which part-data matrix will be initialized\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def initialize_part_data(data_matrix = DATAMATRIX_KEY)\n      raise \"Invalid Method Call: cannot associate part data to an object that isn\'t a collection\" unless @object.is_a?(Collection)\n      # TODO: fix the following so that can use the Base method\n      # coll = collection_from(@object.id)\n      coll = Collection.find(@object.id)\n      @map[data_matrix] = Array.new(coll.dimensions[0]) { Array.new(coll.dimensions[1]) { {} } } if @map[data_matrix].nil?\n    end\n\n    # Returns the associated data for the key, if any.\n    #\n    # @param key [String]  the key for the association\n    # @returns the data object for the key, `nil` otherwise\n    def get(key)\n      data = @map[key]\n      if data.is_a?(UploadAssoc)\n        data.upload\n      else\n        data\n      end\n    end\n\n    # Gets an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # Returns the associated data for the key, if any.\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns the data object for the key, `nil` otherwise\n    def getrc(row, column, key, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix][row][column][key] unless @map[data_matrix].nil?\n    end\n\n    # Retrieve the associations for all parts of the collection\n    # as a matrix.\n    # @requires  current object is a collection\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns  the data matrix, if one exists\n    def get_data_matrix(data_matrix = DATAMATRIX_KEY)\n      Matrix.rows(@map[data_matrix])\n    end\n\n    # Replace or initialize the data matrix for this object\n    # with a custom one.\n    # @requires  the current object is a collection\n    # `matrix` have the same row column dimensions as the collection\n    #\n    # @param new_matrix [Matrix]  the new data matrix\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix (by key) to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n\n    def set_data_matrix(matrix, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix] = matrix.to_a\n    end\n\n    # Saves the associations in this map to Aquarium.\n    def save\n      das = []\n      @map.each_key do |key|\n        if key == DATAMATRIX_KEY\n          das.concat save_data_matrix_alt(@object, @map[key])\n        elsif @map[key].is_a? UploadAssoc\n          # TODO: update this to lazy associate once aq is updated to hav lazy upload assoc (on master, just not on server yet)\n          @object.associate(key, @map[key].tag, @map[key].upload)\n        else\n          das << @object.lazy_associate(key, @map[key])\n        end\n      end\n      DataAssociation.import(das, on_duplicate_key_update: [:object]) unless das.empty?\n      @object.save\n      nil\n    end\n\n    # saves part_data to the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    # built off of set_data_matrix from collection.rb\n    def save_data_matrix_alt(coll, matrix, offset: [0, 0])\n      pm = coll.part_matrix\n      das = []\n\n      uniq_keys = matrix.flatten.map(&:keys).flatten.uniq\n      dms_by_key = {}\n      uniq_keys.each do |key|\n        dms_by_key[key] = coll.data_matrix(key)\n      end\n\n      coll.each_row_col(matrix, offset: offset) do |x, y, ox, oy|\n        next unless !matrix[x][y].nil? && pm[ox][oy] # this part has das\n        matrix[x][y].each do |k, v|\n          if pm[ox][oy]\n            if dms_by_key[k][ox][oy]\n              da = dms_by_key[k][ox][oy]\n              da.object = { k => v }.to_json\n              das << da\n            else\n              das << pm[ox][oy].lazy_associate(k, v)\n            end\n          end\n        end\n      end\n\n      das\n    end\n\n    # Returns an array of all the keys in this map\n    def keys\n      @map.keys\n    end\n\n    # Returns the string representation of the map\n    def to_string\n      @map.to_s\n    end\n\n    alias to_s to_string\n  end\n\n  # private class that is used to deal with associating upload objects alongside their tag\n  class UploadAssoc\n    def initialize(tag, upload)\n      @upload = upload\n      @tag = tag || {}\n    end\n\n    def change_tag(new_tag)\n      @tag = new_tag\n    end\n\n    attr_reader :upload\n\n    attr_reader :tag\n  end\n\n  # Utilizes the part-data matrix of collections to store information about the history of\n  # parts of a collection. PartProvenance initializes and relies on two fields of every part-data\n  # slot: `source` and `destination`.\n  # `source` will store a list of item ids (with rc index if applicable),\n  # of all the ingredients used to make this part, and destination will use the same data format\n  # to record all of the places this part was used in.\n  # Item-Item provenance can technically be recorded as well with this library, but it will not\n  # be necessary.\n  #\n  module PartProvenance\n    SOURCE = \'source\'\n    DESTINATION = \'destination\'\n\n    # Record an entry to the provenance data between two parts, or a part and an item.\n    # This will populate the destination field of `from`, and the source field\n    # of the `to` in their respective associations. If from_coord or to_coord is specified, then\n    # the associations of the part of the from/to collection at that coordinate will\n    # populated instead.\n    #\n    # @param opts [Hash]  Arguments specifying which objects to record relation for\n    # @option from [Item/Collection]  the item or collection where sample transfer originated\n    # @option to [Item/Collection]  the item or collection for destination of sample transfer\n    # @option from_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `to` was a collection\n    # @option to_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `from` was a collection\n    # @option additional_relation_data [Hash]  optionally, add additional key/value pairs to add to both object\'s routing data\n    #                         for this relation. For example, you might want to specify the volume of the transfer,\n    #                         or which colony was picked from a plate\n    # @option from_map [AssociationMap]  existing AssociationMap for the given from-object, required to successfully associate provenance to\n    #                           the `from` item\n    # @option to_map [AssociationMap]  existing AssociationMap for the given to-object, required to successfully associate provenance to\n    #                           the `to` item\n    def add_provenance(opts = {})\n      if opts[:from] == opts[:to] # special case: provenance between two parts on the same collection\n        opts[:from_map] = opts[:to_map] # ensure from map and to map are the same object for this case\n      end\n\n      # creating information hashes to represent `from` and `to` relationship data\n      from_info = serialize_as_simple_tag(opts[:from], opts[:from_coord], opts[:additional_relation_data])\n      to_info = serialize_as_simple_tag(opts[:to], opts[:to_coord], opts[:additional_relation_data])\n\n      # in destination field of `from`, add information tag representing `to`\n      append_to_association(opts[:from_map], DESTINATION, to_info, coord: opts[:from_coord]) if opts[:from_map]\n\n      # in source field of `to`, add information tag representing `from`\n      append_to_association(opts[:to_map], SOURCE, from_info, coord: opts[:to_coord]) if opts[:to_map]\n    end\n\n    # Retrieves a list of sources that were used to construct the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def sources(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, SOURCE, coord: coord)\n      else\n        AssociationMap.get_associated_data(object, SOURCE)\n      end\n    end\n\n    # Retrieves a list of destinations that were made using the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def destinations(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, DESTINATION, coord: opts[:coord])\n      else\n        AssociationMap.get_associated_data(object, DESTINATION)\n      end\n    end\n\n    # For the given associatable target object, appends or concatenates the given datum_to_append to the association\n    # at `key` for that object\n    #\n    # @param association_map [AssocioationMap]  an AssociationMap that will have its associations appended to.\n    # @param key [String/Symbol]  The association key which maps to an appendable object\n    # @param datum_to_append [Serializable Object]  the element to append to the list at the value for the given key\n    # @param opts [Hash]  additional options\n    # @option coord [Tuple array]  coordinate of target part, if association target is a collection\n    def append_to_association(association_map, key, datum_to_append, opts = {})\n      if opts[:coord] # we will be interacting with the associations of a part of a collection if coord is specified\n        association_map.putrc(opts[:coord][0], opts[:coord][1], key, []) if association_map.getrc(opts[:coord][0], opts[:coord][1], key).nil?\n        association_map.getrc(opts[:coord][0], opts[:coord][1], key) <<  datum_to_append\n      else\n        association_map.put(key, []) if association_map.get(key).nil?\n        association_map.get(key) << datum_to_append\n      end\n    end\n\n    # Given an item, or a part of a collection, serializes it into a simple tag which can be used to retrieve it.\n    #\n    # @param item [Item/FieldValue]  can be either an Item, or\n    #                         an i/o object corresponding to a part of a collection, which can be thought of\n    #                         as constituting a \'sub item\'\n    def serialize_as_simple_tag(item, coord, additional_info)\n      info = if item.collection? && coord\n               { id: item.id, row: coord[0], column: coord[1] }\n             elsif (item.is_a? Item) || (item.is_a? Collection)\n               { id: item.id }\n             else\n               raise \'Argument is neither a part nor an item\'\n             end\n      info.merge!(additional_info) unless additional_info.nil?\n      info\n    end\n  end\nend\n',2,'Library','2020-03-11 20:48:18','2020-03-11 20:48:18',1),(50,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store(opts = {io: \'input\'})\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 20:48:21','2020-03-11 20:48:21',1),(51,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store(opts = {io: \'input\'})\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 20:48:27','2020-03-11 20:48:27',1),(52,'source','# frozen_string_literal: true\n\n# Module with methods and classes that seek to help with associating data\n# to, and retrieving data from, items, operations, plans, collections, and parts.\n#\nmodule AssociationManagement\n  require \'matrix\'\n\n  # Associates a key and value to the associations hash of the given object.\n  # Replaces an existing association for the given key.\n  #\n  # A part may be represented as a part item, or a collection and coordinate.\n  #\n  # @param object [DataAssociator]  the object to associate data\n  # @param key [String]  the key for the association\n  # @param data [serializable object]  the data for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [Array]  row, column pair if the object is a collection\n  # @option data_matrix [String]  optional data matrix for a collection\n  def associate_data(object, key, data, opts = {})\n    AssociationMap.associate_data(object, key, data, opts)\n  end\n\n  # Returns the associated value from the associations hash of a given object.\n  # If an association doesn\'t exist for the key, returns nil.\n  #\n  # @param object [DataAssociator]  the object to associated data\n  # @param key [String]  the key for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [tuple Array]  row, column of part if object is a collection.\n  # @option data_matrix [String]  optional data matrix\n  # @return [serializable object]  the value associated with the given key\n  def get_associated_data(object, key, opts = {})\n    AssociationMap.get_associated_data(object, key, opts)\n  end\n\n  # Defines a map to manage the associations for an {Item}, {Operation}, or\n  # {Plan} object, which are Aquarium classes that extend {DataAssociator}.\n  #\n  # Note: if `map` contains associations, it is necessary to call `map.save` for\n  #       the associations to be saved to Aquarium.\n  #\n  class AssociationMap\n    DATAMATRIX_KEY = \'part_data\'\n\n    # Initializes an {AssociationMap} for the given item, operation, or plan.\n    #\n    # @param object [DataAssociator]  the object to which to associated data\n    def initialize(object)\n      @object = object\n      @map = {}\n\n      @object.associations.each do |datum|\n        @map[datum[0]] =\n          if @object.upload(datum[0]).nil?\n            datum[1]\n          else\n            UploadAssoc.new(datum[1], @object.upload(datum[0]))\n          end\n      end\n\n      if object.is_a? Collection\n        initialize_part_data\n        data_matrix_all(@object, @map[DATAMATRIX_KEY])\n      end\n    end\n\n    # Retrieves part_data from the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    def data_matrix_all(coll, data_matrix)\n      pas = coll.part_associations\n      part_ids = pas.collect(&:part_id)\n      das = DataAssociation.where(parent_class: \'Item\', parent_id: part_ids)\n      pas.each do |pa|\n        data_matrix[pa.row][pa.column] = {}\n        das.select { |da| da.parent_id == pa.part_id }.each do |da|\n          data_matrix[pa.row][pa.column][da.key] = da.value\n        end\n      end\n      data_matrix\n    end\n\n    # All in one static method which associates a key and value\n    # to the associations hash of a given object. If an association already\n    # exists at the given key, it will be replaced. Can associate to parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated. Can be an io field value\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when associating to a part of a collection, use a\n    #                         data matrix besides the default one\n    def self.associate_data(object, key, data, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot associate to a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        assoc_map.putrc(object.row, object.column, key, data)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        assoc_map.putrc(opts[:coord][0], opts[:coord][1], key, data)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        assoc_map.put(key, data)\n      end\n      assoc_map.save\n    end\n\n    # All in one static method which gets an associated value\n    # from the associations hash of a given object. If an association doesn\'t\n    # exist at the given key, returns nil. Can get associations from parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated, can be an io field value\n    # @param key [String]  the key for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when retrieving association from a part of a collection,\n    #                         use a matrix besides the default one\n    # @return [serializable object]  the data stored in the associations of the given object at the given key\n    def self.get_associated_data(object, key, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot get data from a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        return assoc_map.getrc(object.row, object.column, key)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.getrc(opts[:coord][0], opts[:coord][1], key)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.get(key)\n      end\n    end\n\n    # Adds an association for the data with the key.\n    # The data must be serializable.\n    #\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  Additional Options\n    # @option tag  [String]  If putting an Upload, optionally specify an extra label\n    def put(key, data, opts = { tag: {} })\n      @map[key] = if data.is_a?(Upload)\n                    UploadAssoc.new(opts[:tag], data)\n                  else\n                    data\n                  end\n    end\n\n    # Adds an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # If the data_matrix for the collection has not been created yet, it is initialized\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def putrc(row, column, key, data, data_matrix = DATAMATRIX_KEY)\n      # if the data_matrix for this collection does not exist yet, initialize it.\n      initialize_part_data(data_matrix)\n      @map[data_matrix][row][column][key] = data\n    end\n\n    # To be called when the object of association is a collection,\n    # establishes a matrix parallel to the sample matrix which can\n    # be used to store additional information about individual parts\n    # Each slot in the matrix will be a new empty hash.\n    #\n    # @param coll [Collection]  the object for which part-data matrix will be initialized\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def initialize_part_data(data_matrix = DATAMATRIX_KEY)\n      raise \"Invalid Method Call: cannot associate part data to an object that isn\'t a collection\" unless @object.is_a?(Collection)\n      # TODO: fix the following so that can use the Base method\n      # coll = collection_from(@object.id)\n      coll = Collection.find(@object.id)\n      @map[data_matrix] = Array.new(coll.dimensions[0]) { Array.new(coll.dimensions[1]) { {} } } if @map[data_matrix].nil?\n    end\n\n    # Returns the associated data for the key, if any.\n    #\n    # @param key [String]  the key for the association\n    # @returns the data object for the key, `nil` otherwise\n    def get(key)\n      data = @map[key]\n      if data.is_a?(UploadAssoc)\n        data.upload\n      else\n        data\n      end\n    end\n\n    # Gets an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # Returns the associated data for the key, if any.\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns the data object for the key, `nil` otherwise\n    def getrc(row, column, key, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix][row][column][key] unless @map[data_matrix].nil?\n    end\n\n    # Retrieve the associations for all parts of the collection\n    # as a matrix.\n    # @requires  current object is a collection\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns  the data matrix, if one exists\n    def get_data_matrix(data_matrix = DATAMATRIX_KEY)\n      Matrix.rows(@map[data_matrix])\n    end\n\n    # Replace or initialize the data matrix for this object\n    # with a custom one.\n    # @requires  the current object is a collection\n    # `matrix` have the same row column dimensions as the collection\n    #\n    # @param new_matrix [Matrix]  the new data matrix\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix (by key) to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n\n    def set_data_matrix(matrix, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix] = matrix.to_a\n    end\n\n    # Saves the associations in this map to Aquarium.\n    def save\n      das = []\n      @map.each_key do |key|\n        if key == DATAMATRIX_KEY\n          das.concat save_data_matrix_alt(@object, @map[key])\n        elsif @map[key].is_a? UploadAssoc\n          # TODO: update this to lazy associate once aq is updated to hav lazy upload assoc (on master, just not on server yet)\n          @object.associate(key, @map[key].tag, @map[key].upload)\n        else\n          das << @object.lazy_associate(key, @map[key])\n        end\n      end\n      DataAssociation.import(das, on_duplicate_key_update: [:object]) unless das.empty?\n      @object.save\n      nil\n    end\n\n    # saves part_data to the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    # built off of set_data_matrix from collection.rb\n    def save_data_matrix_alt(coll, matrix, offset: [0, 0])\n      pm = coll.part_matrix\n      das = []\n\n      uniq_keys = matrix.flatten.map(&:keys).flatten.uniq\n      dms_by_key = {}\n      uniq_keys.each do |key|\n        dms_by_key[key] = coll.data_matrix(key)\n      end\n\n      coll.each_row_col(matrix, offset: offset) do |x, y, ox, oy|\n        next unless !matrix[x][y].nil? && pm[ox][oy] # this part has das\n        matrix[x][y].each do |k, v|\n          if pm[ox][oy]\n            if dms_by_key[k][ox][oy]\n              da = dms_by_key[k][ox][oy]\n              da.object = { k => v }.to_json\n              das << da\n            else\n              das << pm[ox][oy].lazy_associate(k, v)\n            end\n          end\n        end\n      end\n\n      das\n    end\n\n    # Returns an array of all the keys in this map\n    def keys\n      @map.keys\n    end\n\n    # Returns the string representation of the map\n    def to_string\n      @map.to_s\n    end\n\n    alias to_s to_string\n  end\n\n  # private class that is used to deal with associating upload objects alongside their tag\n  class UploadAssoc\n    def initialize(tag, upload)\n      @upload = upload\n      @tag = tag || {}\n    end\n\n    def change_tag(new_tag)\n      @tag = new_tag\n    end\n\n    attr_reader :upload\n\n    attr_reader :tag\n  end\n\n  # Utilizes the part-data matrix of collections to store information about the history of\n  # parts of a collection. PartProvenance initializes and relies on two fields of every part-data\n  # slot: `source` and `destination`.\n  # `source` will store a list of item ids (with rc index if applicable),\n  # of all the ingredients used to make this part, and destination will use the same data format\n  # to record all of the places this part was used in.\n  # Item-Item provenance can technically be recorded as well with this library, but it will not\n  # be necessary.\n  #\n  module PartProvenance\n    SOURCE = \'source\'\n    DESTINATION = \'destination\'\n\n    # Record an entry to the provenance data between two parts, or a part and an item.\n    # This will populate the destination field of `from`, and the source field\n    # of the `to` in their respective associations. If from_coord or to_coord is specified, then\n    # the associations of the part of the from/to collection at that coordinate will\n    # populated instead.\n    #\n    # @param opts [Hash]  Arguments specifying which objects to record relation for\n    # @option from [Item/Collection]  the item or collection where sample transfer originated\n    # @option to [Item/Collection]  the item or collection for destination of sample transfer\n    # @option from_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `to` was a collection\n    # @option to_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `from` was a collection\n    # @option additional_relation_data [Hash]  optionally, add additional key/value pairs to add to both object\'s routing data\n    #                         for this relation. For example, you might want to specify the volume of the transfer,\n    #                         or which colony was picked from a plate\n    # @option from_map [AssociationMap]  existing AssociationMap for the given from-object, required to successfully associate provenance to\n    #                           the `from` item\n    # @option to_map [AssociationMap]  existing AssociationMap for the given to-object, required to successfully associate provenance to\n    #                           the `to` item\n    def add_provenance(opts = {})\n      if opts[:from] == opts[:to] # special case: provenance between two parts on the same collection\n        opts[:from_map] = opts[:to_map] # ensure from map and to map are the same object for this case\n      end\n\n      # creating information hashes to represent `from` and `to` relationship data\n      from_info = serialize_as_simple_tag(opts[:from], opts[:from_coord], opts[:additional_relation_data])\n      to_info = serialize_as_simple_tag(opts[:to], opts[:to_coord], opts[:additional_relation_data])\n\n      # in destination field of `from`, add information tag representing `to`\n      append_to_association(opts[:from_map], DESTINATION, to_info, coord: opts[:from_coord]) if opts[:from_map]\n\n      # in source field of `to`, add information tag representing `from`\n      append_to_association(opts[:to_map], SOURCE, from_info, coord: opts[:to_coord]) if opts[:to_map]\n    end\n\n    # Retrieves a list of sources that were used to construct the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def sources(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, SOURCE, coord: coord)\n      else\n        AssociationMap.get_associated_data(object, SOURCE)\n      end\n    end\n\n    # Retrieves a list of destinations that were made using the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def destinations(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, DESTINATION, coord: opts[:coord])\n      else\n        AssociationMap.get_associated_data(object, DESTINATION)\n      end\n    end\n\n    # For the given associatable target object, appends or concatenates the given datum_to_append to the association\n    # at `key` for that object\n    #\n    # @param association_map [AssocioationMap]  an AssociationMap that will have its associations appended to.\n    # @param key [String/Symbol]  The association key which maps to an appendable object\n    # @param datum_to_append [Serializable Object]  the element to append to the list at the value for the given key\n    # @param opts [Hash]  additional options\n    # @option coord [Tuple array]  coordinate of target part, if association target is a collection\n    def append_to_association(association_map, key, datum_to_append, opts = {})\n      if opts[:coord] # we will be interacting with the associations of a part of a collection if coord is specified\n        association_map.putrc(opts[:coord][0], opts[:coord][1], key, []) if association_map.getrc(opts[:coord][0], opts[:coord][1], key).nil?\n        association_map.getrc(opts[:coord][0], opts[:coord][1], key) <<  datum_to_append\n      else\n        association_map.put(key, []) if association_map.get(key).nil?\n        association_map.get(key) << datum_to_append\n      end\n    end\n\n    # Given an item, or a part of a collection, serializes it into a simple tag which can be used to retrieve it.\n    #\n    # @param item [Item/FieldValue]  can be either an Item, or\n    #                         an i/o object corresponding to a part of a collection, which can be thought of\n    #                         as constituting a \'sub item\'\n    def serialize_as_simple_tag(item, coord, additional_info)\n      info = if item.collection? && coord\n               { id: item.id, row: coord[0], column: coord[1] }\n             elsif (item.is_a? Item) || (item.is_a? Collection)\n               { id: item.id }\n             else\n               raise \'Argument is neither a part nor an item\'\n             end\n      info.merge!(additional_info) unless additional_info.nil?\n      info\n    end\n  end\nend\n',2,'Library','2020-03-11 20:48:32','2020-03-11 20:48:32',1),(53,'source','module PlanParams\n\n  # Gets :options from the plan associations and uses it to override default_plan_params\n  #\n  # @return [Hash] plan_params\n  def update_plan_params(plan_params:, opts:)\n    if opts.present?\n      opts = JSON.parse(opts, { symbolize_names: true })\n      plan_params.update(opts)\n    end\n    plan_params\n  end\n\n  #gets the options on the first operaton of a plan\n  def get_opts(operations)\n    operations.first.plan.associations[:options]\n  end\n\n  #gets the options on a specific operation\n  def get_op_opts(op)\n    op.plan.associations[:options]\n  end\n\n  #sets plan params as a temporary association to the operation under the :plan_params key\n  def set_temporary_op_params(op, default_plan_parameters)\n      opts = get_op_opts(op)\n      op.temporary[:plan_params] = update_plan_params(plan_params: default_plan_params, opts: opts)\n  end\n \nend',4,'Library','2020-03-11 20:48:33','2020-03-11 20:48:33',1),(54,'source','module Units\n    \n    EMPTY = -1\n    \n    # Volume\n    MICROLITERS = \'ul\'\n    MILLILITERS = \'ml\'\n    \n    # Weight\n    NANOGRAMS = \'ng\'\n    MICROGRAMS = \'g\'\n    \n    # Concentration\n    PICOMOLAR = \'pM\'\n    NANOMOLAR = \'nM\'\n    MICROMOLAR = \'M\'\n    MILLIMOLAR = \'mM\'\n    MOLAR = \'M\'\n    \n    # Temperature\n    DEGREES_C = \'C\'\n    \n    # Time\n    MINUTES = \'min\'\n    SECONDS = \'sec\'\n    HOURS =\'hr\'\n    # Force\n    TIMES_G = \'x g\'\n    \n    # R/DNA Length\n    BASEPAIRS = \'bp\'\n    KILOBASEPAIRS = \'kbp\'\n    MEGABASEPAIRS = \'mbp\'\n    GIGABASEPAIRS = \'gbp\'\n    \n    # Voltage\n    VOLTS = \'V\'\n\n    def self.qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def add_qty_display(options)\n        new_items = {}\n        \n        options.each do |key, value|\n            key =~ /^(.+_)+([a-z]+)$/\n            \n            case $2\n            when \'microliters\'\n                units = MICROLITERS\n            when \'milliliters\'\n                units = MILLILITERS\n            when \'minutes\'\n                units = MINUTES\n            else\n                next\n            end\n            \n            qty = value.to_f\n            \n            new_items[\"#{$1}qty\".to_sym] = { qty: qty, units: units }\n        end\n        \n        options.update(new_items)\n    end\n    \n    # Return the unit constant for the the unit name if there is one.\n    #\n    # @param unit_name [String] the name of the unit\n    # @returns the value of the constant with the given name\n    # @raises BadUnitNameError if the name is not the name of a defined unit\n    def self.get_unit(unit_name:)\n        self.const_get(unit_name.upcase)\n      rescue\n        raise BadUnitNameError.new(name: unit_name)\n    end\n    \n    # Exception class for bad unit name arguments to Units::get_unit.\n    #\n    # @attr_reader [String] name  the bad unit name\n    class BadUnitNameError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"Unknown unit name\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n    \n    # Return a key for the measure hash defined on the given object type.\n    #\n    # The measure hash must be defined in the data proerty of the object type as JSON.\n    # For instance\n    #\n    #   { \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }\n    #\n    # The key is constructed as the type name, an underscore, and the unit name.\n    #\n    # @param object_type [ObjectType] the object type\n    # @returns the key for the measure of the the object type if there is one\n    # @raises MissingObjectTypeMeasure if the object type has no measure data_object\n    def self.get_measure_key(object_type:)\n        data_object = object_type.data_object\n        raise MissingObjectTypeMeasureError.new(name: object_type.name) if !data_object.key?(:measure)\n        \n        measure = object_type.data_object[:measure]\n        type_name = measure[:type]\n        unit_name = measure[:unit]\n        \"#{type_name}_#{self.get_unit(unit_name: unit_name)}\"\n    end\n    \n    # Exception class for an object type with out a measure hash definition.\n    #\n    # @attr_reader [String] name  the name of the object type where measure has was expected\n    class MissingObjectTypeMeasureError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"ObjectType has no measure in data object\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n   \nend',5,'Library','2020-03-11 20:48:34','2020-03-11 20:48:34',1),(55,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 20:48:36','2020-03-11 20:48:36',1),(56,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\nend',7,'Library','2020-03-11 20:48:37','2020-03-11 20:48:37',1),(57,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 20:48:40','2020-03-11 20:48:40',1),(58,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:12:01','2020-03-11 21:12:01',1),(59,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n\n    #toss QC plate\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:12:02','2020-03-11 21:12:02',1),(60,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n    end\n    working_plate.each do |fv|\n      inspect fv\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:25:51','2020-03-11 21:25:51',1),(61,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n    end\n    working_plate.each do |fv|\n      inspect fv\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:25:51','2020-03-11 21:25:51',1),(62,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\nend',7,'Library','2020-03-11 21:30:50','2020-03-11 21:30:50',1),(63,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n    end\n    working_plate.each do |fv|\n      show do\n        title \"#{fv}\"\n      end\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:32:20','2020-03-11 21:32:20',1),(64,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-11 21:53:25','2020-03-11 21:53:25',1),(65,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      input_items.each do |item|\n        item.associate(CON_KEY, rand(50..100))\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      arry_sample = working_plate.parts.map{|object| object.sample}\n      arry_sample.each do |sample|\n        input_location_array = working_plate.find(sample)\n  \n        input_location_array.each do |sub_array|\n          sub_array.push(\"yoink\")\n          input_rcx.push(sub_array)\n        end\n\n      end\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:53:26','2020-03-11 21:53:26',1),(66,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      input_items.each do |item|\n        item.associate(CON_KEY, rand(50..100))\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      arry_sample = working_plate.parts.map{|object| object.sample}\n      arry_sample.each do |sample|\n        input_location_array = working_plate.find(sample)\n  \n        input_location_array.each do |sub_array|\n          sub_array.push(\"yoink\")\n          input_rcx.push(sub_array)\n        end\n\n      end\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:53:32','2020-03-11 21:53:32',1),(67,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      input_items.each do |item|\n        item.associate(CON_KEY, rand(50..100))\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      arry_sample = working_plate.parts.map{|object| object.sample}\n      arry_sample.each do |sample|\n        input_location_array = working_plate.find(sample)\n  \n        input_location_array.each do |sub_array|\n          sub_array.push(\"yoink\")\n          input_rcx.push(sub_array)\n        end\n\n      end\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:53:32','2020-03-11 21:53:32',1),(68,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      input_items.each do |item|\n        item.associate(CON_KEY, rand(50..100))\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      arry_sample = working_plate.parts.map{|object| object.sample}\n      arry_sample.each do |sample|\n        input_location_array = working_plate.find(sample)\n  \n        input_location_array.each do |sub_array|\n          sub_array.push(\"yoink\")\n          input_rcx.push(sub_array)\n        end\n\n      end\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:53:32','2020-03-11 21:53:32',1),(69,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      input_items.each do |item|\n        item.associate(CON_KEY, rand(50..100))\n      end\n      arry_sample = working_plate.parts.map{|object| object.sample}\n      arry_sample.each do |sample|\n        input_location_array = working_plate.find(sample)\n  \n        input_location_array.each do |sub_array|\n          sub_array.push(\"yoink\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:55:31','2020-03-11 21:55:31',1),(70,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      input_items.each do |item|\n        item.associate(CON_KEY, rand(50..100))\n      end\n      arry_sample = working_plate.parts.map{|object| object.sample}\n      arry_sample.each do |sample|\n        input_location_array = working_plate.find(sample)\n  \n        input_location_array.each do |sub_array|\n          sub_array.push(\"yoink\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:55:31','2020-03-11 21:55:31',1),(71,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:59:45','2020-03-11 21:59:45',1),(72,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n  end\n\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 21:59:46','2020-03-11 21:59:46',1),(73,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:06:17','2020-03-11 22:06:17',1),(74,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a #{working_plate.name}\"\n\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:08:48','2020-03-11 22:08:48',1),(75,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a #{working_plate.name} and lable ID: #{working_plate.id}\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:09:16','2020-03-11 22:09:16',1),(76,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a #{working_plate.name} and lable ID: #{working_plate.id}\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:09:16','2020-03-11 22:09:16',1),(77,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a #{C_TYPE} and lable ID: #{working_plate.id}\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:10:40','2020-03-11 22:10:40',1),(78,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a #{C_TYPE} and lable ID: #{working_plate.id}\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:10:40','2020-03-11 22:10:40',1),(79,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:11:27','2020-03-11 22:11:27',1),(80,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-11 22:11:27','2020-03-11 22:11:27',1),(81,'protocol','# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n\n    tin  = operations.io_table \'input\'\n    tout = operations.io_table \'output\'\n\n    show do\n      title \'Input Table\'\n      table tin.all.render\n    end\n\n    show do\n      title \'Output Table\'\n      table tout.all.render\n    end\n\n    operations.store\n\n    {}\n\n  end\n\nend\n',3,'OperationType','2020-03-11 22:15:34','2020-03-11 22:15:34',1),(82,'precondition','def precondition(_op)\n  true\nend',3,'OperationType','2020-03-11 22:15:34','2020-03-11 22:15:34',1),(83,'cost_model','def cost(_op)\n  { labor: 0, materials: 0 }\nend',3,'OperationType','2020-03-11 22:15:34','2020-03-11 22:15:34',1),(84,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',3,'OperationType','2020-03-11 22:15:34','2020-03-11 22:15:34',1),(85,'protocol','# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = operations.first.\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:20:59','2020-03-12 22:20:59',1),(86,'protocol','# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = operations.first.\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:20:59','2020-03-12 22:20:59',1),(87,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-12 22:22:51','2020-03-12 22:22:51',1),(88,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    operations.store\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-12 22:26:22','2020-03-12 22:26:22',1),(89,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    #working_plate = operations.first.\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        ouput_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        output_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:26:42','2020-03-12 22:26:42',1),(90,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    #working_plate = operations.first.\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        ouput_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        output_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:26:42','2020-03-12 22:26:42',1),(91,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    #working_plate = operations.first.\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        ouput_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        output_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:26:42','2020-03-12 22:26:42',1),(92,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    #working_plate = operations.first.\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        ouput_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        output_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + 3# op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:28:41','2020-03-12 22:28:41',1),(93,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    #working_plate = operations.first.\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + 3# op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:29:57','2020-03-12 22:29:57',1),(94,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + 3# op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:30:29','2020-03-12 22:30:29',1),(95,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + 3# op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:30:30','2020-03-12 22:30:30',1),(96,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  #end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:31:39','2020-03-12 22:31:39',1),(97,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  #end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:31:39','2020-03-12 22:31:39',1),(98,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:31:51','2020-03-12 22:31:51',1),(99,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:31:51','2020-03-12 22:31:51',1),(100,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"#{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:32:43','2020-03-12 22:32:43',1),(101,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:33:00','2020-03-12 22:33:00',1),(102,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.input_array(INPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:33:59','2020-03-12 22:33:59',1),(103,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.input_array(INPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:33:59','2020-03-12 22:33:59',1),(104,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:37:07','2020-03-12 22:37:07',1),(105,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:37:07','2020-03-12 22:37:07',1),(106,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:38:13','2020-03-12 22:38:13',1),(107,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:38:13','2020-03-12 22:38:13',1),(108,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    operations.each do |op|\n      out_array = op.output_array(OUTPUT_ARRAY)\n      out_array.each do |fv|\n        out_array.set(collection: working_plate)\n      end\n    end\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:44:57','2020-03-12 22:44:57',1),(109,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    operations.each do |op|\n      out_array = op.output_array(OUTPUT_ARRAY)\n      out_array.each do |fv|\n        out_array.set(collection: working_plate)\n      end\n    end\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:44:58','2020-03-12 22:44:58',1),(110,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    operations.each do |op|\n      out_array = op.output_array(OUTPUT_ARRAY)\n      out_array.each do |fv|\n        out_array.set(collection: working_plate)\n      end\n    end\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:44:58','2020-03-12 22:44:58',1),(111,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    operations.each do |op|\n      out_array = op.output_array(OUTPUT_ARRAY)\n      out_array.each do |fv|\n        fv.set(collection: working_plate)\n      end\n    end\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:45:27','2020-03-12 22:45:27',1),(112,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    operations.each do |op|\n      out_array = op.output_array(OUTPUT_ARRAY)\n      out_array.each do |fv|\n        fv.set(collection: working_plate)\n      end\n    end\n\n    operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:45:27','2020-03-12 22:45:27',1),(113,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n    operations.each do |op|\n      out_array = op.output_array(OUTPUT_ARRAY)\n      out_array.each do |fv|\n        fv.set(collection: working_plate)\n      end\n    end\n\n    #operations.make\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n    #show do\n    #  title \"Get and Lable Working Plate\"\n    #  note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    #end\n    \n    #go get stock plates with wanted samples\n    #operations.retrieve\n\n\n   # operations.each do |op|\n   #   input_fv_array = op.input_array(INPUT_ARRAY)\n#\n#      #batch them together (assign samples to wells in working plate)\n#      add_fv_array_samples_to_collection(input_fv_array, working_plate)#\n\n      #Instructions for transferring from stock to working plate\n    #  transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    #end\n\n\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:45:41','2020-03-12 22:45:41',1),(114,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n  def make_output_plate(output_fv_array, working_plate)\n      out_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:55:12','2020-03-12 22:55:12',1),(115,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n  def make_output_plate(output_fv_array, working_plate)\n      out_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:55:12','2020-03-12 22:55:12',1),(116,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n  def make_output_plate(output_fv_array, working_plate)\n      out_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:55:50','2020-03-12 22:55:50',1),(117,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n  def make_output_plate(output_fv_array, working_plate)\n      out_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:55:50','2020-03-12 22:55:50',1),(118,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:56:19','2020-03-12 22:56:19',1),(119,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 22:56:19','2020-03-12 22:56:19',1),(120,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-12 23:05:26','2020-03-12 23:05:26',1),(121,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 23:05:31','2020-03-12 23:05:31',1),(122,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    show do\n      title \"All of the collections\"\n      operations.each do |op|\n        out_array = op.output_array(OUTPUT_ARRAY)\n        note \"op id: #{op.id}\"\n        out_array.each do |fv|\n          note \"#{fv.collection}\"\n        end\n      end\n    end\n\n\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-12 23:05:32','2020-03-12 23:05:32',1),(123,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:36:27','2020-03-13 15:36:27',1),(124,'source','module SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 15:36:32','2020-03-13 15:36:32',1),(125,'source','module CollectionTransfer\n\n\n      #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\nend\nend',6,'Library','2020-03-13 15:36:33','2020-03-13 15:36:33',1),(126,'source','module CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-13 15:36:34','2020-03-13 15:36:34',1),(127,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(only: \"input\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:37:42','2020-03-13 15:37:42',1),(128,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(io: \"input\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:38:55','2020-03-13 15:38:55',1),(129,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(io: \"input\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:38:57','2020-03-13 15:38:57',1),(130,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(io: \"input\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:38:58','2020-03-13 15:38:58',1),(131,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(options = {io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:39:57','2020-03-13 15:39:57',1),(132,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(options = {io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:39:57','2020-03-13 15:39:57',1),(133,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(io: \"inputs\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:40:39','2020-03-13 15:40:39',1),(134,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(io: \"inputs\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:40:39','2020-03-13 15:40:39',1),(135,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(io: \"inputs\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:41:24','2020-03-13 15:41:24',1),(136,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(io: \"inputs\")\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:41:25','2020-03-13 15:41:25',1),(137,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(options = {io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:42:01','2020-03-13 15:42:01',1),(138,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(options = {io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:42:01','2020-03-13 15:42:01',1),(139,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(options = {io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:42:02','2020-03-13 15:42:02',1),(140,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(opts = {interactive: true, io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:43:18','2020-03-13 15:43:18',1),(141,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(opts = {interactive: true, io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:43:19','2020-03-13 15:43:19',1),(142,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(opts = {interactive: true, io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:43:19','2020-03-13 15:43:19',1),(143,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    operations.store(opts = {interactive: true, io: \"inputs\"})\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 15:43:19','2020-03-13 15:43:19',1),(144,'source','# Library code here',8,'Library','2020-03-13 15:46:28','2020-03-13 15:46:28',1),(145,'source','module CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 16:59:16','2020-03-13 16:59:16',1),(146,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 17:01:53','2020-03-13 17:01:53',1),(147,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-13 17:03:53','2020-03-13 17:03:53',1),(148,'source','module CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 17:04:15','2020-03-13 17:04:15',1),(149,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 17:06:29','2020-03-13 17:06:29',1),(150,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 17:38:55','2020-03-13 17:38:55',1),(151,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 17:41:51','2020-03-13 17:41:51',1),(152,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 17:41:51','2020-03-13 17:41:51',1),(153,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 17:41:51','2020-03-13 17:41:51',1),(154,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:03:53','2020-03-13 18:03:53',1),(155,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:03:54','2020-03-13 18:03:54',1),(156,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:03:54','2020-03-13 18:03:54',1),(157,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:04:35','2020-03-13 18:04:35',1),(158,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:04:35','2020-03-13 18:04:35',1),(159,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:04:35','2020-03-13 18:04:35',1),(160,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:07:23','2020-03-13 18:07:23',1),(161,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:07:23','2020-03-13 18:07:23',1),(162,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:07:24','2020-03-13 18:07:24',1),(163,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n    tab.push[\'lol\', \'this\', \'wont_work\']\n    show do\n      title \"yoyo\"\n      table tab\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:10:08','2020-03-13 18:10:08',1),(164,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n    tab.push[\'lol\', \'this\', \'wont_work\']\n    show do\n      title \"yoyo\"\n      table tab\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:10:09','2020-03-13 18:10:09',1),(165,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n    tab.push[\'lol\', \'this\', \'wont_work\']\n    show do\n      title \"yoyo\"\n      table tab\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:10:09','2020-03-13 18:10:09',1),(166,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:10:12','2020-03-13 18:10:12',1),(167,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 18:10:12','2020-03-13 18:10:12',1),(168,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 18:10:13','2020-03-13 18:10:13',1),(169,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-13 18:10:13','2020-03-13 18:10:13',1),(170,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n              table.all.render\n           end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:10:20','2020-03-13 18:10:20',1),(171,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 18:10:21','2020-03-13 18:10:21',1),(172,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 18:10:22','2020-03-13 18:10:22',1),(173,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-13 18:10:23','2020-03-13 18:10:23',1),(174,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n    tab.push([\'lol\', \'this\', \'wont_work\'])\n    show do\n      title \"yoyo\"\n      table tab\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:11:48','2020-03-13 18:11:48',1),(175,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n    tab.push([\'lol\', \'this\', \'wont_work\'])\n    show do\n      title \"yoyo\"\n      table tab\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:11:49','2020-03-13 18:11:49',1),(176,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n    tab.push([\'lol\', \'this\', \'wont_work\'])\n    show do\n      title \"yoyo\"\n      table tab\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:11:49','2020-03-13 18:11:49',1),(177,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:13:36','2020-03-13 18:13:36',1),(178,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:13:36','2020-03-13 18:13:36',1),(179,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:13:36','2020-03-13 18:13:36',1),(180,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:13:40','2020-03-13 18:13:40',1),(181,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:13:40','2020-03-13 18:13:40',1),(182,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:13:41','2020-03-13 18:13:41',1),(183,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:13:41','2020-03-13 18:13:41',1),(184,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    #store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:15:48','2020-03-13 18:15:48',1),(185,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    #store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:15:48','2020-03-13 18:15:48',1),(186,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:16:42','2020-03-13 18:16:42',1),(187,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:16:42','2020-03-13 18:16:42',1),(188,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:16:43','2020-03-13 18:16:43',1),(189,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:16:59','2020-03-13 18:16:59',1),(190,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:17:28','2020-03-13 18:17:28',1),(191,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:17:28','2020-03-13 18:17:28',1),(192,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:18:48','2020-03-13 18:18:48',1),(193,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-13 18:18:49','2020-03-13 18:18:49',1),(194,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 18:18:49','2020-03-13 18:18:49',1),(195,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 18:18:50','2020-03-13 18:18:50',1),(196,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:18:51','2020-03-13 18:18:51',1),(197,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\nend',8,'Library','2020-03-13 18:19:28','2020-03-13 18:19:28',1),(198,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:21:37','2020-03-13 18:21:37',1),(199,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:21:37','2020-03-13 18:21:37',1),(200,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate.item)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:22:16','2020-03-13 18:22:16',1),(201,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate.item)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:22:16','2020-03-13 18:22:16',1),(202,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate.item)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:23:25','2020-03-13 18:23:25',1),(203,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate.item)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:23:25','2020-03-13 18:23:25',1),(204,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:23:37','2020-03-13 18:23:37',1),(205,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:23:38','2020-03-13 18:23:38',1),(206,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:23:38','2020-03-13 18:23:38',1),(207,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(item_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        collection_array.each do |collection|\n            tab.push[collection.id, collection.name, collection.location]\n        end\n        show do\n            title \"yeet\"\n            table tab\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:23:39','2020-03-13 18:23:39',1),(208,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 18:23:39','2020-03-13 18:23:39',1),(209,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 18:23:40','2020-03-13 18:23:40',1),(210,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-13 18:23:40','2020-03-13 18:23:40',1),(211,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:24:46','2020-03-13 18:24:46',1),(212,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:24:46','2020-03-13 18:24:46',1),(213,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:24:46','2020-03-13 18:24:46',1),(214,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push[obj.id, obj.name, obj.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:24:48','2020-03-13 18:24:48',1),(215,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        tab = [[\'Stripwell\', \'well\', \'Input Item\']]\n        tab.push([\'lol\', \'this\', \'wont_work\'])\n        show do\n          title \"yoyo\"\n          table tab\n        end\n        #show do \n        #   title \"Put Away the Following Items\"\n        #   operations.each do |op|\n        #      array_of_input_fv = op.inputs\n        #      table store_fv_collections(array_of_input_fv)\n        #      table [[\'ID\', \'Collection Type\', \'Location\']]\n        #     table.all.render\n        #  end\n        #end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push[obj.id, obj.name, obj.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:24:48','2020-03-13 18:24:48',1),(216,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:25:08','2020-03-13 18:25:08',1),(217,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    #validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_items(working_plate)\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    working_plate.move(\"Freezer\")\n\n    operations.store\n\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:25:08','2020-03-13 18:25:08',1),(218,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push[obj.id, obj.name, obj.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:25:29','2020-03-13 18:25:29',1),(219,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push[obj.id, obj.name, obj.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:25:30','2020-03-13 18:25:30',1),(220,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push[obj.id, obj.object_type.name, obj.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:26:44','2020-03-13 18:26:44',1),(221,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push[obj.id, obj.object_type.name, obj.location]\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:26:44','2020-03-13 18:26:44',1),(222,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:27:17','2020-03-13 18:27:17',1),(223,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:27:17','2020-03-13 18:27:17',1),(224,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:28:26','2020-03-13 18:28:26',1),(225,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table store_fv_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:28:26','2020-03-13 18:28:26',1),(226,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:29:14','2020-03-13 18:29:14',1),(227,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n              table [[\'ID\', \'Collection Type\', \'Location\']]\n             table.all.render\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:29:14','2020-03-13 18:29:14',1),(228,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:29:54','2020-03-13 18:29:54',1),(229,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:29:54','2020-03-13 18:29:54',1),(230,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    def store_input_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections(array_of_input_fv)\n           end\n        end\n    end\n    \n    #Goes through array of fv and stores all collections\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections(array_of_fv)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        return get_item_locations(collection_array)\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @item Item or Array[Item] all items that need to be stored\n    def store_items(items)\n        show do\n            title \"Put Away the Following Items\"\n            if items.class == Item || items.class == Collection\n                table get_item_locations([items])\n            elsif items.class == Array\n                table get_item_location(items)\n            else\n               raise \"Items are neither an Array nor an Item.  Check class type.\" \n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:29:54','2020-03-13 18:29:54',1),(231,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections_locations(array_of_fv, location = nil)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        set_locations(collection_array, location) if location != nil\n        return get_item_locations(collection_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item])\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item)\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:46:03','2020-03-13 18:46:03',1),(232,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections_locations(array_of_fv, location = nil)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        set_locations(collection_array, location) if location != nil\n        return get_item_locations(collection_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item])\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item)\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:46:03','2020-03-13 18:46:03',1),(233,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections_locations(array_of_fv, location = nil)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        set_locations(collection_array, location) if location != nil\n        return get_item_locations(collection_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item])\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item)\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:46:54','2020-03-13 18:46:54',1),(234,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 18:46:55','2020-03-13 18:46:55',1),(235,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 18:46:56','2020-03-13 18:46:56',1),(236,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n    def highlight_alpha_non_empty collection, &rc_block\n        highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n    end\n      \nend',3,'Library','2020-03-13 18:46:57','2020-03-13 18:46:57',1),(237,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections_locations(array_of_fv, location = nil)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        set_locations(collection_array, location) if location != nil\n        return get_item_locations(collection_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:48:35','2020-03-13 18:48:35',1),(238,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections_locations(array_of_fv, location = nil)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        set_locations(collection_array, location) if location != nil\n        return get_item_locations(collection_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:48:35','2020-03-13 18:48:35',1),(239,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs\n              table table_of_collections_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_collections_locations(array_of_fv, location = nil)\n        collection_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                collection_array.push fv.collection\n            end\n        end\n        collection_array = collection_array.uniq\n        set_locations(collection_array, location) if location != nil\n        return get_item_locations(collection_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:48:36','2020-03-13 18:48:36',1),(240,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    inspect \"Should not have stored working plate yet\"\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:50:55','2020-03-13 18:50:55',1),(241,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    inspect \"Should not have stored working plate yet\"\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:50:55','2020-03-13 18:50:55',1),(242,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    inspect \"Should not have stored working plate yet\"\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:50:55','2020-03-13 18:50:55',1),(243,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    inspect \"Should not have stored working plate yet\"\n    \n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:51:13','2020-03-13 18:51:13',1),(244,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    inspect \"Should not have stored working plate yet\"\n    \n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:51:13','2020-03-13 18:51:13',1),(245,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    inspect \"Should not have stored working plate yet\"\n    \n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:52:07','2020-03-13 18:52:07',1),(246,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    inspect \"Should not have stored working plate yet\"\n    \n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 18:57:58','2020-03-13 18:57:58',1),(247,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:00','2020-03-13 18:58:00',1),(248,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:00','2020-03-13 18:58:00',1),(249,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:00','2020-03-13 18:58:00',1),(250,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:47','2020-03-13 18:58:47',1),(251,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:47','2020-03-13 18:58:47',1),(252,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:56','2020-03-13 18:58:56',1),(253,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:56','2020-03-13 18:58:56',1),(254,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:56','2020-03-13 18:58:56',1),(255,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject[|fv| fv.collection == nil]\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:58:57','2020-03-13 18:58:57',1),(256,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:59:13','2020-03-13 18:59:13',1),(257,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elseif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:59:13','2020-03-13 18:59:13',1),(258,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:59:36','2020-03-13 18:59:36',1),(259,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 18:59:36','2020-03-13 18:59:36',1),(260,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:02:21','2020-03-13 19:02:21',1),(261,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:02:21','2020-03-13 19:02:21',1),(262,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs.push(op.input_array(INPUT_ARRAY).map!{|fv| fv.sample})\n      total_outputs = total_outputs.push(op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample})\n    end\n    total_inputs.each do |sample|\n      inspect sample.class\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:10:25','2020-03-13 19:10:25',1),(263,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs.push(op.input_array(INPUT_ARRAY).map!{|fv| fv.sample})\n      total_outputs = total_outputs.push(op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample})\n    end\n    total_inputs.each do |sample|\n      inspect sample.class\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:10:25','2020-03-13 19:10:25',1),(264,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs.push(op.input_array(INPUT_ARRAY).map!{|fv| fv.sample})\n      total_outputs = total_outputs.push(op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample})\n    end\n    total_inputs.each do |sample|\n      show do \n        title \"#{sample.class}\"\n      end\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:11:27','2020-03-13 19:11:27',1),(265,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs.push(op.input_array(INPUT_ARRAY).map!{|fv| fv.sample})\n      total_outputs = total_outputs.push(op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample})\n    end\n    total_inputs.each do |sample|\n      show do \n        title \"#{sample.class}\"\n      end\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:11:27','2020-03-13 19:11:27',1),(266,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs.push(op.input_array(INPUT_ARRAY).map!{|fv| fv.sample})\n      total_outputs = total_outputs.push(op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample})\n    end\n    total_inputs.each do |sample|\n      show do \n        title \"#{sample.class}\"\n      end\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:11:27','2020-03-13 19:11:27',1),(267,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    total_inputs.each do |sample|\n      show do \n        title \"#{sample.class}\"\n      end\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:12:56','2020-03-13 19:12:56',1),(268,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    total_inputs.each do |sample|\n      show do \n        title \"#{sample.class}\"\n      end\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:12:56','2020-03-13 19:12:56',1),(269,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    total_inputs.each do |sample|\n      show do \n        title \"#{sample.class}\"\n      end\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:12:57','2020-03-13 19:12:57',1),(270,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    show do\n      title \"#{a}\"\n      note \"#{a.class}\"\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:17:28','2020-03-13 19:17:28',1),(271,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    show do\n      title \"#{a}\"\n      note \"#{a.class}\"\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:17:28','2020-03-13 19:17:28',1),(272,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    show do\n      title \"#{a}\"\n      note \"#{a.class}\"\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:17:29','2020-03-13 19:17:29',1),(273,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample.id}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample.id}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |id| total_inputs.count(id) > 1}\n    show do\n      title \"#{a}\"\n      note \"#{a.class}\"\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:18:41','2020-03-13 19:18:41',1),(274,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample.id}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample.id}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |id| total_inputs.count(id) > 1}\n    show do\n      title \"#{a}\"\n      note \"#{a.class}\"\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:18:41','2020-03-13 19:18:41',1),(275,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample.id}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample.id}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |id| total_inputs.count(id) > 1}\n    show do\n      title \"#{a}\"\n      note \"#{a.class}\"\n    end\n\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:18:41','2020-03-13 19:18:41',1),(276,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:21:57','2020-03-13 19:21:57',1),(277,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:21:57','2020-03-13 19:21:57',1),(278,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:23:06','2020-03-13 19:23:06',1),(279,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\n\n\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\nend\n',3,'OperationType','2020-03-13 19:23:06','2020-03-13 19:23:06',1),(280,'source','# Library code here',9,'Library','2020-03-13 19:24:54','2020-03-13 19:24:54',1),(281,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nmoduel WorkflowValidation\n      #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\nend',9,'Library','2020-03-13 19:26:19','2020-03-13 19:26:19',1),(282,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nmoduel WorkflowValidation\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\nend',9,'Library','2020-03-13 19:28:53','2020-03-13 19:28:53',1),(283,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:29:55','2020-03-13 19:29:55',1),(284,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:29:56','2020-03-13 19:29:56',1),(285,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:29:56','2020-03-13 19:29:56',1),(286,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:32:31','2020-03-13 19:32:31',1),(287,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:32:31','2020-03-13 19:32:31',1),(288,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:32:32','2020-03-13 19:32:32',1),(289,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:34:13','2020-03-13 19:34:13',1),(290,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:34:13','2020-03-13 19:34:13',1),(291,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:34:14','2020-03-13 19:34:14',1),(292,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:34:16','2020-03-13 19:34:16',1),(293,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:34:16','2020-03-13 19:34:16',1),(294,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nmoduel WorkflowValidation\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n    #niq_inputs = total_inputs.uniq\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:36:06','2020-03-13 19:36:06',1),(295,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:36:22','2020-03-13 19:36:22',1),(296,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:36:23','2020-03-13 19:36:23',1),(297,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:36:24','2020-03-13 19:36:24',1),(298,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:36:24','2020-03-13 19:36:24',1),(299,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n  def highlight_alpha_non_empty collection, &rc_block\n    highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n  end\n      \nend',3,'Library','2020-03-13 19:37:31','2020-03-13 19:37:31',1),(300,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nmodule WorkflowValidation\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:38:00','2020-03-13 19:38:00',1),(301,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nmodule WorkflowValidation\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:38:00','2020-03-13 19:38:00',1),(302,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nmodule WorkflowValidation\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:38:00','2020-03-13 19:38:00',1),(303,'source','module CommonInputOutputNames\n\n    INPUT_YEAST = \'Yeast Culture\'\n    OUTPUT_YEAST = \'Yeast Culture\'\n    MEDIA = \'Media\'\n    DNA = \'DNA\'\n    \n    INPUT_SAMPLE = \'Input Sample\'\n    OUTPUT_SAMPLE = \'Output Sample\'\n\n    FORWARD_PRIMER = \'Forward Primer\'\n    REVERSE_PRIMER = \'Reverse Primer\'\n    TEMPLATE = \'Template\'\n    FRAGMENT = \'Fragment\'\n    PROGRAM = \'Program\'\n    PRIMER_PLATE = \'96-Well Primer Aliquot Plate\'\n\nend',10,'Library','2020-03-13 19:39:53','2020-03-13 19:39:53',1),(304,'source','module CommonInputOutputNames\n\n    INPUT_YEAST = \'Yeast Culture\'\n    OUTPUT_YEAST = \'Yeast Culture\'\n    MEDIA = \'Media\'\n    DNA = \'DNA\'\n    \n    INPUT_SAMPLE = \'Input Sample\'\n    OUTPUT_SAMPLE = \'Output Sample\'\n\n    INPUT_ARRAY = \"Input Array\"\n    OUTPUT_ARRAY = \"Output Array\"\n\n    FORWARD_PRIMER = \'Forward Primer\'\n    REVERSE_PRIMER = \'Reverse Primer\'\n    TEMPLATE = \'Template\'\n    FRAGMENT = \'Fragment\'\n    PROGRAM = \'Program\'\n    PRIMER_PLATE = \'96-Well Primer Aliquot Plate\'\n\nend',10,'Library','2020-03-13 19:41:05','2020-03-13 19:41:05',1),(305,'source','module CommonInputOutputNames\n\n    INPUT_YEAST = \'Yeast Culture\'\n    OUTPUT_YEAST = \'Yeast Culture\'\n    MEDIA = \'Media\'\n    DNA = \'DNA\'\n    \n    INPUT_SAMPLE = \'Input Sample\'\n    OUTPUT_SAMPLE = \'Output Sample\'\n\n    INPUT_ARRAY = \"Input Array\"\n    OUTPUT_ARRAY = \"Output Array\"\n\n    FORWARD_PRIMER = \'Forward Primer\'\n    REVERSE_PRIMER = \'Reverse Primer\'\n    TEMPLATE = \'Template\'\n    FRAGMENT = \'Fragment\'\n    PROGRAM = \'Program\'\n    PRIMER_PLATE = \'96-Well Primer Aliquot Plate\'\n\nend',10,'Library','2020-03-13 19:41:05','2020-03-13 19:41:05',1),(306,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:42:05','2020-03-13 19:42:05',1),(307,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\n\n\n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  #TODO Check that the same sample is not being run twice in the same job\n  def validate_inputs\n    total_inputs = 0\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).length\n    end\n    inspect total_inputs if debug\n    raise \"Too many samples for this job.  \n    Please re-lauch job with fewer samples\" if total_inputs > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs <= 0\n  end\nend\n',2,'OperationType','2020-03-13 19:42:06','2020-03-13 19:42:06',1),(308,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:42:29','2020-03-13 19:42:29',1),(309,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:42:29','2020-03-13 19:42:29',1),(310,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:42:29','2020-03-13 19:42:29',1),(311,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 19:43:03','2020-03-13 19:43:03',1),(312,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:43:04','2020-03-13 19:43:04',1),(313,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAXINPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:46:32','2020-03-13 19:46:32',1),(314,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAXINPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:46:32','2020-03-13 19:46:32',1),(315,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAXINPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  def validate_inputs(operations)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output Samples do not match\" if total_inputs.length != total_outputs.length\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:46:32','2020-03-13 19:46:32',1),(316,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:46:38','2020-03-13 19:46:38',1),(317,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:46:38','2020-03-13 19:46:38',1),(318,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 19:46:39','2020-03-13 19:46:39',1),(319,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 19:46:39','2020-03-13 19:46:39',1),(320,'source','module Units\n    \n    EMPTY = -1\n    \n    # Volume\n    MICROLITERS = \'ul\'\n    MILLILITERS = \'ml\'\n    \n    # Weight\n    NANOGRAMS = \'ng\'\n    MICROGRAMS = \'g\'\n    \n    # Concentration\n    PICOMOLAR = \'pM\'\n    NANOMOLAR = \'nM\'\n    MICROMOLAR = \'M\'\n    MILLIMOLAR = \'mM\'\n    MOLAR = \'M\'\n    \n    # Temperature\n    DEGREES_C = \'C\'\n    \n    # Time\n    MINUTES = \'min\'\n    SECONDS = \'sec\'\n    HOURS =\'hr\'\n    # Force\n    TIMES_G = \'x g\'\n    \n    # R/DNA Length\n    BASEPAIRS = \'bp\'\n    KILOBASEPAIRS = \'kbp\'\n    MEGABASEPAIRS = \'mbp\'\n    GIGABASEPAIRS = \'gbp\'\n    \n    # Voltage\n    VOLTS = \'V\'\n\n    def self.qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def add_qty_display(options)\n        new_items = {}\n        \n        options.each do |key, value|\n            key =~ /^(.+_)+([a-z]+)$/\n            \n            case $2\n            when \'microliters\'\n                units = MICROLITERS\n            when \'milliliters\'\n                units = MILLILITERS\n            when \'minutes\'\n                units = MINUTES\n            else\n                next\n            end\n            \n            qty = value.to_f\n            \n            new_items[\"#{$1}qty\".to_sym] = { qty: qty, units: units }\n        end\n        \n        options.update(new_items)\n    end\n    \n    # Return the unit constant for the the unit name if there is one.\n    #\n    # @param unit_name [String] the name of the unit\n    # @returns the value of the constant with the given name\n    # @raises BadUnitNameError if the name is not the name of a defined unit\n    def self.get_unit(unit_name:)\n        self.const_get(unit_name.upcase)\n      rescue\n        raise BadUnitNameError.new(name: unit_name)\n    end\n    \n    # Exception class for bad unit name arguments to Units::get_unit.\n    #\n    # @attr_reader [String] name  the bad unit name\n    class BadUnitNameError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"Unknown unit name\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n    \n    # Return a key for the measure hash defined on the given object type.\n    #\n    # The measure hash must be defined in the data proerty of the object type as JSON.\n    # For instance\n    #\n    #   { \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }\n    #\n    # The key is constructed as the type name, an underscore, and the unit name.\n    #\n    # @param object_type [ObjectType] the object type\n    # @returns the key for the measure of the the object type if there is one\n    # @raises MissingObjectTypeMeasure if the object type has no measure data_object\n    def self.get_measure_key(object_type:)\n        data_object = object_type.data_object\n        raise MissingObjectTypeMeasureError.new(name: object_type.name) if !data_object.key?(:measure)\n        \n        measure = object_type.data_object[:measure]\n        type_name = measure[:type]\n        unit_name = measure[:unit]\n        \"#{type_name}_#{self.get_unit(unit_name: unit_name)}\"\n    end\n    \n    # Exception class for an object type with out a measure hash definition.\n    #\n    # @attr_reader [String] name  the name of the object type where measure has was expected\n    class MissingObjectTypeMeasureError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"ObjectType has no measure in data object\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n   \nend',5,'Library','2020-03-13 19:46:41','2020-03-13 19:46:41',1),(321,'source','module CommonInputOutputNames\n\n    INPUT_YEAST = \'Yeast Culture\'\n    OUTPUT_YEAST = \'Yeast Culture\'\n    MEDIA = \'Media\'\n    DNA = \'DNA\'\n    \n    INPUT_SAMPLE = \'Input Sample\'\n    OUTPUT_SAMPLE = \'Output Sample\'\n\n    INPUT_ARRAY = \"Input Array\"\n    OUTPUT_ARRAY = \"Output Array\"\n\n    FORWARD_PRIMER = \'Forward Primer\'\n    REVERSE_PRIMER = \'Reverse Primer\'\n    TEMPLATE = \'Template\'\n    FRAGMENT = \'Fragment\'\n    PROGRAM = \'Program\'\n    PRIMER_PLATE = \'96-Well Primer Aliquot Plate\'\n\nend',10,'Library','2020-03-13 19:46:42','2020-03-13 19:46:42',1),(322,'source','module PlanParams\n\n  # Gets :options from the plan associations and uses it to override default_plan_params\n  #\n  # @return [Hash] plan_params\n  def update_plan_params(plan_params:, opts:)\n    if opts.present?\n      opts = JSON.parse(opts, { symbolize_names: true })\n      plan_params.update(opts)\n    end\n    plan_params\n  end\n\n  #gets the options on the first operaton of a plan\n  def get_opts(operations)\n    operations.first.plan.associations[:options]\n  end\n\n  #gets the options on a specific operation\n  def get_op_opts(op)\n    op.plan.associations[:options]\n  end\n\n  #sets plan params as a temporary association to the operation under the :plan_params key\n  def set_temporary_op_params(op, default_plan_parameters)\n      opts = get_op_opts(op)\n      op.temporary[:plan_params] = update_plan_params(plan_params: default_plan_params, opts: opts)\n  end\n \nend',4,'Library','2020-03-13 19:46:42','2020-03-13 19:46:42',1),(323,'source','# frozen_string_literal: true\n\n# Module with methods and classes that seek to help with associating data\n# to, and retrieving data from, items, operations, plans, collections, and parts.\n#\nmodule AssociationManagement\n  require \'matrix\'\n\n  # Associates a key and value to the associations hash of the given object.\n  # Replaces an existing association for the given key.\n  #\n  # A part may be represented as a part item, or a collection and coordinate.\n  #\n  # @param object [DataAssociator]  the object to associate data\n  # @param key [String]  the key for the association\n  # @param data [serializable object]  the data for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [Array]  row, column pair if the object is a collection\n  # @option data_matrix [String]  optional data matrix for a collection\n  def associate_data(object, key, data, opts = {})\n    AssociationMap.associate_data(object, key, data, opts)\n  end\n\n  # Returns the associated value from the associations hash of a given object.\n  # If an association doesn\'t exist for the key, returns nil.\n  #\n  # @param object [DataAssociator]  the object to associated data\n  # @param key [String]  the key for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [tuple Array]  row, column of part if object is a collection.\n  # @option data_matrix [String]  optional data matrix\n  # @return [serializable object]  the value associated with the given key\n  def get_associated_data(object, key, opts = {})\n    AssociationMap.get_associated_data(object, key, opts)\n  end\n\n  # Defines a map to manage the associations for an {Item}, {Operation}, or\n  # {Plan} object, which are Aquarium classes that extend {DataAssociator}.\n  #\n  # Note: if `map` contains associations, it is necessary to call `map.save` for\n  #       the associations to be saved to Aquarium.\n  #\n  class AssociationMap\n    DATAMATRIX_KEY = \'part_data\'\n\n    # Initializes an {AssociationMap} for the given item, operation, or plan.\n    #\n    # @param object [DataAssociator]  the object to which to associated data\n    def initialize(object)\n      @object = object\n      @map = {}\n\n      @object.associations.each do |datum|\n        @map[datum[0]] =\n          if @object.upload(datum[0]).nil?\n            datum[1]\n          else\n            UploadAssoc.new(datum[1], @object.upload(datum[0]))\n          end\n      end\n\n      if object.is_a? Collection\n        initialize_part_data\n        data_matrix_all(@object, @map[DATAMATRIX_KEY])\n      end\n    end\n\n    # Retrieves part_data from the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    def data_matrix_all(coll, data_matrix)\n      pas = coll.part_associations\n      part_ids = pas.collect(&:part_id)\n      das = DataAssociation.where(parent_class: \'Item\', parent_id: part_ids)\n      pas.each do |pa|\n        data_matrix[pa.row][pa.column] = {}\n        das.select { |da| da.parent_id == pa.part_id }.each do |da|\n          data_matrix[pa.row][pa.column][da.key] = da.value\n        end\n      end\n      data_matrix\n    end\n\n    # All in one static method which associates a key and value\n    # to the associations hash of a given object. If an association already\n    # exists at the given key, it will be replaced. Can associate to parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated. Can be an io field value\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when associating to a part of a collection, use a\n    #                         data matrix besides the default one\n    def self.associate_data(object, key, data, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot associate to a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        assoc_map.putrc(object.row, object.column, key, data)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        assoc_map.putrc(opts[:coord][0], opts[:coord][1], key, data)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        assoc_map.put(key, data)\n      end\n      assoc_map.save\n    end\n\n    # All in one static method which gets an associated value\n    # from the associations hash of a given object. If an association doesn\'t\n    # exist at the given key, returns nil. Can get associations from parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated, can be an io field value\n    # @param key [String]  the key for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when retrieving association from a part of a collection,\n    #                         use a matrix besides the default one\n    # @return [serializable object]  the data stored in the associations of the given object at the given key\n    def self.get_associated_data(object, key, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot get data from a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        return assoc_map.getrc(object.row, object.column, key)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.getrc(opts[:coord][0], opts[:coord][1], key)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.get(key)\n      end\n    end\n\n    # Adds an association for the data with the key.\n    # The data must be serializable.\n    #\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  Additional Options\n    # @option tag  [String]  If putting an Upload, optionally specify an extra label\n    def put(key, data, opts = { tag: {} })\n      @map[key] = if data.is_a?(Upload)\n                    UploadAssoc.new(opts[:tag], data)\n                  else\n                    data\n                  end\n    end\n\n    # Adds an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # If the data_matrix for the collection has not been created yet, it is initialized\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def putrc(row, column, key, data, data_matrix = DATAMATRIX_KEY)\n      # if the data_matrix for this collection does not exist yet, initialize it.\n      initialize_part_data(data_matrix)\n      @map[data_matrix][row][column][key] = data\n    end\n\n    # To be called when the object of association is a collection,\n    # establishes a matrix parallel to the sample matrix which can\n    # be used to store additional information about individual parts\n    # Each slot in the matrix will be a new empty hash.\n    #\n    # @param coll [Collection]  the object for which part-data matrix will be initialized\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def initialize_part_data(data_matrix = DATAMATRIX_KEY)\n      raise \"Invalid Method Call: cannot associate part data to an object that isn\'t a collection\" unless @object.is_a?(Collection)\n      # TODO: fix the following so that can use the Base method\n      # coll = collection_from(@object.id)\n      coll = Collection.find(@object.id)\n      @map[data_matrix] = Array.new(coll.dimensions[0]) { Array.new(coll.dimensions[1]) { {} } } if @map[data_matrix].nil?\n    end\n\n    # Returns the associated data for the key, if any.\n    #\n    # @param key [String]  the key for the association\n    # @returns the data object for the key, `nil` otherwise\n    def get(key)\n      data = @map[key]\n      if data.is_a?(UploadAssoc)\n        data.upload\n      else\n        data\n      end\n    end\n\n    # Gets an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # Returns the associated data for the key, if any.\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns the data object for the key, `nil` otherwise\n    def getrc(row, column, key, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix][row][column][key] unless @map[data_matrix].nil?\n    end\n\n    # Retrieve the associations for all parts of the collection\n    # as a matrix.\n    # @requires  current object is a collection\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns  the data matrix, if one exists\n    def get_data_matrix(data_matrix = DATAMATRIX_KEY)\n      Matrix.rows(@map[data_matrix])\n    end\n\n    # Replace or initialize the data matrix for this object\n    # with a custom one.\n    # @requires  the current object is a collection\n    # `matrix` have the same row column dimensions as the collection\n    #\n    # @param new_matrix [Matrix]  the new data matrix\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix (by key) to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n\n    def set_data_matrix(matrix, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix] = matrix.to_a\n    end\n\n    # Saves the associations in this map to Aquarium.\n    def save\n      das = []\n      @map.each_key do |key|\n        if key == DATAMATRIX_KEY\n          das.concat save_data_matrix_alt(@object, @map[key])\n        elsif @map[key].is_a? UploadAssoc\n          # TODO: update this to lazy associate once aq is updated to hav lazy upload assoc (on master, just not on server yet)\n          @object.associate(key, @map[key].tag, @map[key].upload)\n        else\n          das << @object.lazy_associate(key, @map[key])\n        end\n      end\n      DataAssociation.import(das, on_duplicate_key_update: [:object]) unless das.empty?\n      @object.save\n      nil\n    end\n\n    # saves part_data to the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    # built off of set_data_matrix from collection.rb\n    def save_data_matrix_alt(coll, matrix, offset: [0, 0])\n      pm = coll.part_matrix\n      das = []\n\n      uniq_keys = matrix.flatten.map(&:keys).flatten.uniq\n      dms_by_key = {}\n      uniq_keys.each do |key|\n        dms_by_key[key] = coll.data_matrix(key)\n      end\n\n      coll.each_row_col(matrix, offset: offset) do |x, y, ox, oy|\n        next unless !matrix[x][y].nil? && pm[ox][oy] # this part has das\n        matrix[x][y].each do |k, v|\n          if pm[ox][oy]\n            if dms_by_key[k][ox][oy]\n              da = dms_by_key[k][ox][oy]\n              da.object = { k => v }.to_json\n              das << da\n            else\n              das << pm[ox][oy].lazy_associate(k, v)\n            end\n          end\n        end\n      end\n\n      das\n    end\n\n    # Returns an array of all the keys in this map\n    def keys\n      @map.keys\n    end\n\n    # Returns the string representation of the map\n    def to_string\n      @map.to_s\n    end\n\n    alias to_s to_string\n  end\n\n  # private class that is used to deal with associating upload objects alongside their tag\n  class UploadAssoc\n    def initialize(tag, upload)\n      @upload = upload\n      @tag = tag || {}\n    end\n\n    def change_tag(new_tag)\n      @tag = new_tag\n    end\n\n    attr_reader :upload\n\n    attr_reader :tag\n  end\n\n  # Utilizes the part-data matrix of collections to store information about the history of\n  # parts of a collection. PartProvenance initializes and relies on two fields of every part-data\n  # slot: `source` and `destination`.\n  # `source` will store a list of item ids (with rc index if applicable),\n  # of all the ingredients used to make this part, and destination will use the same data format\n  # to record all of the places this part was used in.\n  # Item-Item provenance can technically be recorded as well with this library, but it will not\n  # be necessary.\n  #\n  module PartProvenance\n    SOURCE = \'source\'\n    DESTINATION = \'destination\'\n\n    # Record an entry to the provenance data between two parts, or a part and an item.\n    # This will populate the destination field of `from`, and the source field\n    # of the `to` in their respective associations. If from_coord or to_coord is specified, then\n    # the associations of the part of the from/to collection at that coordinate will\n    # populated instead.\n    #\n    # @param opts [Hash]  Arguments specifying which objects to record relation for\n    # @option from [Item/Collection]  the item or collection where sample transfer originated\n    # @option to [Item/Collection]  the item or collection for destination of sample transfer\n    # @option from_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `to` was a collection\n    # @option to_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `from` was a collection\n    # @option additional_relation_data [Hash]  optionally, add additional key/value pairs to add to both object\'s routing data\n    #                         for this relation. For example, you might want to specify the volume of the transfer,\n    #                         or which colony was picked from a plate\n    # @option from_map [AssociationMap]  existing AssociationMap for the given from-object, required to successfully associate provenance to\n    #                           the `from` item\n    # @option to_map [AssociationMap]  existing AssociationMap for the given to-object, required to successfully associate provenance to\n    #                           the `to` item\n    def add_provenance(opts = {})\n      if opts[:from] == opts[:to] # special case: provenance between two parts on the same collection\n        opts[:from_map] = opts[:to_map] # ensure from map and to map are the same object for this case\n      end\n\n      # creating information hashes to represent `from` and `to` relationship data\n      from_info = serialize_as_simple_tag(opts[:from], opts[:from_coord], opts[:additional_relation_data])\n      to_info = serialize_as_simple_tag(opts[:to], opts[:to_coord], opts[:additional_relation_data])\n\n      # in destination field of `from`, add information tag representing `to`\n      append_to_association(opts[:from_map], DESTINATION, to_info, coord: opts[:from_coord]) if opts[:from_map]\n\n      # in source field of `to`, add information tag representing `from`\n      append_to_association(opts[:to_map], SOURCE, from_info, coord: opts[:to_coord]) if opts[:to_map]\n    end\n\n    # Retrieves a list of sources that were used to construct the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def sources(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, SOURCE, coord: coord)\n      else\n        AssociationMap.get_associated_data(object, SOURCE)\n      end\n    end\n\n    # Retrieves a list of destinations that were made using the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def destinations(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, DESTINATION, coord: opts[:coord])\n      else\n        AssociationMap.get_associated_data(object, DESTINATION)\n      end\n    end\n\n    # For the given associatable target object, appends or concatenates the given datum_to_append to the association\n    # at `key` for that object\n    #\n    # @param association_map [AssocioationMap]  an AssociationMap that will have its associations appended to.\n    # @param key [String/Symbol]  The association key which maps to an appendable object\n    # @param datum_to_append [Serializable Object]  the element to append to the list at the value for the given key\n    # @param opts [Hash]  additional options\n    # @option coord [Tuple array]  coordinate of target part, if association target is a collection\n    def append_to_association(association_map, key, datum_to_append, opts = {})\n      if opts[:coord] # we will be interacting with the associations of a part of a collection if coord is specified\n        association_map.putrc(opts[:coord][0], opts[:coord][1], key, []) if association_map.getrc(opts[:coord][0], opts[:coord][1], key).nil?\n        association_map.getrc(opts[:coord][0], opts[:coord][1], key) <<  datum_to_append\n      else\n        association_map.put(key, []) if association_map.get(key).nil?\n        association_map.get(key) << datum_to_append\n      end\n    end\n\n    # Given an item, or a part of a collection, serializes it into a simple tag which can be used to retrieve it.\n    #\n    # @param item [Item/FieldValue]  can be either an Item, or\n    #                         an i/o object corresponding to a part of a collection, which can be thought of\n    #                         as constituting a \'sub item\'\n    def serialize_as_simple_tag(item, coord, additional_info)\n      info = if item.collection? && coord\n               { id: item.id, row: coord[0], column: coord[1] }\n             elsif (item.is_a? Item) || (item.is_a? Collection)\n               { id: item.id }\n             else\n               raise \'Argument is neither a part nor an item\'\n             end\n      info.merge!(additional_info) unless additional_info.nil?\n      info\n    end\n  end\nend\n',2,'Library','2020-03-13 19:46:43','2020-03-13 19:46:43',1),(324,'source','module Debug\n  def print_object obj\n    if [Numeric, String].any? { |c| obj.is_a? c }\n      obj\n    elsif [Array].any? { |c| obj.is_a? c }\n      obj.map { |item| print_object item }\n    elsif [Hash].any? { |c| obj.is_a? c }\n      Hash[obj.map { |k, v| [k, print_object(v)] }]\n    else\n      s = obj ? obj.id.to_s : \"\"\n      s += \" #{obj.name}\" if obj.class.method_defined? :name\n      s\n    end\n  end\n\n  def log_info *args\n    if debug\n      show do\n        title \"Debug slide (#{args.length} #{\"arg\".pluralize args.length})\"\n\n        args.each do |arg|\n          note \"#{arg.class}: #{print_object arg}\"\n        end\n      end\n    end\n  end\n\n    def inspect(object, ident=nil)\n        show do\n            title \"<span style=\\\"background-color:yellow\\\">INSPECTING #{ident} (#{object.class})</span>\"\n            if object.kind_of?(Array)\n              table object\n            else\n              note object.to_json\n            end\n        end\n    end\nend\n',1,'Library','2020-03-13 19:46:44','2020-03-13 19:46:44',1),(325,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAXINPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:49:06','2020-03-13 19:49:06',1),(326,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAXINPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:49:06','2020-03-13 19:49:06',1),(327,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n\n    rna_prep_steps(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 19:49:24','2020-03-13 19:49:24',1),(328,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 19:49:25','2020-03-13 19:49:25',1),(329,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    #toss QC plate\n    working_plate.mark_as_deleted\n\n    store_output_collections(operations)\n\n    show do\n      title \"Toss Working Plate\"\n      note \"Throw away working plate ID: #{working_plate.id}\"\n    end\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 19:49:25','2020-03-13 19:49:25',1),(330,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAX_INPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:50:07','2020-03-13 19:50:07',1),(331,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAX_INPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:50:07','2020-03-13 19:50:07',1),(332,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAX_INPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:50:07','2020-03-13 19:50:07',1),(333,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAX_INPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:50:08','2020-03-13 19:50:08',1),(334,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAX_INPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 19:50:08','2020-03-13 19:50:08',1),(335,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n    end\n    \n    \nend',8,'Library','2020-03-13 20:00:48','2020-03-13 20:00:48',1),(336,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n    end\n    \n    \nend',8,'Library','2020-03-13 20:00:48','2020-03-13 20:00:48',1),(337,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n    end\n    \n    \nend',8,'Library','2020-03-13 20:00:48','2020-03-13 20:00:48',1),(338,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:03:14','2020-03-13 20:03:14',1),(339,'source','module Debug\n  def print_object obj\n    if [Numeric, String].any? { |c| obj.is_a? c }\n      obj\n    elsif [Array].any? { |c| obj.is_a? c }\n      obj.map { |item| print_object item }\n    elsif [Hash].any? { |c| obj.is_a? c }\n      Hash[obj.map { |k, v| [k, print_object(v)] }]\n    else\n      s = obj ? obj.id.to_s : \"\"\n      s += \" #{obj.name}\" if obj.class.method_defined? :name\n      s\n    end\n  end\n\n  def log_info *args\n    if debug\n      show do\n        title \"Debug slide (#{args.length} #{\"arg\".pluralize args.length})\"\n\n        args.each do |arg|\n          note \"#{arg.class}: #{print_object arg}\"\n        end\n      end\n    end\n  end\n\n    def inspect(object, ident=nil)\n        show do\n            title \"<span style=\\\"background-color:yellow\\\">INSPECTING #{ident} (#{object.class})</span>\"\n            if object.kind_of?(Array)\n              table object\n            else\n              note object.to_json\n            end\n        end\n    end\nend\n',1,'Library','2020-03-13 20:03:15','2020-03-13 20:03:15',1),(340,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    #validate inputs\n    validate_inputs(operations)\n\n    #create collection plate to batch stuff \n    #create_96_well_plates\n    working_plate = Collection.new_collection(C_TYPE)\n\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    #go get stock plates with wanted samples\n    operations.retrieve\n\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n\n      #batch them together (assign samples to wells in working plate)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n\n      #Instructions for transferring from stock to working plate\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    #return stock plates with samples\n    store_input_collections(operations)\n\n    #instructions for QC (include concentration measurements)\n    take_qc_measurments(working_plate)\n\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 20:03:17','2020-03-13 20:03:17',1),(341,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames\n  INPUT_ARRAY = \"Input Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 20:03:41','2020-03-13 20:03:41',1);
INSERT INTO `codes` VALUES (342,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions, WorkflowValidation, CommonInputOutputNames\n  MAX_INPUTS = 96\n  INPUT_ARRAY = \"Input Array\"\n  OUTPUT_ARRAY = \"Output Array\"\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:03:43','2020-03-13 20:03:43',1),(343,'source','module Debug\n  def print_object obj\n    if [Numeric, String].any? { |c| obj.is_a? c }\n      obj\n    elsif [Array].any? { |c| obj.is_a? c }\n      obj.map { |item| print_object item }\n    elsif [Hash].any? { |c| obj.is_a? c }\n      Hash[obj.map { |k, v| [k, print_object(v)] }]\n    else\n      s = obj ? obj.id.to_s : \"\"\n      s += \" #{obj.name}\" if obj.class.method_defined? :name\n      s\n    end\n  end\n\n  def log_info *args\n    if debug\n      show do\n        title \"Debug slide (#{args.length} #{\"arg\".pluralize args.length})\"\n\n        args.each do |arg|\n          note \"#{arg.class}: #{print_object arg}\"\n        end\n      end\n    end\n  end\n\n    def inspect(object, ident=nil)\n        show do\n            title \"<span style=\\\"background-color:yellow\\\">INSPECTING #{ident} (#{object.class})</span>\"\n            if object.kind_of?(Array)\n              table object\n            else\n              note object.to_json\n            end\n        end\n    end\nend\n',1,'Library','2020-03-13 20:03:45','2020-03-13 20:03:45',1),(344,'source','# frozen_string_literal: true\n\n# Module with methods and classes that seek to help with associating data\n# to, and retrieving data from, items, operations, plans, collections, and parts.\n#\nmodule AssociationManagement\n  require \'matrix\'\n\n  # Associates a key and value to the associations hash of the given object.\n  # Replaces an existing association for the given key.\n  #\n  # A part may be represented as a part item, or a collection and coordinate.\n  #\n  # @param object [DataAssociator]  the object to associate data\n  # @param key [String]  the key for the association\n  # @param data [serializable object]  the data for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [Array]  row, column pair if the object is a collection\n  # @option data_matrix [String]  optional data matrix for a collection\n  def associate_data(object, key, data, opts = {})\n    AssociationMap.associate_data(object, key, data, opts)\n  end\n\n  # Returns the associated value from the associations hash of a given object.\n  # If an association doesn\'t exist for the key, returns nil.\n  #\n  # @param object [DataAssociator]  the object to associated data\n  # @param key [String]  the key for the association\n  # @param opts [Hash]  additional method options\n  # @option coord [tuple Array]  row, column of part if object is a collection.\n  # @option data_matrix [String]  optional data matrix\n  # @return [serializable object]  the value associated with the given key\n  def get_associated_data(object, key, opts = {})\n    AssociationMap.get_associated_data(object, key, opts)\n  end\n\n  # Defines a map to manage the associations for an {Item}, {Operation}, or\n  # {Plan} object, which are Aquarium classes that extend {DataAssociator}.\n  #\n  # Note: if `map` contains associations, it is necessary to call `map.save` for\n  #       the associations to be saved to Aquarium.\n  #\n  class AssociationMap\n    DATAMATRIX_KEY = \'part_data\'\n\n    # Initializes an {AssociationMap} for the given item, operation, or plan.\n    #\n    # @param object [DataAssociator]  the object to which to associated data\n    def initialize(object)\n      @object = object\n      @map = {}\n\n      @object.associations.each do |datum|\n        @map[datum[0]] =\n          if @object.upload(datum[0]).nil?\n            datum[1]\n          else\n            UploadAssoc.new(datum[1], @object.upload(datum[0]))\n          end\n      end\n\n      if object.is_a? Collection\n        initialize_part_data\n        data_matrix_all(@object, @map[DATAMATRIX_KEY])\n      end\n    end\n\n    # Retrieves part_data from the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    def data_matrix_all(coll, data_matrix)\n      pas = coll.part_associations\n      part_ids = pas.collect(&:part_id)\n      das = DataAssociation.where(parent_class: \'Item\', parent_id: part_ids)\n      pas.each do |pa|\n        data_matrix[pa.row][pa.column] = {}\n        das.select { |da| da.parent_id == pa.part_id }.each do |da|\n          data_matrix[pa.row][pa.column][da.key] = da.value\n        end\n      end\n      data_matrix\n    end\n\n    # All in one static method which associates a key and value\n    # to the associations hash of a given object. If an association already\n    # exists at the given key, it will be replaced. Can associate to parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated. Can be an io field value\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when associating to a part of a collection, use a\n    #                         data matrix besides the default one\n    def self.associate_data(object, key, data, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot associate to a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        assoc_map.putrc(object.row, object.column, key, data)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        assoc_map.putrc(opts[:coord][0], opts[:coord][1], key, data)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        assoc_map.put(key, data)\n      end\n      assoc_map.save\n    end\n\n    # All in one static method which gets an associated value\n    # from the associations hash of a given object. If an association doesn\'t\n    # exist at the given key, returns nil. Can get associations from parts of collection either\n    # using a part field value, or an optional coordinate specification with a collection\n    #\n    # @param object [DataAssociator]  the object to which data is to be associated, can be an io field value\n    # @param key [String]  the key for the association\n    # @param opts [Hash]  additional method options\n    # @option coord [tuple Array]  specify r, c index of the data matrix of the object to upload to,\n    #                   rather than directly to the object. Requires that object is a collection.\n    # @option data_matrix [String]  optionally, when retrieving association from a part of a collection,\n    #                         use a matrix besides the default one\n    # @return [serializable object]  the data stored in the associations of the given object at the given key\n    def self.get_associated_data(object, key, opts = {})\n      defaults = { data_matrix: DATAMATRIX_KEY }\n      opts.merge defaults\n      raise \'Bad Arguments: cannot get data from a part and specify coords at the same time\' if object.is_a?(FieldValue) && opts[:coord]\n      if object.is_a?(FieldValue)\n        assoc_map = AssociationMap.new(object.collection)\n        return assoc_map.getrc(object.row, object.column, key)\n      elsif opts[:coord]\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.getrc(opts[:coord][0], opts[:coord][1], key)\n      else # Normal case that deals directly with object\n        assoc_map = AssociationMap.new(object)\n        return assoc_map.get(key)\n      end\n    end\n\n    # Adds an association for the data with the key.\n    # The data must be serializable.\n    #\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param opts [Hash]  Additional Options\n    # @option tag  [String]  If putting an Upload, optionally specify an extra label\n    def put(key, data, opts = { tag: {} })\n      @map[key] = if data.is_a?(Upload)\n                    UploadAssoc.new(opts[:tag], data)\n                  else\n                    data\n                  end\n    end\n\n    # Adds an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # If the data_matrix for the collection has not been created yet, it is initialized\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data [serializable object]  the data for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def putrc(row, column, key, data, data_matrix = DATAMATRIX_KEY)\n      # if the data_matrix for this collection does not exist yet, initialize it.\n      initialize_part_data(data_matrix)\n      @map[data_matrix][row][column][key] = data\n    end\n\n    # To be called when the object of association is a collection,\n    # establishes a matrix parallel to the sample matrix which can\n    # be used to store additional information about individual parts\n    # Each slot in the matrix will be a new empty hash.\n    #\n    # @param coll [Collection]  the object for which part-data matrix will be initialized\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    def initialize_part_data(data_matrix = DATAMATRIX_KEY)\n      raise \"Invalid Method Call: cannot associate part data to an object that isn\'t a collection\" unless @object.is_a?(Collection)\n      # TODO: fix the following so that can use the Base method\n      # coll = collection_from(@object.id)\n      coll = Collection.find(@object.id)\n      @map[data_matrix] = Array.new(coll.dimensions[0]) { Array.new(coll.dimensions[1]) { {} } } if @map[data_matrix].nil?\n    end\n\n    # Returns the associated data for the key, if any.\n    #\n    # @param key [String]  the key for the association\n    # @returns the data object for the key, `nil` otherwise\n    def get(key)\n      data = @map[key]\n      if data.is_a?(UploadAssoc)\n        data.upload\n      else\n        data\n      end\n    end\n\n    # Gets an association for the data with the key, for\n    # a specific row, column coordinate within a collection\n    # Returns the associated data for the key, if any.\n    #\n    # @requires  current object is a Collection, and r,c corresponds to a valid location in the object\n    # @param r [Integer]  the row of the part within the collection to associate to\n    # @param c [Integer]  the column of the part within the collection to associate to\n    # @param key [String]  the key for the association\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns the data object for the key, `nil` otherwise\n    def getrc(row, column, key, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix][row][column][key] unless @map[data_matrix].nil?\n    end\n\n    # Retrieve the associations for all parts of the collection\n    # as a matrix.\n    # @requires  current object is a collection\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n    # @returns  the data matrix, if one exists\n    def get_data_matrix(data_matrix = DATAMATRIX_KEY)\n      Matrix.rows(@map[data_matrix])\n    end\n\n    # Replace or initialize the data matrix for this object\n    # with a custom one.\n    # @requires  the current object is a collection\n    # `matrix` have the same row column dimensions as the collection\n    #\n    # @param new_matrix [Matrix]  the new data matrix\n    # @param data_matrix [String/Symbol]  optionally specify a data matrix (by key) to access besides the default one,\n    #                         for example, you might have the default part data, alongside a routing matrix\n\n    def set_data_matrix(matrix, data_matrix = DATAMATRIX_KEY)\n      @map[data_matrix] = matrix.to_a\n    end\n\n    # Saves the associations in this map to Aquarium.\n    def save\n      das = []\n      @map.each_key do |key|\n        if key == DATAMATRIX_KEY\n          das.concat save_data_matrix_alt(@object, @map[key])\n        elsif @map[key].is_a? UploadAssoc\n          # TODO: update this to lazy associate once aq is updated to hav lazy upload assoc (on master, just not on server yet)\n          @object.associate(key, @map[key].tag, @map[key].upload)\n        else\n          das << @object.lazy_associate(key, @map[key])\n        end\n      end\n      DataAssociation.import(das, on_duplicate_key_update: [:object]) unless das.empty?\n      @object.save\n      nil\n    end\n\n    # saves part_data to the data associations of constituent parts.\n    # achieves forward compatibility with AQ Part update\n    # built off of set_data_matrix from collection.rb\n    def save_data_matrix_alt(coll, matrix, offset: [0, 0])\n      pm = coll.part_matrix\n      das = []\n\n      uniq_keys = matrix.flatten.map(&:keys).flatten.uniq\n      dms_by_key = {}\n      uniq_keys.each do |key|\n        dms_by_key[key] = coll.data_matrix(key)\n      end\n\n      coll.each_row_col(matrix, offset: offset) do |x, y, ox, oy|\n        next unless !matrix[x][y].nil? && pm[ox][oy] # this part has das\n        matrix[x][y].each do |k, v|\n          if pm[ox][oy]\n            if dms_by_key[k][ox][oy]\n              da = dms_by_key[k][ox][oy]\n              da.object = { k => v }.to_json\n              das << da\n            else\n              das << pm[ox][oy].lazy_associate(k, v)\n            end\n          end\n        end\n      end\n\n      das\n    end\n\n    # Returns an array of all the keys in this map\n    def keys\n      @map.keys\n    end\n\n    # Returns the string representation of the map\n    def to_string\n      @map.to_s\n    end\n\n    alias to_s to_string\n  end\n\n  # private class that is used to deal with associating upload objects alongside their tag\n  class UploadAssoc\n    def initialize(tag, upload)\n      @upload = upload\n      @tag = tag || {}\n    end\n\n    def change_tag(new_tag)\n      @tag = new_tag\n    end\n\n    attr_reader :upload\n\n    attr_reader :tag\n  end\n\n  # Utilizes the part-data matrix of collections to store information about the history of\n  # parts of a collection. PartProvenance initializes and relies on two fields of every part-data\n  # slot: `source` and `destination`.\n  # `source` will store a list of item ids (with rc index if applicable),\n  # of all the ingredients used to make this part, and destination will use the same data format\n  # to record all of the places this part was used in.\n  # Item-Item provenance can technically be recorded as well with this library, but it will not\n  # be necessary.\n  #\n  module PartProvenance\n    SOURCE = \'source\'\n    DESTINATION = \'destination\'\n\n    # Record an entry to the provenance data between two parts, or a part and an item.\n    # This will populate the destination field of `from`, and the source field\n    # of the `to` in their respective associations. If from_coord or to_coord is specified, then\n    # the associations of the part of the from/to collection at that coordinate will\n    # populated instead.\n    #\n    # @param opts [Hash]  Arguments specifying which objects to record relation for\n    # @option from [Item/Collection]  the item or collection where sample transfer originated\n    # @option to [Item/Collection]  the item or collection for destination of sample transfer\n    # @option from_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `to` was a collection\n    # @option to_coord [Tuple Array]  optionally, specify the coordinate selecting a part of the collection, if `from` was a collection\n    # @option additional_relation_data [Hash]  optionally, add additional key/value pairs to add to both object\'s routing data\n    #                         for this relation. For example, you might want to specify the volume of the transfer,\n    #                         or which colony was picked from a plate\n    # @option from_map [AssociationMap]  existing AssociationMap for the given from-object, required to successfully associate provenance to\n    #                           the `from` item\n    # @option to_map [AssociationMap]  existing AssociationMap for the given to-object, required to successfully associate provenance to\n    #                           the `to` item\n    def add_provenance(opts = {})\n      if opts[:from] == opts[:to] # special case: provenance between two parts on the same collection\n        opts[:from_map] = opts[:to_map] # ensure from map and to map are the same object for this case\n      end\n\n      # creating information hashes to represent `from` and `to` relationship data\n      from_info = serialize_as_simple_tag(opts[:from], opts[:from_coord], opts[:additional_relation_data])\n      to_info = serialize_as_simple_tag(opts[:to], opts[:to_coord], opts[:additional_relation_data])\n\n      # in destination field of `from`, add information tag representing `to`\n      append_to_association(opts[:from_map], DESTINATION, to_info, coord: opts[:from_coord]) if opts[:from_map]\n\n      # in source field of `to`, add information tag representing `from`\n      append_to_association(opts[:to_map], SOURCE, from_info, coord: opts[:to_coord]) if opts[:to_map]\n    end\n\n    # Retrieves a list of sources that were used to construct the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def sources(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, SOURCE, coord: coord)\n      else\n        AssociationMap.get_associated_data(object, SOURCE)\n      end\n    end\n\n    # Retrieves a list of destinations that were made using the given part\n    # of a Collection\n    #\n    # @param object [FieldValue/Collection]  the part of interest, or the collection which\n    #                 contains the part of interest. For the second case, coord must also be specified\n    # @param coord [Tuple Array]  the r,c index of the target part\n    def destinations(object, coord = nil)\n      if coord\n        AssociationMap.get_associated_data(object, DESTINATION, coord: opts[:coord])\n      else\n        AssociationMap.get_associated_data(object, DESTINATION)\n      end\n    end\n\n    # For the given associatable target object, appends or concatenates the given datum_to_append to the association\n    # at `key` for that object\n    #\n    # @param association_map [AssocioationMap]  an AssociationMap that will have its associations appended to.\n    # @param key [String/Symbol]  The association key which maps to an appendable object\n    # @param datum_to_append [Serializable Object]  the element to append to the list at the value for the given key\n    # @param opts [Hash]  additional options\n    # @option coord [Tuple array]  coordinate of target part, if association target is a collection\n    def append_to_association(association_map, key, datum_to_append, opts = {})\n      if opts[:coord] # we will be interacting with the associations of a part of a collection if coord is specified\n        association_map.putrc(opts[:coord][0], opts[:coord][1], key, []) if association_map.getrc(opts[:coord][0], opts[:coord][1], key).nil?\n        association_map.getrc(opts[:coord][0], opts[:coord][1], key) <<  datum_to_append\n      else\n        association_map.put(key, []) if association_map.get(key).nil?\n        association_map.get(key) << datum_to_append\n      end\n    end\n\n    # Given an item, or a part of a collection, serializes it into a simple tag which can be used to retrieve it.\n    #\n    # @param item [Item/FieldValue]  can be either an Item, or\n    #                         an i/o object corresponding to a part of a collection, which can be thought of\n    #                         as constituting a \'sub item\'\n    def serialize_as_simple_tag(item, coord, additional_info)\n      info = if item.collection? && coord\n               { id: item.id, row: coord[0], column: coord[1] }\n             elsif (item.is_a? Item) || (item.is_a? Collection)\n               { id: item.id }\n             else\n               raise \'Argument is neither a part nor an item\'\n             end\n      info.merge!(additional_info) unless additional_info.nil?\n      info\n    end\n  end\nend\n',2,'Library','2020-03-13 20:03:46','2020-03-13 20:03:46',1),(345,'source','module PlanParams\n\n  # Gets :options from the plan associations and uses it to override default_plan_params\n  #\n  # @return [Hash] plan_params\n  def update_plan_params(plan_params:, opts:)\n    if opts.present?\n      opts = JSON.parse(opts, { symbolize_names: true })\n      plan_params.update(opts)\n    end\n    plan_params\n  end\n\n  #gets the options on the first operaton of a plan\n  def get_opts(operations)\n    operations.first.plan.associations[:options]\n  end\n\n  #gets the options on a specific operation\n  def get_op_opts(op)\n    op.plan.associations[:options]\n  end\n\n  #sets plan params as a temporary association to the operation under the :plan_params key\n  def set_temporary_op_params(op, default_plan_parameters)\n      opts = get_op_opts(op)\n      op.temporary[:plan_params] = update_plan_params(plan_params: default_plan_params, opts: opts)\n  end\n \nend',4,'Library','2020-03-13 20:03:46','2020-03-13 20:03:46',1),(346,'source','module Units\n    \n    EMPTY = -1\n    \n    # Volume\n    MICROLITERS = \'ul\'\n    MILLILITERS = \'ml\'\n    \n    # Weight\n    NANOGRAMS = \'ng\'\n    MICROGRAMS = \'g\'\n    \n    # Concentration\n    PICOMOLAR = \'pM\'\n    NANOMOLAR = \'nM\'\n    MICROMOLAR = \'M\'\n    MILLIMOLAR = \'mM\'\n    MOLAR = \'M\'\n    \n    # Temperature\n    DEGREES_C = \'C\'\n    \n    # Time\n    MINUTES = \'min\'\n    SECONDS = \'sec\'\n    HOURS =\'hr\'\n    # Force\n    TIMES_G = \'x g\'\n    \n    # R/DNA Length\n    BASEPAIRS = \'bp\'\n    KILOBASEPAIRS = \'kbp\'\n    MEGABASEPAIRS = \'mbp\'\n    GIGABASEPAIRS = \'gbp\'\n    \n    # Voltage\n    VOLTS = \'V\'\n\n    def self.qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def add_qty_display(options)\n        new_items = {}\n        \n        options.each do |key, value|\n            key =~ /^(.+_)+([a-z]+)$/\n            \n            case $2\n            when \'microliters\'\n                units = MICROLITERS\n            when \'milliliters\'\n                units = MILLILITERS\n            when \'minutes\'\n                units = MINUTES\n            else\n                next\n            end\n            \n            qty = value.to_f\n            \n            new_items[\"#{$1}qty\".to_sym] = { qty: qty, units: units }\n        end\n        \n        options.update(new_items)\n    end\n    \n    # Return the unit constant for the the unit name if there is one.\n    #\n    # @param unit_name [String] the name of the unit\n    # @returns the value of the constant with the given name\n    # @raises BadUnitNameError if the name is not the name of a defined unit\n    def self.get_unit(unit_name:)\n        self.const_get(unit_name.upcase)\n      rescue\n        raise BadUnitNameError.new(name: unit_name)\n    end\n    \n    # Exception class for bad unit name arguments to Units::get_unit.\n    #\n    # @attr_reader [String] name  the bad unit name\n    class BadUnitNameError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"Unknown unit name\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n    \n    # Return a key for the measure hash defined on the given object type.\n    #\n    # The measure hash must be defined in the data proerty of the object type as JSON.\n    # For instance\n    #\n    #   { \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }\n    #\n    # The key is constructed as the type name, an underscore, and the unit name.\n    #\n    # @param object_type [ObjectType] the object type\n    # @returns the key for the measure of the the object type if there is one\n    # @raises MissingObjectTypeMeasure if the object type has no measure data_object\n    def self.get_measure_key(object_type:)\n        data_object = object_type.data_object\n        raise MissingObjectTypeMeasureError.new(name: object_type.name) if !data_object.key?(:measure)\n        \n        measure = object_type.data_object[:measure]\n        type_name = measure[:type]\n        unit_name = measure[:unit]\n        \"#{type_name}_#{self.get_unit(unit_name: unit_name)}\"\n    end\n    \n    # Exception class for an object type with out a measure hash definition.\n    #\n    # @attr_reader [String] name  the name of the object type where measure has was expected\n    class MissingObjectTypeMeasureError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"ObjectType has no measure in data object\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n   \nend',5,'Library','2020-03-13 20:03:47','2020-03-13 20:03:47',1),(347,'source','module CommonInputOutputNames\n\n    INPUT_YEAST = \'Yeast Culture\'\n    OUTPUT_YEAST = \'Yeast Culture\'\n    MEDIA = \'Media\'\n    DNA = \'DNA\'\n    \n    INPUT_SAMPLE = \'Input Sample\'\n    OUTPUT_SAMPLE = \'Output Sample\'\n\n    INPUT_ARRAY = \"Input Array\"\n    OUTPUT_ARRAY = \"Output Array\"\n\n    FORWARD_PRIMER = \'Forward Primer\'\n    REVERSE_PRIMER = \'Reverse Primer\'\n    TEMPLATE = \'Template\'\n    FRAGMENT = \'Fragment\'\n    PROGRAM = \'Program\'\n    PRIMER_PLATE = \'96-Well Primer Aliquot Plate\'\n\nend',10,'Library','2020-03-13 20:03:48','2020-03-13 20:03:48',1),(348,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n  def highlight_alpha_non_empty collection, &rc_block\n    highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n  end\n      \nend',3,'Library','2020-03-13 20:03:49','2020-03-13 20:03:49',1),(349,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 20:03:50','2020-03-13 20:03:50',1),(350,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 20:03:51','2020-03-13 20:03:51',1),(351,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n    end\n    \n    \nend',8,'Library','2020-03-13 20:03:51','2020-03-13 20:03:51',1),(352,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAX_INPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 20:03:53','2020-03-13 20:03:53',1),(353,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 20:04:23','2020-03-13 20:04:23',1),(354,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 20:04:23','2020-03-13 20:04:23',1),(355,'source','# Library code here',11,'Library','2020-03-13 20:08:05','2020-03-13 20:08:05',1),(356,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is where all the standard keywords/values will live.\n\nmodule KeywordLib\n    MAX_INPUTS = 96\n    C_TYPE = \"96 Well Sample Plate\"\n    CON_KEY = \"Stock Conc (ng/ul)\"\n    \nend',11,'Library','2020-03-13 20:09:57','2020-03-13 20:09:57',1),(357,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames\n\n  MAX_INPUTS = 96\n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n  \n  \nend',9,'Library','2020-03-13 20:10:54','2020-03-13 20:10:54',1),(358,'source','module CommonInputOutputNames\n\n    INPUT_YEAST = \'Yeast Culture\'\n    OUTPUT_YEAST = \'Yeast Culture\'\n    MEDIA = \'Media\'\n    DNA = \'DNA\'\n    \n    INPUT_SAMPLE = \'Input Sample\'\n    OUTPUT_SAMPLE = \'Output Sample\'\n\n    INPUT_ARRAY = \"Input Array\"\n    OUTPUT_ARRAY = \"Output Array\"\n\n    FORWARD_PRIMER = \'Forward Primer\'\n    REVERSE_PRIMER = \'Reverse Primer\'\n    TEMPLATE = \'Template\'\n    FRAGMENT = \'Fragment\'\n    PROGRAM = \'Program\'\n    PRIMER_PLATE = \'96-Well Primer Aliquot Plate\'\n\nend',10,'Library','2020-03-13 20:10:55','2020-03-13 20:10:55',1),(359,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 20:10:57','2020-03-13 20:10:57',1),(360,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 20:10:57','2020-03-13 20:10:57',1),(361,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 20:10:58','2020-03-13 20:10:58',1),(362,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n  def highlight_alpha_non_empty collection, &rc_block\n    highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n  end\n      \nend',3,'Library','2020-03-13 20:10:58','2020-03-13 20:10:58',1),(363,'source','module CommonInputOutputNames\n\n    INPUT_YEAST = \'Yeast Culture\'\n    OUTPUT_YEAST = \'Yeast Culture\'\n    MEDIA = \'Media\'\n    DNA = \'DNA\'\n    \n    INPUT_SAMPLE = \'Input Sample\'\n    OUTPUT_SAMPLE = \'Output Sample\'\n\n    INPUT_ARRAY = \"Input Array\"\n    OUTPUT_ARRAY = \"Output Array\"\n\n    FORWARD_PRIMER = \'Forward Primer\'\n    REVERSE_PRIMER = \'Reverse Primer\'\n    TEMPLATE = \'Template\'\n    FRAGMENT = \'Fragment\'\n    PROGRAM = \'Program\'\n    PRIMER_PLATE = \'96-Well Primer Aliquot Plate\'\n\nend',10,'Library','2020-03-13 20:11:00','2020-03-13 20:11:00',1),(364,'source','module Units\n    \n    EMPTY = -1\n    \n    # Volume\n    MICROLITERS = \'ul\'\n    MILLILITERS = \'ml\'\n    \n    # Weight\n    NANOGRAMS = \'ng\'\n    MICROGRAMS = \'g\'\n    \n    # Concentration\n    PICOMOLAR = \'pM\'\n    NANOMOLAR = \'nM\'\n    MICROMOLAR = \'M\'\n    MILLIMOLAR = \'mM\'\n    MOLAR = \'M\'\n    \n    # Temperature\n    DEGREES_C = \'C\'\n    \n    # Time\n    MINUTES = \'min\'\n    SECONDS = \'sec\'\n    HOURS =\'hr\'\n    # Force\n    TIMES_G = \'x g\'\n    \n    # R/DNA Length\n    BASEPAIRS = \'bp\'\n    KILOBASEPAIRS = \'kbp\'\n    MEGABASEPAIRS = \'mbp\'\n    GIGABASEPAIRS = \'gbp\'\n    \n    # Voltage\n    VOLTS = \'V\'\n\n    def self.qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def qty_display(qty)\n        \"#{qty[:qty]} #{qty[:units]}\"\n    end\n    \n    def add_qty_display(options)\n        new_items = {}\n        \n        options.each do |key, value|\n            key =~ /^(.+_)+([a-z]+)$/\n            \n            case $2\n            when \'microliters\'\n                units = MICROLITERS\n            when \'milliliters\'\n                units = MILLILITERS\n            when \'minutes\'\n                units = MINUTES\n            else\n                next\n            end\n            \n            qty = value.to_f\n            \n            new_items[\"#{$1}qty\".to_sym] = { qty: qty, units: units }\n        end\n        \n        options.update(new_items)\n    end\n    \n    # Return the unit constant for the the unit name if there is one.\n    #\n    # @param unit_name [String] the name of the unit\n    # @returns the value of the constant with the given name\n    # @raises BadUnitNameError if the name is not the name of a defined unit\n    def self.get_unit(unit_name:)\n        self.const_get(unit_name.upcase)\n      rescue\n        raise BadUnitNameError.new(name: unit_name)\n    end\n    \n    # Exception class for bad unit name arguments to Units::get_unit.\n    #\n    # @attr_reader [String] name  the bad unit name\n    class BadUnitNameError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"Unknown unit name\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n    \n    # Return a key for the measure hash defined on the given object type.\n    #\n    # The measure hash must be defined in the data proerty of the object type as JSON.\n    # For instance\n    #\n    #   { \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }\n    #\n    # The key is constructed as the type name, an underscore, and the unit name.\n    #\n    # @param object_type [ObjectType] the object type\n    # @returns the key for the measure of the the object type if there is one\n    # @raises MissingObjectTypeMeasure if the object type has no measure data_object\n    def self.get_measure_key(object_type:)\n        data_object = object_type.data_object\n        raise MissingObjectTypeMeasureError.new(name: object_type.name) if !data_object.key?(:measure)\n        \n        measure = object_type.data_object[:measure]\n        type_name = measure[:type]\n        unit_name = measure[:unit]\n        \"#{type_name}_#{self.get_unit(unit_name: unit_name)}\"\n    end\n    \n    # Exception class for an object type with out a measure hash definition.\n    #\n    # @attr_reader [String] name  the name of the object type where measure has was expected\n    class MissingObjectTypeMeasureError < StandardError\n        attr_reader :name\n        \n        def initialize(msg: \"ObjectType has no measure in data object\", name:)\n            @name = name\n            super(msg)\n        end\n    end\n   \nend',5,'Library','2020-03-13 20:11:00','2020-03-13 20:11:00',1),(365,'source','module PlanParams\n\n  # Gets :options from the plan associations and uses it to override default_plan_params\n  #\n  # @return [Hash] plan_params\n  def update_plan_params(plan_params:, opts:)\n    if opts.present?\n      opts = JSON.parse(opts, { symbolize_names: true })\n      plan_params.update(opts)\n    end\n    plan_params\n  end\n\n  #gets the options on the first operaton of a plan\n  def get_opts(operations)\n    operations.first.plan.associations[:options]\n  end\n\n  #gets the options on a specific operation\n  def get_op_opts(op)\n    op.plan.associations[:options]\n  end\n\n  #sets plan params as a temporary association to the operation under the :plan_params key\n  def set_temporary_op_params(op, default_plan_parameters)\n      opts = get_op_opts(op)\n      op.temporary[:plan_params] = update_plan_params(plan_params: default_plan_params, opts: opts)\n  end\n \nend',4,'Library','2020-03-13 20:11:01','2020-03-13 20:11:01',1),(366,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:17:31','2020-03-13 20:17:31',1),(367,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.sample.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:17:35','2020-03-13 20:17:35',1),(368,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n  def highlight_alpha_non_empty collection, &rc_block\n    highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n  end\n      \nend',3,'Library','2020-03-13 20:17:39','2020-03-13 20:17:39',1),(369,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\nend',6,'Library','2020-03-13 20:17:39','2020-03-13 20:17:39',1),(370,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 20:17:40','2020-03-13 20:17:40',1),(371,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 20:17:40','2020-03-13 20:17:40',1),(372,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 20:17:44','2020-03-13 20:17:44',1),(373,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:18:18','2020-03-13 20:18:18',1),(374,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:18:18','2020-03-13 20:18:18',1),(375,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:18:18','2020-03-13 20:18:18',1),(376,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:20:05','2020-03-13 20:20:05',1),(377,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:20:06','2020-03-13 20:20:06',1),(378,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 20:20:06','2020-03-13 20:20:06',1),(379,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:20:35','2020-03-13 20:20:35',1),(380,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:20:35','2020-03-13 20:20:35',1),(381,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:20:35','2020-03-13 20:20:35',1),(382,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:20:36','2020-03-13 20:20:36',1),(383,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:20:49','2020-03-13 20:20:49',1),(384,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:20:49','2020-03-13 20:20:49',1),(385,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 20:20:49','2020-03-13 20:20:49',1),(386,'protocol','# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n\n    tin  = operations.io_table \'input\'\n    tout = operations.io_table \'output\'\n\n    show do\n      title \'Input Table\'\n      table tin.all.render\n    end\n\n    show do\n      title \'Output Table\'\n      table tout.all.render\n    end\n\n    operations.store\n\n    {}\n\n  end\n\nend\n',4,'OperationType','2020-03-13 20:24:05','2020-03-13 20:24:05',1),(387,'precondition','def precondition(_op)\n  true\nend',4,'OperationType','2020-03-13 20:24:05','2020-03-13 20:24:05',1),(388,'cost_model','def cost(_op)\n  { labor: 0, materials: 0 }\nend',4,'OperationType','2020-03-13 20:24:05','2020-03-13 20:24:05',1),(389,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',4,'OperationType','2020-03-13 20:24:05','2020-03-13 20:24:05',1),(390,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This Protocol is to Quality check the C-DNA created.\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(QC2_KEY, \"Pass\")\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(QC2_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will assume to pass\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',4,'OperationType','2020-03-13 20:30:58','2020-03-13 20:30:58',1),(391,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This Protocol is to Quality check the C-DNA created.\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(QC2_KEY, \"Pass\")\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(QC2_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will assume to pass\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',4,'OperationType','2020-03-13 20:30:58','2020-03-13 20:30:58',1),(392,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is where all the standard keywords/values will live.\n\nmodule KeywordLib\n    MAX_INPUTS = 96\n    C_TYPE = \"96 Well Sample Plate\"\n    CON_KEY = \"Stock Conc (ng/ul)\"\n    QC2_KEY = \"C-DNA QC\"\nend',11,'Library','2020-03-13 20:30:59','2020-03-13 20:30:59',1),(393,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is where all the standard keywords/values will live.\n\nmodule KeywordLib\n    MAX_INPUTS = 96\n    C_TYPE = \"96 Well Sample Plate\"\n    CON_KEY = \"Stock Conc (ng/ul)\"\n    QC2_KEY = \"C-DNA QC\"\nend',11,'Library','2020-03-13 20:31:00','2020-03-13 20:31:00',1),(394,'protocol','# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\nclass Protocol\n\n  def main\n\n    operations.retrieve.make\n\n    tin  = operations.io_table \'input\'\n    tout = operations.io_table \'output\'\n\n    show do\n      title \'Input Table\'\n      table tin.all.render\n    end\n\n    show do\n      title \'Output Table\'\n      table tout.all.render\n    end\n\n    operations.store\n\n    {}\n\n  end\n\nend\n',5,'OperationType','2020-03-13 21:00:59','2020-03-13 21:00:59',1),(395,'precondition','def precondition(_op)\n  true\nend',5,'OperationType','2020-03-13 21:00:59','2020-03-13 21:00:59',1),(396,'cost_model','def cost(_op)\n  { labor: 0, materials: 0 }\nend',5,'OperationType','2020-03-13 21:00:59','2020-03-13 21:00:59',1),(397,'documentation','Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.',5,'OperationType','2020-03-13 21:00:59','2020-03-13 21:00:59',1),(398,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This Protocol is to Quality check the C-DNA created.\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(QC2_KEY, \"Pass\")\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(QC2_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will assume to pass\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',4,'OperationType','2020-03-13 21:03:13','2020-03-13 21:03:13',1),(399,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Label Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\nend',6,'Library','2020-03-13 21:16:07','2020-03-13 21:16:07',1),(400,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Label Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 21:26:51','2020-03-13 21:26:51',1),(401,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Label Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 21:30:04','2020-03-13 21:30:04',1),(402,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Label Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 21:30:05','2020-03-13 21:30:05',1),(403,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.outputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n           end\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 21:33:36','2020-03-13 21:33:36',1),(404,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is to facilitate sample management within collection\nmodule SampleManagement\n\n  #Gets the location string of a sample in a collection \n  #Returns Alpha numerical string eg A1 or if the sample is\n  #in multiple locations will return A1, A2, A3\n  #\n  #@collection Collection the collection that the sample is in\n  #@sample Sample the Sample that you want the Alpha Numerical location for\n  def get_alpha_num_location(collection, sample)\n    loc_array = collection.find(sample)\n    string = \"\"\n    alpha26 = (\"A\"...\"Z\").to_a\n    loc_array.each_with_index do |loc, idx|\n      string = string + \", \" if idx > 0\n      loc.each_with_index do |rc, idx|\n        if idx.even?\n          string = string + alpha26[rc]\n        else\n          string = string + \"#{rc+1}\"\n        end\n      end\n    end\n    return string\n  end\n\n\n  #Assigns samples to specific well locations\n  #\n  #input:  working_plate   Collection\n  def add_fv_array_samples_to_collection(input_array, working_plate)\n      sample_array = []\n      input_array = input_array.sort_by{|fv| [fv.collection.find(fv.sample).first[1],fv.collection.find(fv.sample).first[0]]}\n      input_array.each_with_index do |fv, idx|\n        sample = fv.sample\n        sample_array << sample\n      end\n      slots_left = working_plate.get_empty.length\n      raise \"There are too many samples in this batch.\" if sample_array.length > slots_left\n      working_plate.add_samples(sample_array) #TODO add error checking for if the working_plate is full\n  end\n\n\n  #This replaces the operations.make command.  It ensures that all items in output_fv_array\n  #Remain in the same collection (instead of being put into different collections)\n  #\n  # @output_fv_array array[fv] array of field values\n  # @working_plate collection the destination collection.\n  def make_output_plate(output_fv_array, working_plate)\n    output_fv_array.each do |fv|\n        r_c = working_plate.find(fv.sample).first\n        fv.set(collection: working_plate, row: r_c[0], column: r_c[1])\n      end\n  end\n\nend',7,'Library','2020-03-13 21:33:37','2020-03-13 21:33:37',1),(405,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Label Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 21:33:38','2020-03-13 21:33:38',1),(406,'source','#Justin Vrana\n#\n#modified by:\n#Cannon Mallory\n#malloc3@uw.edu\n#\n#Modifications include:\n# Documentation (yet to happen)\n#\n# This module is for displaying information about collections in effecient easy to use ways\n#\n# TODO Make the collection displays so that they wont always be checkable cause that gets annoying\nmodule CollectionDisplay\n  def create_collection_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    slots.each_slice(collection.object_type.columns).map do |row|\n      row.map do |col|\n        {content: col, class: \'td-empty-slot\'}\n      end\n    end\n  end\n\n  def highlight tbl, row, col, id\n    tbl[row][col] = {content: id, class: \'td-filled-slot\', check: true}\n  end\n\n  # [r,c,x] list\n  def highlight_rcx(collection, rcx_list)\n    tbl = create_collection_table collection\n    rcx_list.each do |r, c, x|\n      highlight tbl, r, c, x\n    end\n    tbl\n  end\n\n  def highlight_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_rcx collection, rcx_list\n  end\n\n  def highlight_non_empty(collection, &rc_block)\n    highlight_rc collection, collection.get_non_empty, &rc_block\n  end\n\n  def highlight_collection ops, id_block=nil, &fv_block\n    g = ops.group_by { |op| fv_block.call(op).collection }\n    tables = g.map do |collection, grouped_ops|\n      rcx_list = grouped_ops.map do |op|\n        fv = fv_block.call(op)\n        id = id_block.call(op) if id_block\n        id ||= fv.sample.id\n        [fv.row, fv.column, id]\n      end\n      tbl = highlight_rcx collection, rcx_list\n      [collection, tbl]\n    end\n    tables\n  end\n\n  def r_c_to_slot collection, r, c\n    rows, cols = collection.dimensions = collection.object_type.rows\n    r*cols + c+1\n  end\n  \n  \n  \n  \n  def create_alpha_numeric_table(collection)\n    size = collection.object_type.rows * collection.object_type.columns\n    slots = (1..size).to_a\n    alpha_r = (\'A\'..\'H\').to_a\n    slots.each_slice(collection.object_type.columns).each_with_index.map do |row, r_idx|\n      row.each_with_index.map do |col, c_idx|\n        {content: \"#{alpha_r[r_idx]}#{c_idx + 1}\", class: \'td-empty-slot\'}\n      end\n    end\n  end\n  \n  def highlight_alpha_rc collection, rc_list, &rc_block\n    rcx_list = rc_list.map { |r, c|\n      block_given? ? [r, c, yield(r, c)] : [r, c, \"\"]\n    }\n    highlight_alpha_rcx(collection, rcx_list)\n  end\n  \n  def highlight_alpha_rcx(collection, rcx_list)\n     tbl = create_alpha_numeric_table(collection)\n     rcx_list.each do |r, c, x|\n         highlight tbl, r, c, x\n     end\n     return tbl\n  end\n\n  def highlight_alpha_non_empty collection, &rc_block\n    highlight_alpha_rc collection, collection.get_non_empty, &rc_block\n  end\n      \nend',3,'Library','2020-03-13 21:33:38','2020-03-13 21:33:38',1),(407,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plates\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 21:33:40','2020-03-13 21:33:40',1),(408,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This Protocol is to Quality check the C-DNA created.\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(QC2_KEY, \"Pass\")\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(QC2_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will assume to pass\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',4,'OperationType','2020-03-13 21:33:42','2020-03-13 21:33:42',1),(409,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n  CON_KEY = \"Stock Conc (ng/ul)\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n  CONC_RANGE = (50...100)\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_concentrations(operations, CONC_RANGE)\n\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n\n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n\n    store_input_collections(operations)\n    rna_prep_steps(working_plate)\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def rna_prep_steps(working_plate)\n    show do\n      title \"Run RNA-Prep\"\n      note \"Run typical RNA-Prep Protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',3,'OperationType','2020-03-13 21:33:43','2020-03-13 21:33:43',1),(410,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n    show do\n      title \"Get and Lable Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{working_plate.id}</b>\"\n    end\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(CON_KEY, rand(50..100))\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(CON_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',2,'OperationType','2020-03-13 21:33:45','2020-03-13 21:33:45',1),(411,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This includes all moduels that validate workflow parameters at run time\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"RNA_Seq/KeywordLib\"\n\nmodule WorkflowValidation\n  include CommonInputOutputNames, KeywordLib\n\n  \n  \n  #Validates that total inputs (from all operations)\n  #Ensures that all inputs doesnt exeed max inputs\n  #\n  # @operations OperationList list of all operations in the job\n  # @inputs_match_outputs Boolean if the number of inputs should match the number of outputs set as true\n  def validate_inputs(operations, inputs_match_outputs = false)\n    total_inputs = []\n    total_outputs = []\n    operations.each do |op|\n      total_inputs = total_inputs + op.input_array(INPUT_ARRAY).map!{|fv| fv.sample}\n      total_outputs = total_outputs + op.output_array(OUTPUT_ARRAY).map!{|fv| fv.sample}\n    end\n\n    a = total_inputs.detect{ |sample| total_inputs.count(sample) > 1}\n    raise \"Sample #{a.id} has been included multiple times in this job\" if a != nil\n    raise \"The number of Input Samples and Output \n            Samples do not match\" if total_inputs.length != total_outputs.length && inputs_match_outputs\n    raise \"Too many samples for this job. Please re-lauch job with fewer samples\" if total_inputs.length > MAX_INPUTS\n    raise \"There are no samples for this job.\"  if total_inputs.length <= 0\n  end\n\n\n  def validate_concentrations(operations, range)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        conc = fv.item.get(CON_KEY)\n        raise \"Sample #{fv.sample.id} doesn\'t have a valid concentration for this operation\"if !range.cover? conc\n      end\n    end\n  end\n\n  def validate_cdna_qc(operations)\n    operations.each do |op|\n      op.input_array(INPUT_ARRAY).each do |fv|\n        qc = fv.item.get(QC2_KEY)\n        raise \"Item #{fv.item.id} doesn\'t have a valid C-DNA QC\" if qc != \"Pass\"\n      end\n    end\n  end\n  \n  \nend',9,'Library','2020-03-13 21:33:48','2020-03-13 21:33:48',1),(412,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This is where all the standard keywords/values will live.\n\nmodule KeywordLib\n    MAX_INPUTS = 96\n    C_TYPE = \"96 Well Sample Plate\"\n    CON_KEY = \"Stock Conc (ng/ul)\"\n    QC2_KEY = \"C-DNA QC\"\nend',11,'Library','2020-03-13 21:33:48','2020-03-13 21:33:48',1),(413,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plates\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 21:47:56','2020-03-13 21:47:56',1),(414,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plates\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 21:47:56','2020-03-13 21:47:56',1),(415,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 21:48:34','2020-03-13 21:48:34',1),(416,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 21:48:34','2020-03-13 21:48:34',1),(417,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 21:49:08','2020-03-13 21:49:08',1),(418,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 21:49:09','2020-03-13 21:49:09',1),(419,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           array_of_input_fv = []\n           operations.each do |op|\n              array_of_input_fv.push(op.outputs.reject{|fv| fv.collection == nil})\n           end\n           table table_of_object_locations(array_of_input_fv, location)\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 21:56:28','2020-03-13 21:56:28',1),(420,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           array_of_input_fv = []\n           operations.each do |op|\n              array_of_input_fv.push(op.outputs.reject{|fv| fv.collection == nil})\n           end\n           table table_of_object_locations(array_of_input_fv, location)\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 21:56:28','2020-03-13 21:56:28',1),(421,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           array_of_input_fv = []\n           operations.each do |op|\n            array_of_input_fv = array_of_input_fv + op.outputs.reject{|fv| fv.collection == nil}\n           end\n           table table_of_object_locations(array_of_input_fv, location)\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 21:58:10','2020-03-13 21:58:10',1),(422,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n#This module is to contain commen actions done with collections\n#This includes moving them, finding locations, putting away individual collections.\n# or putting a whole collection on a machine etc\n#These actions should involve the WHOLE plate not individual wells.  The colleciton is doing the whole action\nmodule CollectionActions\n    \n    #stores all input collections from all operations\n    #\n    # @operations OperationsList the operation list that all input collections should be stored\n    # @location Optional String, the location that the items are to be moved to\n    def store_input_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           operations.each do |op|\n              array_of_input_fv = op.inputs.reject{|fv| fv.collection == nil}\n              table table_of_object_locations(array_of_input_fv, location)\n          end\n        end\n    end\n    \n    #stores all output collections from all operations\n    #\n    # @operations OperationsList the operation list that all output collections should be stored\n    def store_output_collections(operations, location = nil)\n        show do \n           title \"Put Away the Following Items\"\n           array_of_input_fv = []\n           operations.each do |op|\n            array_of_input_fv = array_of_input_fv + op.outputs.reject{|fv| fv.collection == nil}\n           end\n           table table_of_object_locations(array_of_input_fv, location)\n        end\n    end\n    \n    #Shows the locations of all the collections in the array of FV.\n    #Can move the location to optional \"location\"\n    #\n    # array_of_fv Array[FieldValues] an array of FieldValues\n    # @location string Optional moves all collections to that location\n    # Returns\n    # @Table    Table   Returns a Table\n    def table_of_object_locations(array_of_fv, location = nil)\n        obj_array = []\n        array_of_fv.each do |fv|\n            if fv.collection != nil\n                obj_array.push fv.collection\n            elsif fv.item != nil\n                obj_array.push fv.item\n            else\n                raise \"Invalid class.  Neither collection nor item.\"\n            end\n        end\n        obj_array = obj_array.uniq\n        set_locations(obj_array, location) if location != nil\n        return get_item_locations(obj_array)\n    end\n\n\n    #Sets the location of all objects in array to some given locations\n    #\n    # @obj_array  Array[Collection] or Array[Items] an array of any objects that extend class item\n    # @location     String the location to be moved to (just string or Wizard if Wizard Exist)\n    def set_locations(obj_array, location)\n        obj_array.each do |obj|\n            obj.move(location)\n        end\n    end\n    \n    #instructions to store a specific collection\n    #\n    # @collection Collection the collection that is to be put away\n    # Returns:\n    # @ Table of collections and their locations\n    def get_item_locations(obj_array)\n        tab = [[\'ID\', \'Collection Type\', \'Location\']]\n        obj_array.each do |obj|\n            tab.push([obj.id, obj.object_type.name, obj.location])\n        end\n        return tab\n    end\n    \n    #Instructions to store a specific item\n    #\n    # @obj_item Item/Object that extends class item or Array[Item/item that \n    #       extends class item]         all items that need to be stored\n    # @location Optional String Sets the location of the items if included\n    def store_items(obj_item, location = nil)\n        show do\n            title \"Put Away the Following Items\"\n            if obj_item.class != Array\n                set_locations([obj_item], location) if location != nil\n                table get_item_locations([obj_item])\n            else\n                set_locations(obj_item, location) if location != nil\n                table get_item_location(obj_item)\n            end\n        end\n    end\n\n    #Gives directions to throwaway an object (collection or item)\n    #\n    # @obj or array of Item or Object that extends class Item  eg collection\n    # @hazardous boolean if hazardous then true\n    def trash_object(obj_array, hazardous = true)\n        #toss QC plate\n        if obj_array.class != Array\n            obj_array = [obj_array]\n        end\n        \n        show do\n            title \"Trash the following items\"\n            tab = [[\'Item\', \'Waste Container\']]\n            obj_array.each do |obj|\n                obj.mark_as_deleted\n                if hazardous\n                    waste_container = \"Biohazard Waste\"\n                else\n                    waste_container = \"Trash Can\"\n                end\n                tab.push([obj.id, waste_container])\n            end\n            table tab\n        end\n    end\n    \n    \nend',8,'Library','2020-03-13 21:58:10','2020-03-13 21:58:10',1),(423,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 22:03:22','2020-03-13 22:03:22',1),(424,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{C_TYPE}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-13 22:03:22','2020-03-13 22:03:22',1),(425,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = true #multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 22:06:05','2020-03-13 22:06:05',1),(426,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = true #multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 22:06:06','2020-03-13 22:06:06',1),(427,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = true #multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plates\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-13 22:06:06','2020-03-13 22:06:06',1),(428,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{plate.object_type}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-17 01:05:05','2020-03-17 01:05:05',1),(429,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{plate.object_type}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-17 01:05:06','2020-03-17 01:05:06',1),(430,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{plate.object_type}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-17 01:05:06','2020-03-17 01:05:06',1),(431,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{plate.object_type.name}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-17 01:05:44','2020-03-17 01:05:44',1),(432,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{plate.object_type.name}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-17 01:05:44','2020-03-17 01:05:44',1),(433,'source','#Cannon Mallory\n#malloc3@uw.edu\n#\n# This module includes helfpul methods for transferring items into and out of collections\n# Currently it only has collection --> collection transfers \n#TODO Item --> collection and collection --> item transfers. (not applicable for current project so not added)\nmodule CollectionTransfer\n\n\n  #Provides instructions to transfer sample from an input_collection to a working_working collection\n  #The array of samples must exist in both collections.  Both collections must already have the samples\n  #associated with it else an error will be thrown.\n  #\n  # @input_collection Collection  the collection that samples will be transfered from\n  # @working_collection Collection the collection that samples will be transfered to\n  # @transfer_vol Int volume in ul of sample to transfer\n  #\n  # @arry_samples  Array[Sample] Optional an array of all the samples that are to be transfered\n        #if black then all samples will be transfered\n  def transfer_to_working_plate(input_collection, working_collection, arry_sample = nil, transfer_vol)\n    if arry_sample == nil\n      arry_sample = input_collection.parts.map{|part| part.sample if part.class != \"Sample\"}\n    end\n    input_rcx = []\n    output_rcx = []\n    arry_sample.each do |sample|\n      input_location_array = input_collection.find(sample)\n      input_sample_location = get_alpha_num_location(input_collection, sample)\n\n      output_location_array = working_collection.find(sample)\n      output_sample_location = get_alpha_num_location(input_collection, sample)\n\n      input_location_array.each do |sub_array|\n        sub_array.push(input_sample_location)\n        input_rcx.push(sub_array)\n      end\n\n      output_location_array.each do |sub_array|\n          sub_array.push(output_sample_location)\n          output_rcx.push(sub_array)\n      end\n    end\n    show do \n      title \"Transfer from Stock Plate to Working Plate\"\n      note \"Please transfer #{transfer_vol} ul from stock plate (ID:#{input_collection.id}) to working \n                                plate (ID:#{working_collection.id}) per tables below\"\n      note \"Separator\"\n      note \"Stock Plate (ID: #{input_collection.id}):\"\n      table highlight_rcx(input_collection, input_rcx)  #TODO need RCX list for transfer here!! not whole collection\n      note \"Working Plate (ID: #{working_collection}):\"\n      table highlight_rcx(working_collection, output_rcx)\n    end\n  end\n\n\n  #Instructions to transfer from input plates to working_plates when an array of samples in collections is used\n  #Will group samples in same collection together for easier transfer.  Uses transfer_to_working_plate method\n  #\n  # @working_plate Collection (Should have samples already associated to it)\n  # @input_fv_array Array[FieldValues] an array of field values of collections.  Typically from\n        # op.input_array(INPUT_ARRAY_NAME) when the individual inputs are samples in a collection\n  # @transfer_vol Int volume in ul of sample to transfer\n  def transfer_from_array_collections(input_fv_array, working_plate, transfer_vol)\n    sample_arry_by_collection = input_fv_array.group_by{|fv| fv.collection}\n    sample_arry_by_collection.each do |input_collection, fv_array|\n      sample_array = fv_array.map{|fv| fv.sample}\n      transfer_to_working_plate(input_collection, working_plate, sample_array, transfer_vol)\n    end\n  end\n\n\n  #Instructions on relabeling plates to new plate ID\n  #\n  #@plate1 Collection plate to be relabel\n  #@plate2 Collection new plate label\n  def relabel_plate(plate1, plate2)\n    show do\n      title \"Rename Plate\"\n      note \"Relabel plate #{plate1.id} with #{plate2.id}\"\n    end\n  end\n\n\n  #Instructions on getting and labeling new plate\n  #\n  #@plate Collection plate to be gotten and labeled\n  def get_new_plate(plate)\n    show do\n      title \"Get and Label Working Plate\"\n      note \"Get a <b>#{plate.object_type.name}</b> and lable ID: <b>#{plate.id}</b>\"\n    end\n  end\n\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_input_plates?(operations)\n    if get_num_plates(operations, \'input\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #determins if there are multiple output plate\n  #\n  #@operations OperationList list of operations in job\n  #returns boolean true if multiple plates \n  def multi_output_plates?(operations)\n    if get_num_plates(operations, \'output\') > 1\n      return true\n    else\n      return false \n    end\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Int the number of plates \n  def get_num_plates(operations, in_out)\n    return get_array_of_collections(operations, in_out).length\n  end\n\n  #gets the number of plate\n  #\n  #@operations OperationList list of operations in job\n  #@in_out String input or output determines if its input or output collections\n  #returns Array[collection] the number of plates \n  def get_array_of_collections(operations, in_out)\n    collection_array = []\n    operations.each do |op|\n      obj_array = op.inputs if in_out = \"input\"\n      obj_array = op.outputs if in_out = \"output\"\n      obj_array.each do |fv|\n        if fv.collection != nil\n          collection_array.push(fv.collection)\n        end\n      end\n    end\n    return collection_array.uniq\n  end\nend',6,'Library','2020-03-17 01:05:44','2020-03-17 01:05:44',1),(434,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This Protocol is to Quality check the C-DNA created.\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n\n    get_new_plate(working_plate)\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(QC2_KEY, \"Pass\")\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(QC2_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will assume to pass\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',4,'OperationType','2020-03-17 01:13:31','2020-03-17 01:13:31',1),(435,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This Protocol is to Quality check the C-DNA created.\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n\n    get_new_plate(working_plate)\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(QC2_KEY, \"Pass\")\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(QC2_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will assume to pass\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',4,'OperationType','2020-03-17 01:13:31','2020-03-17 01:13:31',1),(436,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This Protocol is to Quality check the C-DNA created.\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement\n  include CollectionActions, WorkflowValidation, CommonInputOutputNames, KeywordLib\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n    validate_inputs(operations)\n    working_plate = Collection.new_collection(C_TYPE)\n\n    get_new_plate(working_plate)\n    \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL)\n    end\n    \n    store_input_collections(operations)\n    take_qc_measurments(working_plate)\n    trash_object(working_plate)\n\n  end\n\n\n  # Instruction on taking the QC measurements themselves.\n  # Currently not operational but associates random concentrations for testing\n  #\n  #TODO complete this and make it actually look at CSV Files\n  def take_qc_measurments(working_plate)\n    input_rcx = []\n    operations.each do |op|\n      input_array = op.input_array(INPUT_ARRAY)\n      input_items = input_array.map{|fv| fv.item}\n      arry_sample = input_array.map{|fv| fv.sample}\n      input_items.each_with_index do |item, idx|\n        item.associate(QC2_KEY, \"Pass\")\n        sample = arry_sample[idx]\n        working_plate_loc_array = working_plate.find(sample)\n        working_plate_loc_array.each do |sub_array|\n          sub_array.push(\"#{item.get(QC2_KEY)}\")\n          input_rcx.push(sub_array)\n        end\n      end\n    end\n\n    show do\n      title \"Perform QC Measurements\"\n      note \"Please Attach excel files\"\n      note \"For testing purposes each sample will assume to pass\"\n      note \"This will eventually come from a CSV file\"\n      table highlight_rcx(working_plate, input_rcx)\n    end\n  end\nend\n',4,'OperationType','2020-03-17 01:13:31','2020-03-17 01:13:31',1),(437,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = true #multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plate\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-17 01:17:04','2020-03-17 01:17:04',1),(438,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = true #multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plate\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-17 01:17:04','2020-03-17 01:17:04',1),(439,'protocol','#Cannon Mallory\n#UW-BIOFAB\n#03/04/2019\n#malloc3@uw.edu\n#\n#\n#This protocol is for total RNA QC.  It Will take in a batch of samples, replate these\n#samples together onto a 96 well plate that will then go through a QC protocols including\n#getting the concentrations of the original sampole.  These concentrations will then be associated\n#with the original sample for use later.\n\n\n#Currently build plate needs a bit of work.  It works by order of input array and not by order of sample location on plate\n\n\nneeds \"Standard Libs/Debug\"\nneeds \"Standard Libs/CommonInputOutputNames\"\nneeds \"Collection_Management/CollectionDisplay\"\nneeds \"Collection_Management/CollectionTransfer\"\nneeds \"Collection_Management/CollectionActions\"\nneeds \"Collection_Management/SampleManagement\"\nneeds \"RNA_Seq/WorkflowValidation\"\nneeds \"RNA_Seq/KeywordLib\"\n\nclass Protocol\n  include Debug, CollectionDisplay, CollectionTransfer, SampleManagement, CollectionActions\n  include WorkflowValidation, CommonInputOutputNames, KeywordLib\n  C_TYPE = \"96 Well Sample Plate\"\n\n  TRANSFER_VOL = 20   #volume of sample to be transfered in ul\n\n\n  def main\n\n    validate_inputs(operations, inputs_match_outputs = true)\n\n    validate_cdna_qc(operations)\n\n    working_plate = Collection.new_collection(C_TYPE)\n\n    multi_plate = true #multi_input_plates?(operations)\n\n    get_new_plate(working_plate) if multi_plate\n  \n    operations.retrieve\n\n    operations.each do |op|\n      input_fv_array = op.input_array(INPUT_ARRAY)\n      output_fv_array = op.output_array(OUTPUT_ARRAY)\n      add_fv_array_samples_to_collection(input_fv_array, working_plate)\n      make_output_plate(output_fv_array, working_plate)\n      transfer_from_array_collections(input_fv_array, working_plate, TRANSFER_VOL) if multi_plate\n    end\n\n    if !multi_plate\n      input_plate = operations.first.input_array(INPUT_ARRAY).first.collection\n      relabel_plate(input_plate,working_plate) if !multi_plate\n      input_plate.mark_as_deleted\n    else\n      trash_object(get_array_of_collections(operations, \'input\')) if multi_plate\n    end\n\n    normalization_pooling(working_plate)\n\n    store_output_collections(operations, \'Freezer\')\n  end\n\n  #Instructions for performing RNA_PREP\n  #\n  # @working_plate collection the plate that has all samples in it\n  def normalization_pooling(working_plate)\n    show do\n      title \"Do the Normalization Pooling Steps\"\n      note \"Run typical Normalization Pooling protocol with plate #{working_plate.id}\"\n      table highlight_non_empty(working_plate)\n    end\n  end\nend\n',5,'OperationType','2020-03-17 01:17:04','2020-03-17 01:17:04',1);
/*!40000 ALTER TABLE `codes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `data_associations`
--

DROP TABLE IF EXISTS `data_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `data_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `parent_class` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `key` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `upload_id` int(11) DEFAULT NULL,
  `object` text COLLATE utf8_unicode_ci,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_data_associations_on_upload_id` (`upload_id`)
) ENGINE=InnoDB AUTO_INCREMENT=650 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `data_associations`
--

LOCK TABLES `data_associations` WRITE;
/*!40000 ALTER TABLE `data_associations` DISABLE KEYS */;
INSERT INTO `data_associations` VALUES (1,2,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 1, 0 was changed from 2 to 3.\"}','2020-03-11 16:19:52','2020-03-11 16:19:52'),(2,2,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 1, 0 was changed from 3 to 2.\"}','2020-03-11 16:20:05','2020-03-11 16:20:05'),(3,2,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 4, 0 was changed from 2 to 5.\"}','2020-03-11 16:20:49','2020-03-11 16:20:49'),(4,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 16:32:07','2020-03-11 16:32:07'),(5,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:23:53','2020-03-11 17:23:53'),(6,1,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 103 crashed\"}','2020-03-11 17:26:00','2020-03-13 19:49:41'),(7,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:26:39','2020-03-11 17:26:39'),(8,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:27:45','2020-03-11 17:27:45'),(9,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:29:55','2020-03-11 17:29:55'),(10,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:30:50','2020-03-11 17:30:50'),(11,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:32:08','2020-03-11 17:32:08'),(12,2,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 0, 1 was changed from 1 to 292.\"}','2020-03-11 17:32:56','2020-03-11 17:32:56'),(13,2,'Plan','replan',NULL,'{\"replan\":\"Based on plan 1. Replanned 2020-03-11.\"}','2020-03-11 17:33:15','2020-03-11 17:33:15'),(14,2,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 0, 1 was changed from 1 to 292.\"}','2020-03-11 17:34:15','2020-03-11 17:34:15'),(15,2,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 0, 1 was changed from 1 to 292.\"}','2020-03-11 17:34:32','2020-03-11 17:34:32'),(16,2,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 0, 1 was deleted. It used to be sample 1 via deleted part 47.\"}','2020-03-11 17:34:41','2020-03-11 17:34:41'),(17,2,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 1, 1 was deleted. It used to be sample 292 via deleted part 84.\"}','2020-03-11 17:34:44','2020-03-11 17:34:44'),(18,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:35:23','2020-03-11 17:35:23'),(19,2,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:36:46','2020-03-11 17:36:46'),(20,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:36:50','2020-03-11 17:36:50'),(21,2,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:37:13','2020-03-11 17:37:13'),(22,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 17:48:01','2020-03-11 17:48:01'),(23,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 20:47:59','2020-03-11 20:47:59'),(24,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 20:49:34','2020-03-11 20:49:34'),(25,160,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 1, 1 was changed from 17 to 18.\"}','2020-03-11 20:52:07','2020-03-11 20:52:07'),(26,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 1, 1 was deleted. It used to be sample 17 via deleted part 170.\"}','2020-03-11 20:52:10','2020-03-11 20:52:10'),(27,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 0, 2 was deleted. It used to be sample 23 via deleted part 178.\"}','2020-03-11 20:53:15','2020-03-11 20:53:15'),(28,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 1, 0 was deleted. It used to be sample 10 via deleted part 162.\"}','2020-03-11 20:59:10','2020-03-11 20:59:10'),(29,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 2, 0 was deleted. It used to be sample 11 via deleted part 163.\"}','2020-03-11 20:59:16','2020-03-11 20:59:16'),(30,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 3, 0 was deleted. It used to be sample 12 via deleted part 164.\"}','2020-03-11 21:02:30','2020-03-11 21:02:30'),(31,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 4, 0 was deleted. It used to be sample 13 via deleted part 165.\"}','2020-03-11 21:02:48','2020-03-11 21:02:48'),(32,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 1, 1 was deleted. It used to be sample 18 via deleted part 171.\"}','2020-03-11 21:03:16','2020-03-11 21:03:16'),(33,160,'Collection','Sample Reassigned',NULL,'{\"Sample Reassigned\":\"The sample at 2, 1 was changed from 19 to 21.\"}','2020-03-11 21:03:26','2020-03-11 21:03:26'),(34,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 2, 1 was deleted. It used to be sample 19 via deleted part 172.\"}','2020-03-11 21:03:30','2020-03-11 21:03:30'),(35,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 3, 1 was deleted. It used to be sample 20 via deleted part 173.\"}','2020-03-11 21:03:37','2020-03-11 21:03:37'),(36,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 4, 1 was deleted. It used to be sample 21 via deleted part 174.\"}','2020-03-11 21:03:54','2020-03-11 21:03:54'),(37,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 5, 1 was deleted. It used to be sample 22 via deleted part 175.\"}','2020-03-11 21:04:20','2020-03-11 21:04:20'),(38,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 6, 1 was deleted. It used to be sample 23 via deleted part 176.\"}','2020-03-11 21:04:47','2020-03-11 21:04:47'),(39,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 7, 1 was deleted. It used to be sample 24 via deleted part 177.\"}','2020-03-11 21:04:58','2020-03-11 21:04:58'),(40,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 0, 2 was deleted. It used to be sample 25 via deleted part 179.\"}','2020-03-11 21:05:07','2020-03-11 21:05:07'),(41,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 1, 2 was deleted. It used to be sample 26 via deleted part 180.\"}','2020-03-11 21:05:10','2020-03-11 21:05:10'),(42,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 2, 2 was deleted. It used to be sample 27 via deleted part 181.\"}','2020-03-11 21:05:12','2020-03-11 21:05:12'),(43,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 3, 2 was deleted. It used to be sample 28 via deleted part 182.\"}','2020-03-11 21:05:15','2020-03-11 21:05:15'),(44,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 4, 2 was deleted. It used to be sample 29 via deleted part 183.\"}','2020-03-11 21:05:20','2020-03-11 21:05:20'),(45,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 5, 2 was deleted. It used to be sample 30 via deleted part 184.\"}','2020-03-11 21:05:23','2020-03-11 21:05:23'),(46,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 6, 2 was deleted. It used to be sample 31 via deleted part 185.\"}','2020-03-11 21:05:26','2020-03-11 21:05:26'),(47,160,'Collection','Part Deleted',NULL,'{\"Part Deleted\":\"The sample at 7, 2 was deleted. It used to be sample 32 via deleted part 186.\"}','2020-03-11 21:05:29','2020-03-11 21:05:29'),(48,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:07:55','2020-03-11 21:07:55'),(49,3,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:08:04','2020-03-11 21:08:04'),(50,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:12:12','2020-03-11 21:12:12'),(51,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:25:28','2020-03-11 21:25:28'),(52,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:31:04','2020-03-11 21:31:04'),(53,3,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:31:09','2020-03-11 21:31:09'),(54,2,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:31:13','2020-03-11 21:31:13'),(55,2,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 20 crashed\"}','2020-03-11 21:31:45','2020-03-11 21:31:45'),(56,3,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 20 crashed\"}','2020-03-11 21:31:45','2020-03-11 21:31:45'),(57,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:32:27','2020-03-11 21:32:27'),(58,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:53:41','2020-03-11 21:53:41'),(59,2,'Item','Stock Conc (ng/ul)',NULL,'{\"Stock Conc (ng/ul)\":99}','2020-03-11 21:53:54','2020-03-17 01:48:02'),(60,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:55:42','2020-03-11 21:55:42'),(61,2,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 21:59:58','2020-03-11 21:59:58'),(62,3,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:00:23','2020-03-11 22:00:23'),(63,160,'Item','Stock Conc (ng/ul)',NULL,'{\"Stock Conc (ng/ul)\":89}','2020-03-11 22:00:35','2020-03-17 01:45:50'),(64,3,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:00:46','2020-03-11 22:00:46'),(65,2,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:00:50','2020-03-11 22:00:50'),(66,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:00:53','2020-03-11 22:00:53'),(67,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:06:36','2020-03-11 22:06:36'),(68,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:09:23','2020-03-11 22:09:23'),(69,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:10:47','2020-03-11 22:10:47'),(70,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-11 by Joe Neptune\"}','2020-03-11 22:11:44','2020-03-11 22:11:44'),(71,4,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 85 crashed\"}','2020-03-12 22:21:37','2020-03-13 18:49:11'),(72,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:26:54','2020-03-12 22:26:54'),(73,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:28:07','2020-03-12 22:28:07'),(74,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:28:49','2020-03-12 22:28:49'),(75,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:32:07','2020-03-12 22:32:07'),(76,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:32:53','2020-03-12 22:32:53'),(77,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:34:08','2020-03-12 22:34:08'),(78,4,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 419, 420, 421, 422, 423\"}','2020-03-12 22:34:08','2020-03-12 22:34:08'),(79,419,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-12 22:34:08','2020-03-12 22:34:08'),(80,420,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-12 22:34:08','2020-03-12 22:34:08'),(81,421,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-12 22:34:08','2020-03-12 22:34:08'),(82,422,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-12 22:34:08','2020-03-12 22:34:08'),(83,423,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-12 22:34:08','2020-03-12 22:34:08'),(84,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:37:15','2020-03-12 22:37:15'),(85,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 431, 432, 433, 434\"}','2020-03-12 22:37:15','2020-03-12 22:37:15'),(86,431,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:37:15','2020-03-12 22:37:15'),(87,432,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:37:15','2020-03-12 22:37:15'),(88,433,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:37:15','2020-03-12 22:37:15'),(89,434,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:37:15','2020-03-12 22:37:15'),(90,11,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 109 crashed\"}','2020-03-12 22:37:20','2020-03-13 20:20:22'),(91,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:38:19','2020-03-12 22:38:19'),(92,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 436, 437, 438, 439\"}','2020-03-12 22:38:19','2020-03-12 22:38:19'),(93,436,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:38:19','2020-03-12 22:38:19'),(94,437,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:38:19','2020-03-12 22:38:19'),(95,438,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:38:19','2020-03-12 22:38:19'),(96,439,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:38:19','2020-03-12 22:38:19'),(97,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:45:11','2020-03-12 22:45:11'),(98,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 441, 442, 443, 444\"}','2020-03-12 22:45:11','2020-03-12 22:45:11'),(99,441,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:11','2020-03-12 22:45:11'),(100,442,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:11','2020-03-12 22:45:11'),(101,443,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:11','2020-03-12 22:45:11'),(102,444,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:11','2020-03-12 22:45:11'),(103,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:45:32','2020-03-12 22:45:32'),(104,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 441, 442, 443, 444\"}','2020-03-12 22:45:32','2020-03-12 22:45:32'),(105,441,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:45:32','2020-03-12 22:45:32'),(106,442,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:45:32','2020-03-12 22:45:32'),(107,443,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:45:32','2020-03-12 22:45:32'),(108,444,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:45:32','2020-03-12 22:45:32'),(109,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:45:51','2020-03-12 22:45:51'),(110,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 447, 448, 449, 450\"}','2020-03-12 22:45:51','2020-03-12 22:45:51'),(111,447,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:51','2020-03-12 22:45:51'),(112,448,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:51','2020-03-12 22:45:51'),(113,449,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:51','2020-03-12 22:45:51'),(114,450,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:45:51','2020-03-12 22:45:51'),(115,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:55:22','2020-03-12 22:55:22'),(116,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 451, 451, 451, 451\"}','2020-03-12 22:55:22','2020-03-12 22:55:22'),(117,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:55:22','2020-03-12 22:55:22'),(118,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:55:22','2020-03-12 22:55:22'),(119,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:55:22','2020-03-12 22:55:22'),(120,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-12 22:55:22','2020-03-12 22:55:22'),(121,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:56:02','2020-03-12 22:56:02'),(122,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 451, 451, 451, 451\"}','2020-03-12 22:56:02','2020-03-12 22:56:02'),(123,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:56:02','2020-03-12 22:56:02'),(124,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:56:02','2020-03-12 22:56:02'),(125,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:56:02','2020-03-12 22:56:02'),(126,451,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-12 22:56:02','2020-03-12 22:56:02'),(127,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 22:56:24','2020-03-12 22:56:24'),(128,11,'Plan','replan',NULL,'{\"replan\":\"Based on plan 10. Replanned 2020-03-12.\"}','2020-03-12 22:57:17','2020-03-12 22:57:17'),(129,12,'Plan','replan',NULL,'{\"replan\":\"Based on plan 10. Replanned 2020-03-12.\"}','2020-03-12 22:58:47','2020-03-12 22:58:47'),(130,13,'Plan','replan',NULL,'{\"replan\":\"Based on plan 11. Replanned 2020-03-12.\"}','2020-03-12 22:58:58','2020-03-12 22:58:58'),(131,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-12 by Joe Neptune\"}','2020-03-12 23:16:42','2020-03-12 23:16:42'),(132,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 469, 469, 469, 469\"}','2020-03-12 23:16:42','2020-03-12 23:16:42'),(133,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-12 23:16:42','2020-03-12 23:16:42'),(134,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-12 23:16:42','2020-03-12 23:16:42'),(135,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-12 23:16:42','2020-03-12 23:16:42'),(136,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-12 23:16:42','2020-03-12 23:16:42'),(137,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 15:36:41','2020-03-13 15:36:41'),(138,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 479, 479, 479, 479\"}','2020-03-13 15:36:41','2020-03-13 15:36:41'),(139,479,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:36:41','2020-03-13 15:36:41'),(140,479,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:36:41','2020-03-13 15:36:41'),(141,479,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:36:41','2020-03-13 15:36:41'),(142,479,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:36:41','2020-03-13 15:36:41'),(143,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 15:37:49','2020-03-13 15:37:49'),(144,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 484, 484, 484, 484\"}','2020-03-13 15:37:49','2020-03-13 15:37:49'),(145,484,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:37:49','2020-03-13 15:37:49'),(146,484,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:37:49','2020-03-13 15:37:49'),(147,484,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:37:49','2020-03-13 15:37:49'),(148,484,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:37:49','2020-03-13 15:37:49'),(149,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 15:39:08','2020-03-13 15:39:08'),(150,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 489, 489, 489, 489\"}','2020-03-13 15:39:08','2020-03-13 15:39:08'),(151,489,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:39:08','2020-03-13 15:39:08'),(152,489,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:39:08','2020-03-13 15:39:08'),(153,489,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:39:08','2020-03-13 15:39:08'),(154,489,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:39:08','2020-03-13 15:39:08'),(155,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 15:40:08','2020-03-13 15:40:08'),(156,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 494, 494, 494, 494\"}','2020-03-13 15:40:08','2020-03-13 15:40:08'),(157,494,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:08','2020-03-13 15:40:08'),(158,494,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:08','2020-03-13 15:40:08'),(159,494,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:08','2020-03-13 15:40:08'),(160,494,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:08','2020-03-13 15:40:08'),(161,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 15:40:51','2020-03-13 15:40:51'),(162,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 499, 499, 499, 499\"}','2020-03-13 15:40:51','2020-03-13 15:40:51'),(163,499,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:51','2020-03-13 15:40:51'),(164,499,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:51','2020-03-13 15:40:51'),(165,499,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:51','2020-03-13 15:40:51'),(166,499,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:40:51','2020-03-13 15:40:51'),(167,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 15:42:13','2020-03-13 15:42:13'),(168,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 504, 504, 504, 504\"}','2020-03-13 15:42:13','2020-03-13 15:42:13'),(169,504,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:42:13','2020-03-13 15:42:13'),(170,504,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:42:13','2020-03-13 15:42:13'),(171,504,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:42:13','2020-03-13 15:42:13'),(172,504,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:42:13','2020-03-13 15:42:13'),(173,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 15:43:28','2020-03-13 15:43:28'),(174,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 509, 509, 509, 509\"}','2020-03-13 15:43:28','2020-03-13 15:43:28'),(175,509,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:43:28','2020-03-13 15:43:28'),(176,509,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:43:28','2020-03-13 15:43:28'),(177,509,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:43:28','2020-03-13 15:43:28'),(178,509,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 15:43:28','2020-03-13 15:43:28'),(179,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 17:39:06','2020-03-13 17:39:06'),(180,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 514, 514, 514, 514\"}','2020-03-13 17:39:06','2020-03-13 17:39:06'),(181,514,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:39:06','2020-03-13 17:39:06'),(182,514,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:39:06','2020-03-13 17:39:06'),(183,514,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:39:06','2020-03-13 17:39:06'),(184,514,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:39:06','2020-03-13 17:39:06'),(185,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 17:42:37','2020-03-13 17:42:37'),(186,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 519, 519, 519, 519\"}','2020-03-13 17:42:37','2020-03-13 17:42:37'),(187,519,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:42:37','2020-03-13 17:42:37'),(188,519,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:42:37','2020-03-13 17:42:37'),(189,519,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:42:37','2020-03-13 17:42:37'),(190,519,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:42:37','2020-03-13 17:42:37'),(191,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 17:47:56','2020-03-13 17:47:56'),(192,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 524, 524, 524, 524\"}','2020-03-13 17:47:56','2020-03-13 17:47:56'),(193,524,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:47:56','2020-03-13 17:47:56'),(194,524,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:47:56','2020-03-13 17:47:56'),(195,524,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:47:56','2020-03-13 17:47:56'),(196,524,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 17:47:56','2020-03-13 17:47:56'),(197,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:04:06','2020-03-13 18:04:06'),(198,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 529, 529, 529, 529\"}','2020-03-13 18:04:07','2020-03-13 18:04:07'),(199,529,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:04:07','2020-03-13 18:04:07'),(200,529,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:04:07','2020-03-13 18:04:07'),(201,529,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:04:07','2020-03-13 18:04:07'),(202,529,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:04:07','2020-03-13 18:04:07'),(203,13,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 67 was aborted\"}','2020-03-13 18:04:49','2020-03-13 18:10:30'),(204,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:04:56','2020-03-13 18:04:56'),(205,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 534, 534, 534, 534\"}','2020-03-13 18:04:56','2020-03-13 18:04:56'),(206,534,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:04:56','2020-03-13 18:04:56'),(207,534,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:04:56','2020-03-13 18:04:56'),(208,534,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:04:56','2020-03-13 18:04:56'),(209,534,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:04:56','2020-03-13 18:04:56'),(210,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:07:42','2020-03-13 18:07:42'),(211,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 539, 539, 539, 539\"}','2020-03-13 18:07:42','2020-03-13 18:07:42'),(212,539,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:07:42','2020-03-13 18:07:42'),(213,539,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:07:42','2020-03-13 18:07:42'),(214,539,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:07:42','2020-03-13 18:07:42'),(215,539,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:07:42','2020-03-13 18:07:42'),(216,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:10:36','2020-03-13 18:10:36'),(217,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 544, 544, 544, 544\"}','2020-03-13 18:10:36','2020-03-13 18:10:36'),(218,544,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:10:36','2020-03-13 18:10:36'),(219,544,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:10:36','2020-03-13 18:10:36'),(220,544,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:10:36','2020-03-13 18:10:36'),(221,544,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:10:36','2020-03-13 18:10:36'),(222,13,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 98 crashed\"}','2020-03-13 18:10:42','2020-03-13 19:24:30'),(223,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:11:34','2020-03-13 18:11:34'),(224,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:11:54','2020-03-13 18:11:54'),(225,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:13:47','2020-03-13 18:13:47'),(226,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 551, 551, 551, 551\"}','2020-03-13 18:13:47','2020-03-13 18:13:47'),(227,551,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:13:47','2020-03-13 18:13:47'),(228,551,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:13:47','2020-03-13 18:13:47'),(229,551,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:13:47','2020-03-13 18:13:47'),(230,551,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:13:47','2020-03-13 18:13:47'),(231,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:15:53','2020-03-13 18:15:53'),(232,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 556, 556, 556, 556\"}','2020-03-13 18:15:53','2020-03-13 18:15:53'),(233,556,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:15:53','2020-03-13 18:15:53'),(234,556,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:15:53','2020-03-13 18:15:53'),(235,556,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:15:53','2020-03-13 18:15:53'),(236,556,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:15:53','2020-03-13 18:15:53'),(237,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:16:14','2020-03-13 18:16:14'),(238,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 561, 561, 561, 561\"}','2020-03-13 18:16:14','2020-03-13 18:16:14'),(239,561,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:16:14','2020-03-13 18:16:14'),(240,561,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:16:14','2020-03-13 18:16:14'),(241,561,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:16:14','2020-03-13 18:16:14'),(242,561,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 18:16:14','2020-03-13 18:16:14'),(243,14,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:16:19','2020-03-13 18:16:19'),(244,14,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 469, 469, 469, 469, 469\"}','2020-03-13 18:16:19','2020-03-13 18:16:19'),(245,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from done.\"}','2020-03-13 18:16:19','2020-03-13 18:16:19'),(246,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from done.\"}','2020-03-13 18:16:19','2020-03-13 18:16:19'),(247,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from done.\"}','2020-03-13 18:16:19','2020-03-13 18:16:19'),(248,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from done.\"}','2020-03-13 18:16:19','2020-03-13 18:16:19'),(249,469,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from done.\"}','2020-03-13 18:16:19','2020-03-13 18:16:19'),(250,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:16:23','2020-03-13 18:16:23'),(251,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 463, 463, 463, 463, 463\"}','2020-03-13 18:16:23','2020-03-13 18:16:23'),(252,463,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 18:16:23','2020-03-13 18:16:23'),(253,463,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 18:16:23','2020-03-13 18:16:23'),(254,463,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 18:16:23','2020-03-13 18:16:23'),(255,463,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 18:16:23','2020-03-13 18:16:23'),(256,463,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 18:16:23','2020-03-13 18:16:23'),(257,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:16:26','2020-03-13 18:16:26'),(258,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 458, 458, 458, 458\"}','2020-03-13 18:16:26','2020-03-13 18:16:26'),(259,458,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 18:16:26','2020-03-13 18:16:26'),(260,458,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 18:16:26','2020-03-13 18:16:26'),(261,458,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 18:16:26','2020-03-13 18:16:26'),(262,458,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 18:16:26','2020-03-13 18:16:26'),(263,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:16:30','2020-03-13 18:16:30'),(264,4,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 425, 426, 427, 428, 429\"}','2020-03-13 18:16:30','2020-03-13 18:16:30'),(265,425,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-13 18:16:30','2020-03-13 18:16:30'),(266,426,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-13 18:16:30','2020-03-13 18:16:30'),(267,427,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-13 18:16:30','2020-03-13 18:16:30'),(268,428,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-13 18:16:30','2020-03-13 18:16:30'),(269,429,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from done.\"}','2020-03-13 18:16:30','2020-03-13 18:16:30'),(270,12,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 97 crashed\"}','2020-03-13 18:20:59','2020-03-13 19:23:45'),(271,14,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 89 crashed\"}','2020-03-13 18:20:59','2020-03-13 19:10:51'),(272,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(273,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(274,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(275,14,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(276,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(277,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 567, 567, 567, 567\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(278,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 567, 567, 567, 567, 567\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(279,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 567, 567, 567, 567\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(280,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(281,14,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 567, 567, 567, 567, 567\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(282,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(283,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(284,4,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 425, 426, 427, 428, 429\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(285,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(286,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(287,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(288,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(289,425,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(290,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(291,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(292,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(293,426,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(294,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(295,427,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(296,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(297,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(298,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(299,428,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(300,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(301,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(302,429,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 4 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(303,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(304,567,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:21:45','2020-03-13 18:21:45'),(305,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(306,14,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(307,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(308,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(309,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(310,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 592, 592, 592, 592, 592\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(311,592,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(312,592,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(313,592,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(314,14,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 603, 603, 603, 603, 603\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(315,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 598, 598, 598, 598\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(316,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 587, 587, 587, 587\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(317,592,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(318,592,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(319,603,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(320,598,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(321,587,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(322,598,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(323,603,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(324,587,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(325,598,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(326,603,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(327,587,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(328,598,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(329,603,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(330,587,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(331,603,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:27:22','2020-03-13 18:27:22'),(332,4,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(333,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(334,14,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(335,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 610, 610, 610, 610\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(336,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(337,610,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(338,610,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(339,610,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(340,14,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 626, 626, 626, 626, 626\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(341,610,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(342,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 615, 615, 615, 615, 615\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(343,626,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(344,615,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(345,626,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(346,615,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(347,626,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(348,615,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(349,626,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(350,615,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(351,626,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 14 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(352,615,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:48:47','2020-03-13 18:48:47'),(353,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 18:59:44','2020-03-13 18:59:44'),(354,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 638, 638, 638, 638, 638\"}','2020-03-13 18:59:44','2020-03-13 18:59:44'),(355,638,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:59:44','2020-03-13 18:59:44'),(356,638,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:59:44','2020-03-13 18:59:44'),(357,638,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:59:44','2020-03-13 18:59:44'),(358,638,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:59:44','2020-03-13 18:59:44'),(359,638,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 18:59:44','2020-03-13 18:59:44'),(360,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:11:37','2020-03-13 19:11:37'),(361,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 644, 644, 644, 644, 644\"}','2020-03-13 19:11:37','2020-03-13 19:11:37'),(362,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 19:11:37','2020-03-13 19:11:37'),(363,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 19:11:37','2020-03-13 19:11:37'),(364,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 19:11:37','2020-03-13 19:11:37'),(365,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 19:11:37','2020-03-13 19:11:37'),(366,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from done.\"}','2020-03-13 19:11:37','2020-03-13 19:11:37'),(367,12,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 93 was aborted\"}','2020-03-13 19:13:02','2020-03-13 19:20:32'),(368,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:13:06','2020-03-13 19:13:06'),(369,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 644, 644, 644, 644, 644\"}','2020-03-13 19:13:06','2020-03-13 19:13:06'),(370,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:13:06','2020-03-13 19:13:06'),(371,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:13:06','2020-03-13 19:13:06'),(372,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:13:06','2020-03-13 19:13:06'),(373,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:13:06','2020-03-13 19:13:06'),(374,644,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:13:06','2020-03-13 19:13:06'),(375,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:17:42','2020-03-13 19:17:42'),(376,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:17:45','2020-03-13 19:17:45'),(377,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:18:50','2020-03-13 19:18:50'),(378,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:20:50','2020-03-13 19:20:50'),(379,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 633, 633, 633, 633\"}','2020-03-13 19:20:50','2020-03-13 19:20:50'),(380,633,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:20:50','2020-03-13 19:20:50'),(381,633,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:20:50','2020-03-13 19:20:50'),(382,633,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:20:50','2020-03-13 19:20:50'),(383,633,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:20:50','2020-03-13 19:20:50'),(384,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:22:09','2020-03-13 19:22:09'),(385,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 656, 656, 656, 656\"}','2020-03-13 19:22:09','2020-03-13 19:22:09'),(386,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:22:09','2020-03-13 19:22:09'),(387,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:22:09','2020-03-13 19:22:09'),(388,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:22:09','2020-03-13 19:22:09'),(389,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:22:09','2020-03-13 19:22:09'),(390,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:23:19','2020-03-13 19:23:19'),(391,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 656, 656, 656, 656\"}','2020-03-13 19:23:19','2020-03-13 19:23:19'),(392,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:23:19','2020-03-13 19:23:19'),(393,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:23:19','2020-03-13 19:23:19'),(394,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:23:19','2020-03-13 19:23:19'),(395,656,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:23:19','2020-03-13 19:23:19'),(396,12,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:23:41','2020-03-13 19:23:41'),(397,12,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 650, 650, 650, 650, 650\"}','2020-03-13 19:23:41','2020-03-13 19:23:41'),(398,650,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:23:41','2020-03-13 19:23:41'),(399,650,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:23:41','2020-03-13 19:23:41'),(400,650,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:23:41','2020-03-13 19:23:41'),(401,650,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:23:41','2020-03-13 19:23:41'),(402,650,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 12 when its status was changed to pending from error.\"}','2020-03-13 19:23:41','2020-03-13 19:23:41'),(403,13,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:24:21','2020-03-13 19:24:21'),(404,13,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 621, 621, 621, 621\"}','2020-03-13 19:24:21','2020-03-13 19:24:21'),(405,621,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 19:24:21','2020-03-13 19:24:21'),(406,621,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 19:24:21','2020-03-13 19:24:21'),(407,621,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 19:24:21','2020-03-13 19:24:21'),(408,621,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 13 when its status was changed to pending from done.\"}','2020-03-13 19:24:21','2020-03-13 19:24:21'),(409,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:24:25','2020-03-13 19:24:25'),(410,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 661, 661, 661, 661\"}','2020-03-13 19:24:25','2020-03-13 19:24:25'),(411,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:24:25','2020-03-13 19:24:25'),(412,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:24:25','2020-03-13 19:24:25'),(413,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:24:25','2020-03-13 19:24:25'),(414,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 19:24:25','2020-03-13 19:24:25'),(415,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:32:40','2020-03-13 19:32:40'),(416,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:34:41','2020-03-13 19:34:41'),(417,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 661, 661, 661, 661\"}','2020-03-13 19:34:41','2020-03-13 19:34:41'),(418,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:34:41','2020-03-13 19:34:41'),(419,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:34:41','2020-03-13 19:34:41'),(420,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:34:41','2020-03-13 19:34:41'),(421,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:34:41','2020-03-13 19:34:41'),(422,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:43:10','2020-03-13 19:43:10'),(423,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:43:15','2020-03-13 19:43:15'),(424,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 661, 661, 661, 661\"}','2020-03-13 19:43:15','2020-03-13 19:43:15'),(425,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:43:15','2020-03-13 19:43:15'),(426,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:43:15','2020-03-13 19:43:15'),(427,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:43:15','2020-03-13 19:43:15'),(428,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:43:15','2020-03-13 19:43:15'),(429,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:49:33','2020-03-13 19:49:33'),(430,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:49:37','2020-03-13 19:49:37'),(431,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 661, 661, 661, 661\"}','2020-03-13 19:49:37','2020-03-13 19:49:37'),(432,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:49:37','2020-03-13 19:49:37'),(433,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:49:37','2020-03-13 19:49:37'),(434,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:49:37','2020-03-13 19:49:37'),(435,661,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 19:49:37','2020-03-13 19:49:37'),(436,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 19:50:36','2020-03-13 19:50:36'),(437,1,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:04:01','2020-03-13 20:04:01'),(438,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:17:53','2020-03-13 20:17:53'),(439,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 666, 666, 666, 666\"}','2020-03-13 20:17:53','2020-03-13 20:17:53'),(440,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 20:17:53','2020-03-13 20:17:53'),(441,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 20:17:53','2020-03-13 20:17:53'),(442,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 20:17:53','2020-03-13 20:17:53'),(443,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from done.\"}','2020-03-13 20:17:53','2020-03-13 20:17:53'),(444,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:18:25','2020-03-13 20:18:25'),(445,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 666, 666, 666, 666\"}','2020-03-13 20:18:25','2020-03-13 20:18:25'),(446,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:18:25','2020-03-13 20:18:25'),(447,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:18:25','2020-03-13 20:18:25'),(448,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:18:25','2020-03-13 20:18:25'),(449,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:18:25','2020-03-13 20:18:25'),(450,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:20:17','2020-03-13 20:20:17'),(451,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 666, 666, 666, 666\"}','2020-03-13 20:20:17','2020-03-13 20:20:17'),(452,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:20:17','2020-03-13 20:20:17'),(453,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:20:17','2020-03-13 20:20:17'),(454,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:20:17','2020-03-13 20:20:17'),(455,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:20:17','2020-03-13 20:20:17'),(456,11,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:21:03','2020-03-13 20:21:03'),(457,11,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 666, 666, 666, 666\"}','2020-03-13 20:21:03','2020-03-13 20:21:03'),(458,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:21:03','2020-03-13 20:21:03'),(459,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:21:03','2020-03-13 20:21:03'),(460,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:21:03','2020-03-13 20:21:03'),(461,666,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 11 when its status was changed to pending from error.\"}','2020-03-13 20:21:03','2020-03-13 20:21:03'),(462,17,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 114 crashed\"}','2020-03-13 20:34:21','2020-03-13 20:35:19'),(463,17,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:35:08','2020-03-13 20:35:08'),(464,17,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:35:10','2020-03-13 20:35:10'),(465,15,'Plan','replan',NULL,'{\"replan\":\"Based on plan 14. Replanned 2020-03-13.\"}','2020-03-13 20:37:00','2020-03-13 20:37:00'),(466,16,'Plan','replan',NULL,'{\"replan\":\"Based on plan 15. Replanned 2020-03-13.\"}','2020-03-13 20:37:18','2020-03-13 20:37:18'),(467,19,'Operation','canceled_via_designer',NULL,'{\"canceled_via_designer\":\"Canceled by Joe Neptune\"}','2020-03-13 20:37:45','2020-03-13 20:37:45'),(468,19,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to error on 2020-03-13 by Joe Neptune\"}','2020-03-13 20:37:45','2020-03-13 20:37:45'),(469,710,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-13 20:41:19','2020-03-13 20:41:19'),(470,718,'Item','Stock Conc (ng/ul)',NULL,'{\"Stock Conc (ng/ul)\":81}','2020-03-13 21:46:07','2020-03-13 21:59:38'),(471,726,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-13 21:46:48','2020-03-13 21:46:48'),(472,27,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 152 crashed\"}','2020-03-13 21:46:58','2020-03-17 01:17:16'),(473,27,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:48:02','2020-03-13 21:48:02'),(474,27,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:48:38','2020-03-13 21:48:38'),(475,27,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 734, 734, 734\"}','2020-03-13 21:48:38','2020-03-13 21:48:38'),(476,734,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from error.\"}','2020-03-13 21:48:38','2020-03-13 21:48:38'),(477,734,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from error.\"}','2020-03-13 21:48:38','2020-03-13 21:48:38'),(478,734,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from error.\"}','2020-03-13 21:48:38','2020-03-13 21:48:38'),(479,27,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:51:12','2020-03-13 21:51:12'),(480,27,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 738, 738, 738\"}','2020-03-13 21:51:12','2020-03-13 21:51:12'),(481,738,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from done.\"}','2020-03-13 21:51:12','2020-03-13 21:51:12'),(482,738,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from done.\"}','2020-03-13 21:51:12','2020-03-13 21:51:12'),(483,738,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from done.\"}','2020-03-13 21:51:12','2020-03-13 21:51:12'),(484,30,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:51:33','2020-03-13 21:51:33'),(485,30,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 152 crashed\"}','2020-03-13 21:51:37','2020-03-17 01:17:16'),(486,18,'Plan','replan',NULL,'{\"replan\":\"Based on plan 16. Replanned 2020-03-13.\"}','2020-03-13 21:52:12','2020-03-13 21:52:12'),(487,19,'Plan','replan',NULL,'{\"replan\":\"Based on plan 17. Replanned 2020-03-13.\"}','2020-03-13 21:52:22','2020-03-13 21:52:22'),(488,749,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-13 21:54:34','2020-03-13 21:54:34'),(489,753,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-13 21:54:34','2020-03-13 21:54:34'),(490,34,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:56:51','2020-03-13 21:56:51'),(491,34,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 764, 764, 764\"}','2020-03-13 21:56:51','2020-03-13 21:56:51'),(492,764,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 34 when its status was changed to pending from done.\"}','2020-03-13 21:56:51','2020-03-13 21:56:51'),(493,764,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 34 when its status was changed to pending from done.\"}','2020-03-13 21:56:51','2020-03-13 21:56:51'),(494,764,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 34 when its status was changed to pending from done.\"}','2020-03-13 21:56:51','2020-03-13 21:56:51'),(495,36,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:56:54','2020-03-13 21:56:54'),(496,36,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 764, 764, 764\"}','2020-03-13 21:56:54','2020-03-13 21:56:54'),(497,764,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 36 when its status was changed to pending from done.\"}','2020-03-13 21:56:54','2020-03-13 21:56:54'),(498,764,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 36 when its status was changed to pending from done.\"}','2020-03-13 21:56:54','2020-03-13 21:56:54'),(499,764,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 36 when its status was changed to pending from done.\"}','2020-03-13 21:56:54','2020-03-13 21:56:54'),(500,34,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 131 crashed\"}','2020-03-13 21:57:26','2020-03-13 21:57:26'),(501,36,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 131 crashed\"}','2020-03-13 21:57:26','2020-03-13 21:57:26'),(502,36,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(503,34,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(504,36,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 771, 771, 771\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(505,771,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 36 when its status was changed to pending from error.\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(506,34,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 771, 771, 771\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(507,771,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 34 when its status was changed to pending from error.\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(508,771,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 36 when its status was changed to pending from error.\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(509,771,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 34 when its status was changed to pending from error.\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(510,771,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 36 when its status was changed to pending from error.\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(511,771,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 34 when its status was changed to pending from error.\"}','2020-03-13 21:58:18','2020-03-13 21:58:18'),(512,20,'Plan','replan',NULL,'{\"replan\":\"Based on plan 19. Replanned 2020-03-13.\"}','2020-03-13 21:58:56','2020-03-13 21:58:56'),(513,21,'Plan','replan',NULL,'{\"replan\":\"Based on plan 18. Replanned 2020-03-13.\"}','2020-03-13 21:59:07','2020-03-13 21:59:07'),(514,793,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-13 22:01:10','2020-03-13 22:01:10'),(515,797,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-13 22:01:42','2020-03-13 22:01:42'),(516,40,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 141 was aborted\"}','2020-03-13 22:03:32','2020-03-13 22:06:09'),(517,46,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 141 was aborted\"}','2020-03-13 22:03:32','2020-03-13 22:06:09'),(518,46,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(519,40,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(520,46,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 809, 809, 809\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(521,809,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(522,809,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(523,40,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 809, 809, 809\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(524,809,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(525,809,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(526,809,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(527,809,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:03:37','2020-03-13 22:03:37'),(528,46,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(529,40,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(530,46,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 816, 816, 816\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(531,816,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(532,40,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 816, 816, 816\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(533,816,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(534,816,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(535,816,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(536,816,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(537,816,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:05:28','2020-03-13 22:05:28'),(538,40,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(539,46,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-13 by Joe Neptune\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(540,46,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 823, 823, 823\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(541,40,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 823, 823, 823\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(542,823,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(543,823,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(544,823,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(545,823,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(546,823,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 46 when its status was changed to pending from error.\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(547,823,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 40 when its status was changed to pending from error.\"}','2020-03-13 22:06:14','2020-03-13 22:06:14'),(548,40,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 142 crashed\"}','2020-03-13 22:06:18','2020-03-13 22:06:18'),(549,46,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 142 crashed\"}','2020-03-13 22:06:18','2020-03-13 22:06:18'),(550,20,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to error on 2020-03-16 by Joe Neptune\"}','2020-03-16 20:01:11','2020-03-16 20:01:11'),(551,51,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 151 crashed\"}','2020-03-17 00:52:15','2020-03-17 01:06:45'),(552,52,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 151 crashed\"}','2020-03-17 00:52:15','2020-03-17 01:06:45'),(553,52,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 00:52:39','2020-03-17 00:52:39'),(554,51,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 00:52:39','2020-03-17 00:52:39'),(555,950,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-17 00:53:22','2020-03-17 00:53:22'),(556,52,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 00:54:01','2020-03-17 00:54:01'),(557,51,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 00:54:01','2020-03-17 00:54:01'),(558,51,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:05:17','2020-03-17 01:05:17'),(559,52,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:05:17','2020-03-17 01:05:17'),(560,51,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 150 was aborted\"}','2020-03-17 01:05:50','2020-03-17 01:05:50'),(561,52,'Operation','aborted',NULL,'{\"aborted\":\"Operation was canceled when job 150 was aborted\"}','2020-03-17 01:05:50','2020-03-17 01:05:50'),(562,51,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:06:08','2020-03-17 01:06:08'),(563,52,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:06:08','2020-03-17 01:06:08'),(564,52,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(565,46,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(566,51,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(567,30,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(568,27,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(569,40,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(570,52,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 998, 998, 998, 998, 998, 998, 998\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(571,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 52 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(572,51,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998, 998\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(573,27,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 738, 738, 738\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(574,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 52 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(575,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(576,738,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(577,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(578,738,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(579,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 52 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(580,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(581,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 52 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(582,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(583,738,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 27 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(584,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 52 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(585,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(586,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 52 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(587,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(588,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 52 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(589,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(590,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(591,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(592,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(593,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(594,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(595,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(596,998,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 51 when its status was changed to pending from error.\"}','2020-03-17 01:17:09','2020-03-17 01:17:09'),(597,40,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to error on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:19:59','2020-03-17 01:19:59'),(598,46,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to error on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:20:05','2020-03-17 01:20:05'),(599,24,'Plan','replan',NULL,'{\"replan\":\"Based on plan 23. Replanned 2020-03-16.\"}','2020-03-17 01:20:19','2020-03-17 01:20:19'),(600,25,'Plan','replan',NULL,'{\"replan\":\"Based on plan 23. Replanned 2020-03-16.\"}','2020-03-17 01:20:30','2020-03-17 01:20:30'),(601,58,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 155 crashed\"}','2020-03-17 01:22:24','2020-03-17 01:22:24'),(602,62,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 155 crashed\"}','2020-03-17 01:22:24','2020-03-17 01:22:24'),(603,62,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:22:57','2020-03-17 01:22:57'),(604,58,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:22:57','2020-03-17 01:22:57'),(605,26,'Plan','replan',NULL,'{\"replan\":\"Based on plan 22. Replanned 2020-03-16.\"}','2020-03-17 01:23:30','2020-03-17 01:23:30'),(606,1050,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-17 01:27:24','2020-03-17 01:27:24'),(607,60,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 163 crashed\"}','2020-03-17 01:28:06','2020-03-17 01:39:24'),(608,67,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 160 crashed\"}','2020-03-17 01:28:06','2020-03-17 01:28:06'),(609,60,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:28:22','2020-03-17 01:28:22'),(610,67,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:28:22','2020-03-17 01:28:22'),(611,1094,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-17 01:29:03','2020-03-17 01:29:03'),(612,60,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(613,60,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 1132, 1132, 1132, 1132, 1132, 1132, 1132\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(614,1132,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 60 when its status was changed to pending from done.\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(615,1132,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 60 when its status was changed to pending from done.\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(616,1132,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 60 when its status was changed to pending from done.\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(617,1132,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 60 when its status was changed to pending from done.\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(618,1132,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 60 when its status was changed to pending from done.\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(619,1132,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 60 when its status was changed to pending from done.\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(620,1132,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 60 when its status was changed to pending from done.\"}','2020-03-17 01:39:18','2020-03-17 01:39:18'),(621,56,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 163 crashed\"}','2020-03-17 01:39:24','2020-03-17 01:39:24'),(622,27,'Plan','replan',NULL,'{\"replan\":\"Based on plan 26. Replanned 2020-03-16.\"}','2020-03-17 01:43:47','2020-03-17 01:43:47'),(623,28,'Plan','replan',NULL,'{\"replan\":\"Based on plan 25. Replanned 2020-03-16.\"}','2020-03-17 01:43:53','2020-03-17 01:43:53'),(624,71,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 167 crashed\"}','2020-03-17 01:49:29','2020-03-17 01:49:29'),(625,72,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 167 crashed\"}','2020-03-17 01:49:29','2020-03-17 01:49:29'),(626,72,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:50:07','2020-03-17 01:50:07'),(627,71,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:50:07','2020-03-17 01:50:07'),(628,1169,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-17 01:51:07','2020-03-17 01:51:07'),(629,72,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(630,72,'Operation','previously_used_items',NULL,'{\"previously_used_items\":\"Items previously generated by this operation: 1214, 1214, 1214, 1214, 1214, 1214, 1214\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(631,1214,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 72 when its status was changed to pending from done.\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(632,1214,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 72 when its status was changed to pending from done.\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(633,1214,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 72 when its status was changed to pending from done.\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(634,1214,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 72 when its status was changed to pending from done.\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(635,1214,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 72 when its status was changed to pending from done.\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(636,1214,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 72 when its status was changed to pending from done.\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(637,1214,'Item','operation_status_change',NULL,'{\"operation_status_change\":\"This item was an output of operation 72 when its status was changed to pending from done.\"}','2020-03-17 01:53:27','2020-03-17 01:53:27'),(638,29,'Plan','replan',NULL,'{\"replan\":\"Based on plan 28. Replanned 2020-03-16.\"}','2020-03-17 01:56:06','2020-03-17 01:56:06'),(639,76,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 178 crashed\"}','2020-03-17 01:56:43','2020-03-17 01:59:15'),(640,76,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:56:54','2020-03-17 01:56:54'),(641,76,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:57:10','2020-03-17 01:57:10'),(642,30,'Plan','replan',NULL,'{\"replan\":\"Based on plan 27. Replanned 2020-03-16.\"}','2020-03-17 01:57:24','2020-03-17 01:57:24'),(643,83,'Operation','job_crash',NULL,'{\"job_crash\":\"Operation canceled when job 178 crashed\"}','2020-03-17 01:58:30','2020-03-17 01:59:15'),(644,83,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:58:42','2020-03-17 01:58:42'),(645,76,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:58:42','2020-03-17 01:58:42'),(646,1252,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-17 01:58:57','2020-03-17 01:58:57'),(647,76,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:59:25','2020-03-17 01:59:25'),(648,83,'Operation','status_change',NULL,'{\"status_change\":\"Status changed to pending on 2020-03-16 by Joe Neptune\"}','2020-03-17 01:59:25','2020-03-17 01:59:25'),(649,1260,'Item','C-DNA QC',NULL,'{\"C-DNA QC\":\"Pass\"}','2020-03-17 01:59:41','2020-03-17 01:59:41');
/*!40000 ALTER TABLE `data_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `field_types`
--

DROP TABLE IF EXISTS `field_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `field_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ftype` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `choices` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `array` tinyint(1) DEFAULT NULL,
  `required` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `parent_class` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `role` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `part` tinyint(1) DEFAULT NULL,
  `routing` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `preferred_operation_type_id` int(11) DEFAULT NULL,
  `preferred_field_type_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_field_types_on_sample_type_id` (`parent_id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `field_types`
--

LOCK TABLES `field_types` WRITE;
/*!40000 ALTER TABLE `field_types` DISABLE KEYS */;
INSERT INTO `field_types` VALUES (1,1,'Customer','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(2,1,'Code','string',NULL,0,1,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(3,1,'Version','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(4,1,'Type','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(5,1,'Label','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(6,1,'Organism','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(7,1,'Conc','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(8,1,'Volume','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(9,1,'Pool','string',NULL,0,0,'2020-03-11 15:57:53','2020-03-11 15:57:53','SampleType',NULL,NULL,NULL,NULL,NULL),(10,2,'Input Array','sample',NULL,1,NULL,'2020-03-11 15:57:53','2020-03-11 15:57:53','OperationType','input',1,'IS',NULL,NULL),(11,3,'Input Array','sample',NULL,1,NULL,'2020-03-11 22:16:41','2020-03-12 22:28:01','OperationType','input',NULL,'R',NULL,NULL),(12,3,'Output Array','sample',NULL,1,NULL,'2020-03-11 22:16:41','2020-03-12 22:28:01','OperationType','output',0,'R',NULL,NULL),(13,4,'Input Array','sample',NULL,1,NULL,'2020-03-13 20:24:05','2020-03-13 20:37:30','OperationType','input',NULL,'IA',3,12),(15,5,'Input Array','sample',NULL,1,NULL,'2020-03-13 21:01:53','2020-03-13 21:42:44','OperationType','input',0,'IA',NULL,NULL),(16,5,'Output Array','sample',NULL,1,NULL,'2020-03-13 21:01:53','2020-03-13 21:42:44','OperationType','output',NULL,'IA',NULL,NULL);
/*!40000 ALTER TABLE `field_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `field_values`
--

DROP TABLE IF EXISTS `field_values`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `field_values` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `value` text COLLATE utf8_unicode_ci,
  `child_sample_id` int(11) DEFAULT NULL,
  `child_item_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `parent_class` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `role` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `field_type_id` int(11) DEFAULT NULL,
  `row` int(11) DEFAULT NULL,
  `column` int(11) DEFAULT NULL,
  `allowable_field_type_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_field_values_on_allowable_field_type_id` (`allowable_field_type_id`),
  KEY `index_field_values_on_field_type_id` (`field_type_id`),
  KEY `index_field_values_on_sample_id` (`parent_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3451 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `field_values`
--

LOCK TABLES `field_values` WRITE;
/*!40000 ALTER TABLE `field_values` DISABLE KEYS */;
INSERT INTO `field_values` VALUES (1,1,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2,1,'6011-S1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(3,1,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(4,1,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(5,1,'AS_S1_062519',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(6,1,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(7,1,'153.75',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(8,1,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(9,1,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(10,2,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(11,2,'6011-S2',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(12,2,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(13,2,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(14,2,'AS_S2_062519',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(15,2,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(16,2,'54.05',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(17,2,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(18,2,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(19,3,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(20,3,'6011-S3',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(21,3,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(22,3,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(23,3,'BCSS_S1_062519',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(24,3,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(25,3,'73.25',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(26,3,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(27,3,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(28,4,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(29,4,'6011-S4',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(30,4,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(31,4,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(32,4,'BCSS_S2_062519',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(33,4,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(34,4,'57.6',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(35,4,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(36,4,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(37,5,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(38,5,'6011-S5',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(39,5,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(40,5,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(41,5,'AS_S1_102319',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(42,5,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(43,5,'113.8',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(44,5,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(45,5,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(46,6,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(47,6,'6011-S6',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(48,6,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(49,6,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(50,6,'AS_S2_102319',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(51,6,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(52,6,'28.9',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(53,6,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(54,6,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(55,7,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(56,7,'6011-S7',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(57,7,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(58,7,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(59,7,'BCSS_S1_110119',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(60,7,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(61,7,'121.4',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(62,7,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(63,7,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(64,8,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(65,8,'6011-S8',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Code','Sample',NULL,NULL,NULL,NULL,NULL),(66,8,'1',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Version','Sample',NULL,NULL,NULL,NULL,NULL),(67,8,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Type','Sample',NULL,NULL,NULL,NULL,NULL),(68,8,'BCSS_S2_102319',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Label','Sample',NULL,NULL,NULL,NULL,NULL),(69,8,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(70,8,'66.2',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(71,8,'50',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(72,8,'',NULL,NULL,'2020-03-11 16:06:02','2020-03-11 16:06:02','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(73,9,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(74,9,'8011-S1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(75,9,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(76,9,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(77,9,'AS_S1_062519',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Label','Sample',NULL,NULL,NULL,NULL,NULL),(78,9,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(79,9,'153.75',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(80,9,'50',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(81,9,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(82,10,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(83,10,'8011-S4',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(84,10,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(85,10,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(86,10,'BCSS_S2_062519',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Label','Sample',NULL,NULL,NULL,NULL,NULL),(87,10,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(88,10,'57.6',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(89,10,'50',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(90,10,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(91,11,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(92,11,'8011-S5',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(93,11,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(94,11,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(95,11,'AS_S1_102319',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Label','Sample',NULL,NULL,NULL,NULL,NULL),(96,11,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(97,11,'113.8',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(98,11,'50',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(99,11,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(100,12,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(101,12,'8011-S2',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(102,12,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(103,12,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(104,12,'AS_S2_062519',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Label','Sample',NULL,NULL,NULL,NULL,NULL),(105,12,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(106,12,'54.05',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(107,12,'50',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(108,12,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(109,13,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(110,13,'8011-S3',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(111,13,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(112,13,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(113,13,'BCSS_S1_062519',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Label','Sample',NULL,NULL,NULL,NULL,NULL),(114,13,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(115,13,'73.25',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(116,13,'50',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(117,13,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(118,14,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(119,14,'8011-S6',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(120,14,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(121,14,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(122,14,'AS_S2_102319',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Label','Sample',NULL,NULL,NULL,NULL,NULL),(123,14,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(124,14,'28.9',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(125,14,'50',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(126,14,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(127,15,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(128,15,'8011-S7',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(129,15,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(130,15,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(131,15,'AS_S1_062520',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Label','Sample',NULL,NULL,NULL,NULL,NULL),(132,15,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(133,15,'121.4',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(134,15,'50',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(135,15,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(136,16,'',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(137,16,'8011-S8',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Code','Sample',NULL,NULL,NULL,NULL,NULL),(138,16,'1',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Version','Sample',NULL,NULL,NULL,NULL,NULL),(139,16,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:45','2020-03-11 16:13:45','Type','Sample',NULL,NULL,NULL,NULL,NULL),(140,16,'AS_S2_062520',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(141,16,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(142,16,'66.2',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(143,16,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(144,16,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(145,17,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(146,17,'8011-S9',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(147,17,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(148,17,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(149,17,'BCSS_S1_062520',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(150,17,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(151,17,'153.75',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(152,17,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(153,18,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(154,17,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(155,18,'8011-S1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(156,18,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(157,19,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(158,18,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(159,19,'8011-S10',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(160,18,'AS_S1_062519',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(161,19,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(162,18,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(163,19,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(164,18,'153.75',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(165,19,'BCSS_S2_062520',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(166,18,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(167,19,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(168,18,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(169,19,'54.05',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(170,19,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(171,20,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(172,19,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(173,20,'8011-S4',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(174,20,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(175,21,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(176,20,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(177,21,'8011-S11',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(178,20,'BCSS_S2_062519',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(179,21,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(180,20,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(181,21,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(182,20,'57.6',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(183,21,'AS_S1_102320',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(184,20,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(185,21,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(186,20,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(187,21,'73.25',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(188,22,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(189,22,'8011-S5',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(190,21,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(191,22,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(192,21,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(193,22,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(194,23,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(195,22,'AS_S1_102319',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(196,23,'8011-S12',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(197,22,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(198,23,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(199,22,'113.8',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(200,23,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(201,22,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(202,23,'AS_S2_102320',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(203,23,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(204,23,'57.6',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(205,22,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(206,23,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(207,23,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(208,24,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(209,24,'8011-S2',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(210,25,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(211,24,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(212,25,'8011-S13',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(213,24,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(214,25,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(215,24,'AS_S2_062519',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(216,25,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(217,24,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(218,25,'AS_S1_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(219,24,'54.05',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(220,25,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(221,24,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(222,25,'113.8',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(223,24,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(224,25,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(225,25,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(226,26,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(227,26,'8011-S3',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(228,27,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(229,26,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(230,27,'8011-S14',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(231,26,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(232,27,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(233,26,'BCSS_S1_062519',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(234,27,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(235,26,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(236,27,'AS_S2_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(237,26,'73.25',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(238,27,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(239,26,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(240,27,'28.9',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(241,26,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(242,27,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(243,27,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(244,28,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(245,29,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(246,29,'8011-S15',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(247,28,'8011-S6',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(248,29,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(249,28,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(250,29,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(251,29,'BCSS_S1_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(252,28,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(253,29,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(254,29,'121.4',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(255,28,'AS_S2_102319',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(256,29,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(257,29,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(258,28,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(259,28,'28.9',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(260,30,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(261,28,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(262,30,'8011-S16',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(263,30,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(264,28,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(265,30,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(266,31,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(267,30,'BCSS_S2_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(268,31,'8011-S7',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(269,30,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(270,30,'66.2',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(271,31,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(272,30,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(273,31,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(274,30,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(275,31,'AS_S1_062520',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(276,32,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(277,31,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(278,32,'8011-S17',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(279,32,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(280,31,'121.4',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(281,32,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(282,31,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(283,32,'AS_S1_102321',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(284,32,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(285,31,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(286,32,'31.09642857',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(287,32,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(288,33,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(289,32,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(290,33,'8011-S8',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(291,34,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(292,34,'8011-S18',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(293,34,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(294,34,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(295,34,'AS_S2_102321',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(296,33,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(297,34,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(298,33,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(299,34,'153.75',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(300,33,'AS_S2_062520',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(301,34,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(302,33,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(303,34,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(304,33,'66.2',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(305,33,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(306,35,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(307,33,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(308,35,'8011-S19',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(309,35,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(310,36,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(311,35,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(312,36,'8011-S9',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(313,35,'AS_S1_062522',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(314,36,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(315,35,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(316,36,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(317,35,'54.05',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(318,36,'BCSS_S1_062520',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(319,35,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(320,36,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(321,35,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(322,36,'153.75',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(323,36,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(324,37,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(325,36,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(326,37,'8011-S20',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(327,38,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(328,38,'8011-S10',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(329,37,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(330,38,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(331,37,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(332,38,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(333,37,'AS_S2_062522',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(334,38,'BCSS_S2_062520',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(335,37,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(336,38,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(337,37,'73.25',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(338,38,'54.05',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(339,37,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(340,38,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(341,37,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(342,38,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(343,39,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(344,40,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(345,39,'8011-S21',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(346,40,'8011-S11',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(347,39,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(348,40,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(349,39,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(350,40,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(351,39,'BCSS_S1_062522',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(352,40,'AS_S1_102320',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(353,39,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(354,40,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(355,39,'57.6',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(356,40,'73.25',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(357,39,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(358,40,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(359,39,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(360,40,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(361,41,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(362,42,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(363,41,'8011-S22',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(364,42,'8011-S12',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(365,41,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(366,42,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(367,41,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(368,42,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(369,41,'BCSS_S2_062522',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(370,41,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(371,41,'113.8',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(372,42,'AS_S2_102320',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(373,41,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(374,42,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(375,42,'57.6',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(376,41,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(377,42,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(378,43,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(379,42,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(380,43,'8011-S23',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(381,44,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(382,43,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(383,44,'8011-S13',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(384,43,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(385,44,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(386,43,'AS_S1_102322',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(387,44,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(388,43,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(389,44,'AS_S1_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(390,43,'28.9',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(391,44,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(392,43,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(393,44,'113.8',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(394,43,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(395,44,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(396,45,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(397,44,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(398,45,'8011-S24',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(399,46,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(400,45,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(401,46,'8011-S14',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(402,45,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(403,46,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(404,46,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(405,45,'AS_S2_102322',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(406,46,'AS_S2_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(407,45,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(408,46,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(409,45,'121.4',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(410,46,'28.9',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(411,45,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(412,46,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(413,45,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(414,46,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(415,47,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(416,48,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(417,47,'8011-S25',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(418,48,'8011-S15',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(419,47,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(420,48,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(421,47,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(422,47,'AS_S1_062523',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(423,48,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(424,48,'BCSS_S1_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(425,47,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(426,48,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(427,47,'66.2',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(428,48,'121.4',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(429,47,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(430,48,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(431,47,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(432,48,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(433,49,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(434,50,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(435,49,'8011-S26',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(436,50,'8011-S16',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(437,49,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(438,50,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(439,49,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(440,50,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(441,49,'AS_S2_062523',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(442,50,'BCSS_S2_062521',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(443,49,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(444,50,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(445,49,'74.12271429',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(446,49,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(447,49,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(448,50,'66.2',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(449,50,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(450,51,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(451,50,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(452,51,'8011-S27',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(453,51,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(454,52,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(455,51,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(456,52,'8011-S17',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Code','Sample',NULL,NULL,NULL,NULL,NULL),(457,51,'BCSS_S1_062523',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(458,52,'1',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Version','Sample',NULL,NULL,NULL,NULL,NULL),(459,51,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(460,52,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Type','Sample',NULL,NULL,NULL,NULL,NULL),(461,51,'73.55385714',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(462,52,'AS_S1_102321',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Label','Sample',NULL,NULL,NULL,NULL,NULL),(463,51,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(464,52,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(465,51,'',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(466,52,'31.09642857',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:46','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(467,52,'50',NULL,NULL,'2020-03-11 16:13:46','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(468,53,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(469,52,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(470,53,'8011-S28',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(471,53,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(472,54,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(473,53,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(474,54,'8011-S18',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(475,54,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(476,53,'BCSS_S2_062523',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(477,53,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(478,54,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(479,54,'AS_S2_102321',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(480,54,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(481,53,'72.985',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(482,54,'153.75',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(483,53,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(484,54,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(485,53,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(486,54,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(487,55,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(488,56,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(489,55,'8011-S29',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(490,56,'8011-S19',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(491,55,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(492,56,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(493,55,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(494,56,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(495,55,'AS_S1_102323',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(496,56,'AS_S1_062522',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(497,55,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(498,56,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(499,55,'72.41614286',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(500,56,'54.05',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(501,55,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(502,56,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(503,55,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(504,56,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(505,57,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(506,58,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(507,57,'8011-S30',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(508,58,'8011-S20',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(509,57,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(510,58,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(511,57,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(512,58,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(513,57,'AS_S2_102323',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(514,58,'AS_S2_062522',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(515,57,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(516,58,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(517,57,'71.84728571',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(518,58,'73.25',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(519,57,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(520,58,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(521,57,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(522,59,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(523,58,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(524,59,'8011-S31',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(525,59,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(526,60,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(527,59,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(528,60,'8011-S21',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(529,59,'AS_S1_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(530,60,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(531,59,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(532,60,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(533,59,'71.27842857',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(534,60,'BCSS_S1_062522',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(535,59,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(536,60,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(537,59,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(538,60,'57.6',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(539,60,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(540,61,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(541,60,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(542,61,'8011-S32',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(543,61,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(544,62,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(545,61,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(546,62,'8011-S22',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(547,61,'AS_S2_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(548,62,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(549,61,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(550,62,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(551,62,'BCSS_S2_062522',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(552,61,'70.70957143',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(553,62,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(554,61,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(555,62,'113.8',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(556,62,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(557,61,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(558,62,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(559,63,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(560,64,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(561,63,'8011-S23',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(562,64,'8011-S33',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(563,64,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(564,63,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(565,64,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(566,63,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(567,64,'BCSS_S1_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(568,63,'AS_S1_102322',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(569,64,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(570,63,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(571,64,'70.14071429',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(572,64,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(573,63,'28.9',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(574,64,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(575,63,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(576,63,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(577,65,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(578,65,'8011-S34',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(579,66,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(580,65,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(581,66,'8011-S24',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(582,65,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(583,66,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(584,65,'BCSS_S2_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(585,66,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(586,65,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(587,66,'AS_S2_102322',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(588,65,'69.57185714',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(589,66,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(590,65,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(591,66,'121.4',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(592,65,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(593,66,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(594,66,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(595,67,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(596,67,'8011-S35',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(597,67,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(598,68,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(599,67,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(600,68,'8011-S25',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(601,67,'AS_S1_102324',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(602,68,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(603,67,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(604,68,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(605,67,'69.003',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(606,68,'AS_S1_062523',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(607,67,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(608,68,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(609,67,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(610,68,'66.2',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(611,69,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(612,68,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(613,69,'8011-S36',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(614,68,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(615,69,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(616,69,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(617,70,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(618,69,'AS_S2_102324',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(619,70,'8011-S26',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(620,69,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(621,70,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(622,69,'68.43414286',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(623,70,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(624,69,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(625,70,'AS_S2_062523',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(626,69,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(627,70,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(628,70,'74.12271429',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(629,70,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(630,71,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(631,70,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(632,71,'8011-S37',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(633,71,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(634,72,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(635,72,'8011-S27',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(636,71,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(637,71,'AS_S1_062525',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(638,72,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(639,71,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(640,72,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(641,71,'67.86528571',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(642,72,'BCSS_S1_062523',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(643,71,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(644,72,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(645,71,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(646,72,'73.55385714',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(647,72,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(648,73,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(649,72,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(650,73,'8011-S38',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(651,73,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(652,74,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(653,73,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(654,74,'8011-S28',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(655,74,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(656,73,'AS_S2_062525',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(657,73,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(658,74,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(659,73,'67.29642857',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(660,74,'BCSS_S2_062523',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(661,73,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(662,74,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(663,74,'72.985',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(664,73,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(665,74,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(666,74,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(667,75,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(668,76,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(669,76,'8011-S29',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(670,75,'8011-S39',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(671,76,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(672,75,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(673,76,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(674,75,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(675,76,'AS_S1_102323',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(676,76,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(677,75,'BCSS_S1_062525',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(678,76,'72.41614286',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(679,76,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(680,75,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(681,76,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(682,77,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(683,75,'66.72757143',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(684,77,'8011-S30',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(685,77,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(686,75,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(687,77,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(688,75,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(689,77,'AS_S2_102323',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(690,77,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(691,77,'71.84728571',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(692,78,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(693,77,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(694,78,'8011-S40',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(695,77,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(696,78,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(697,79,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(698,78,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(699,79,'8011-S31',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(700,79,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(701,78,'BCSS_S2_062525',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(702,79,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(703,79,'AS_S1_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(704,78,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(705,79,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(706,78,'66.15871429',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(707,78,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(708,79,'71.27842857',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(709,78,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(710,79,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(711,79,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(712,80,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(713,81,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(714,81,'8011-S32',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(715,80,'8011-S41',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(716,81,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(717,80,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(718,81,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(719,80,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(720,80,'AS_S1_102325',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(721,81,'AS_S2_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(722,80,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(723,81,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(724,80,'65.58985714',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(725,80,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(726,81,'70.70957143',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(727,80,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(728,81,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(729,82,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(730,81,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(731,82,'8011-S42',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(732,82,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(733,83,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(734,82,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(735,82,'AS_S2_102325',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(736,83,'8011-S33',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(737,82,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(738,82,'65.021',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(739,83,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(740,82,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(741,82,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(742,84,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(743,84,'8011-S43',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(744,83,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(745,84,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(746,83,'BCSS_S1_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(747,84,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(748,83,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(749,84,'AS_S1_062526',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(750,83,'70.14071429',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(751,84,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(752,83,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(753,84,'64.45214286',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(754,83,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(755,84,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(756,85,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(757,84,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(758,85,'8011-S34',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(759,86,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(760,85,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(761,86,'8011-S44',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(762,85,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(763,86,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(764,85,'BCSS_S2_062524',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(765,86,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(766,85,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(767,86,'AS_S2_062526',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(768,85,'69.57185714',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(769,86,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(770,85,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(771,86,'63.88328571',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(772,85,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(773,86,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(774,87,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(775,86,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(776,87,'8011-S35',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(777,88,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(778,87,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(779,88,'8011-S45',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Code','Sample',NULL,NULL,NULL,NULL,NULL),(780,87,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(781,88,'1',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Version','Sample',NULL,NULL,NULL,NULL,NULL),(782,87,'AS_S1_102324',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(783,88,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Type','Sample',NULL,NULL,NULL,NULL,NULL),(784,87,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(785,88,'BCSS_S1_062526',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Label','Sample',NULL,NULL,NULL,NULL,NULL),(786,87,'69.003',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(787,88,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(788,87,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(789,88,'63.31442857',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(790,87,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(791,88,'50',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(792,89,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(793,88,'',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:47','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(794,89,'8011-S36',NULL,NULL,'2020-03-11 16:13:47','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(795,90,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(796,89,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(797,90,'8011-S46',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(798,89,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(799,89,'AS_S2_102324',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(800,90,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(801,89,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(802,90,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(803,89,'68.43414286',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(804,90,'BCSS_S2_062526',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(805,89,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(806,90,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(807,89,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(808,90,'62.74557143',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(809,90,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(810,91,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(811,90,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(812,91,'8011-S37',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(813,92,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(814,91,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(815,92,'8011-S47',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(816,91,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(817,92,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(818,91,'AS_S1_062525',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(819,92,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(820,91,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(821,92,'AS_S1_102326',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(822,91,'67.86528571',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(823,92,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(824,91,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(825,92,'62.17671429',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(826,91,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(827,92,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(828,92,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(829,93,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(830,93,'8011-S38',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(831,94,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(832,93,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(833,94,'8011-S48',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(834,93,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(835,94,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(836,93,'AS_S2_062525',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(837,94,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(838,93,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(839,94,'AS_S2_102326',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(840,93,'67.29642857',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(841,94,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(842,93,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(843,94,'61.60785714',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(844,93,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(845,94,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(846,94,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(847,95,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(848,95,'8011-S39',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(849,96,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(850,95,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(851,96,'8011-S49',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(852,95,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(853,96,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(854,95,'BCSS_S1_062525',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(855,96,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(856,95,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(857,96,'AS_S1_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(858,95,'66.72757143',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(859,96,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(860,95,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(861,96,'61.039',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(862,95,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(863,96,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(864,97,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(865,96,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(866,97,'8011-S40',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(867,98,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(868,97,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(869,98,'8011-S50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(870,97,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(871,98,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(872,97,'BCSS_S2_062525',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(873,98,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(874,97,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(875,98,'AS_S2_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(876,97,'66.15871429',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(877,98,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(878,97,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(879,98,'60.47014286',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(880,97,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(881,98,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(882,99,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(883,98,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(884,99,'8011-S41',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(885,99,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(886,100,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(887,100,'8011-S51',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(888,99,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(889,100,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(890,99,'AS_S1_102325',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(891,100,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(892,99,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(893,100,'BCSS_S1_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(894,99,'65.58985714',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(895,99,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(896,100,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(897,99,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(898,100,'59.90128571',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(899,101,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(900,100,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(901,101,'8011-S42',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(902,100,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(903,101,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(904,101,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(905,102,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(906,101,'AS_S2_102325',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(907,102,'8011-S52',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(908,102,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(909,101,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(910,101,'65.021',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(911,101,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(912,102,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(913,101,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(914,102,'BCSS_S2_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(915,102,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(916,103,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(917,102,'59.33242857',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(918,103,'8011-S43',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(919,102,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(920,103,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(921,102,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(922,103,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(923,103,'AS_S1_062526',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(924,104,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(925,103,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(926,104,'8011-S53',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(927,103,'64.45214286',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(928,104,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(929,103,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(930,104,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(931,103,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(932,104,'AS_S1_102327',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(933,104,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(934,105,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(935,104,'58.76357143',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(936,105,'8011-S44',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(937,104,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(938,105,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(939,104,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(940,105,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(941,106,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(942,106,'8011-S54',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(943,106,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(944,105,'AS_S2_062526',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(945,106,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(946,105,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(947,106,'AS_S2_102327',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(948,105,'63.88328571',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(949,106,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(950,105,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(951,106,'58.19471429',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(952,105,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(953,106,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(954,107,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(955,106,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(956,107,'8011-S45',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(957,108,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(958,107,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(959,108,'8011-S55',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(960,107,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(961,108,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(962,107,'BCSS_S1_062526',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(963,108,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(964,107,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(965,108,'AS_S1_062528',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(966,107,'63.31442857',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(967,108,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(968,107,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(969,108,'57.62585714',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(970,107,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(971,108,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(972,109,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(973,108,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(974,109,'8011-S46',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(975,110,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(976,109,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(977,110,'8011-S56',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(978,109,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(979,110,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(980,109,'BCSS_S2_062526',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(981,110,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(982,109,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(983,110,'AS_S2_062528',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(984,109,'62.74557143',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(985,110,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(986,109,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(987,110,'57.057',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(988,109,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(989,110,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(990,111,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(991,110,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(992,111,'8011-S47',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(993,111,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(994,112,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(995,111,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(996,112,'8011-S57',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(997,111,'AS_S1_102326',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(998,112,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(999,111,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1000,112,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1001,111,'62.17671429',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1002,112,'BCSS_S1_062528',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1003,111,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1004,112,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1005,111,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1006,112,'56.48814286',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1007,112,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1008,113,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1009,112,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1010,113,'8011-S48',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1011,113,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1012,114,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1013,113,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1014,114,'8011-S58',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1015,113,'AS_S2_102326',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1016,114,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1017,113,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1018,114,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1019,113,'61.60785714',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1020,114,'BCSS_S2_062528',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1021,113,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1022,114,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1023,114,'55.91928571',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1024,113,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1025,114,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1026,115,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1027,114,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1028,115,'8011-S49',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1029,116,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1030,115,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1031,116,'8011-S59',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1032,115,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1033,116,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1034,115,'AS_S1_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1035,116,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1036,115,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1037,115,'61.039',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1038,116,'AS_S1_102328',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1039,115,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1040,116,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1041,116,'55.35042857',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1042,115,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1043,116,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1044,117,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1045,116,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1046,117,'8011-S50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1047,118,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1048,117,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1049,118,'8011-S60',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1050,117,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1051,117,'AS_S2_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1052,118,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1053,118,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1054,117,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1055,118,'AS_S2_102328',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1056,117,'60.47014286',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1057,117,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1058,118,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1059,117,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1060,118,'54.78157143',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1061,118,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1062,119,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1063,118,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1064,119,'8011-S51',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1065,119,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1066,120,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1067,119,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1068,120,'8011-S61',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1069,119,'BCSS_S1_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1070,120,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1071,119,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1072,120,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1073,119,'59.90128571',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1074,120,'AS_S1_062529',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1075,119,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1076,120,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1077,119,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1078,120,'54.21271429',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1079,120,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1080,121,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1081,120,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1082,121,'8011-S52',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1083,121,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1084,122,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1085,121,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1086,122,'8011-S62',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1087,121,'BCSS_S2_062527',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1088,122,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1089,121,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1090,121,'59.33242857',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1091,122,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1092,121,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1093,122,'AS_S2_062529',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1094,121,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1095,122,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1096,122,'53.64385714',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1097,123,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1098,122,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1099,123,'8011-S53',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1100,122,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1101,123,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1102,124,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1103,123,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1104,123,'AS_S1_102327',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1105,124,'8011-S63',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1106,124,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1107,123,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1108,123,'58.76357143',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1109,124,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1110,123,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1111,123,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1112,124,'BCSS_S1_062529',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1113,125,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1114,124,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1115,125,'8011-S54',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1116,124,'53.075',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1117,125,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1118,124,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1119,125,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1120,124,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1121,125,'AS_S2_102327',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1122,126,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1123,125,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1124,126,'8011-S64',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1125,125,'58.19471429',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1126,126,'1',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1127,125,'50',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1128,125,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1129,126,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1130,126,'BCSS_S2_062529',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:48','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1131,127,'',NULL,NULL,'2020-03-11 16:13:48','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1132,126,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1133,127,'8011-S55',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1134,126,'52.50614286',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1135,127,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1136,126,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1137,127,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1138,126,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1139,127,'AS_S1_062528',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1140,128,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1141,128,'8011-S65',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1142,128,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1143,127,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1144,127,'57.62585714',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1145,128,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1146,127,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1147,128,'AS_S1_102329',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1148,127,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1149,128,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1150,128,'51.93728571',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1151,129,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1152,128,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1153,129,'8011-S56',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1154,128,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1155,129,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1156,130,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1157,129,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1158,130,'8011-S66',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1159,129,'AS_S2_062528',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1160,130,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1161,129,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1162,130,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1163,129,'57.057',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1164,130,'AS_S2_102329',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1165,129,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1166,130,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1167,129,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1168,130,'51.36842857',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1169,131,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1170,130,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1171,131,'8011-S57',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1172,130,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1173,131,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1174,132,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1175,131,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1176,132,'8011-S67',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1177,131,'BCSS_S1_062528',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1178,132,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1179,131,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1180,132,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1181,131,'56.48814286',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1182,132,'AS_S1_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1183,131,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1184,131,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1185,132,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1186,132,'50.79957143',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1187,133,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1188,132,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1189,133,'8011-S58',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1190,132,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1191,133,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1192,134,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1193,133,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1194,133,'BCSS_S2_062528',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1195,134,'8011-S68',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1196,133,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1197,134,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1198,134,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1199,133,'55.91928571',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1200,134,'AS_S2_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1201,133,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1202,134,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1203,133,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1204,134,'50.23071429',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1205,135,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1206,134,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1207,135,'8011-S59',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1208,134,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1209,135,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1210,136,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1211,135,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1212,136,'8011-S69',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1213,135,'AS_S1_102328',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1214,135,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1215,135,'55.35042857',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1216,135,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1217,135,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1218,137,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1219,137,'8011-S60',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1220,137,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1221,137,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1222,137,'AS_S2_102328',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1223,136,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1224,137,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1225,136,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1226,137,'54.78157143',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1227,136,'BCSS_S1_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1228,137,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1229,136,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1230,137,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1231,136,'49.66185714',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1232,136,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1233,138,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1234,136,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1235,138,'8011-S61',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1236,138,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1237,139,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1238,138,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1239,139,'8011-S70',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1240,138,'AS_S1_062529',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1241,139,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1242,138,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1243,139,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1244,138,'54.21271429',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1245,139,'BCSS_S2_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1246,138,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1247,139,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1248,138,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1249,139,'49.093',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1250,139,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1251,140,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1252,139,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1253,140,'8011-S62',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1254,140,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1255,141,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1256,140,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1257,141,'8011-S71',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1258,140,'AS_S2_062529',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1259,141,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1260,140,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1261,141,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1262,141,'AS_S1_102330',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1263,140,'53.64385714',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1264,141,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1265,140,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1266,141,'48.52414286',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1267,140,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1268,141,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1269,142,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1270,141,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1271,142,'8011-S63',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1272,142,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1273,143,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1274,143,'8011-S72',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1275,142,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1276,143,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1277,142,'BCSS_S1_062529',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1278,142,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1279,143,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1280,142,'53.075',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1281,143,'AS_S2_102330',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1282,143,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1283,142,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1284,142,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1285,143,'47.95528571',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1286,143,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1287,144,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1288,143,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1289,144,'8011-S64',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1290,144,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1291,145,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1292,144,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1293,145,'8011-S73',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1294,144,'BCSS_S2_062529',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1295,145,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1296,144,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1297,145,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1298,144,'52.50614286',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1299,145,'AS_S1_062531',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1300,144,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1301,145,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1302,144,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1303,145,'47.38642857',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1304,145,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1305,146,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1306,145,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1307,146,'8011-S65',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1308,146,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1309,147,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1310,146,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1311,147,'8011-S74',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1312,146,'AS_S1_102329',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1313,147,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1314,146,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1315,147,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1316,146,'51.93728571',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1317,146,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1318,146,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1319,147,'AS_S2_062531',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1320,147,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1321,148,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1322,147,'46.81757143',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1323,148,'8011-S66',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1324,147,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1325,148,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1326,147,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1327,148,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1328,148,'AS_S2_102329',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1329,149,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1330,149,'8011-S75',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1331,149,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1332,148,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1333,149,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1334,148,'51.36842857',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1335,149,'BCSS_S1_062531',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1336,148,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1337,149,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1338,148,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1339,149,'46.24871429',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1340,149,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1341,150,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1342,149,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1343,150,'8011-S67',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1344,150,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1345,151,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1346,150,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1347,151,'8011-S76',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1348,150,'AS_S1_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1349,151,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1350,150,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1351,151,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1352,150,'50.79957143',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1353,151,'BCSS_S2_062531',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1354,150,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1355,151,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1356,150,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1357,151,'45.67985714',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1358,151,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1359,152,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1360,151,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1361,152,'8011-S68',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1362,152,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1363,153,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1364,152,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1365,153,'8011-S77',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1366,152,'AS_S2_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1367,153,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1368,153,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1369,152,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1370,153,'AS_S1_102331',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1371,152,'50.23071429',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1372,152,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1373,153,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1374,153,'45.111',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1375,152,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1376,153,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1377,154,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1378,153,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1379,154,'8011-S69',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1380,155,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1381,154,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1382,155,'8011-S78',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1383,154,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1384,155,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1385,154,'BCSS_S1_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1386,155,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1387,154,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1388,155,'AS_S2_102331',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1389,154,'49.66185714',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1390,155,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1391,154,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1392,155,'44.54214286',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1393,154,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1394,155,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1395,156,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1396,155,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1397,156,'8011-S70',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1398,156,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1399,157,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1400,157,'8011-S79',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1401,156,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1402,157,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1403,156,'BCSS_S2_062530',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1404,157,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1405,156,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1406,156,'49.093',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1407,157,'AS_S1_062532',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1408,156,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1409,157,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1410,156,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1411,157,'43.97328571',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1412,157,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1413,158,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1414,157,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1415,158,'8011-S71',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1416,158,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1417,159,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1418,158,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1419,159,'8011-S80',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1420,158,'AS_S1_102330',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1421,159,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1422,158,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1423,159,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1424,159,'AS_S2_062532',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1425,158,'48.52414286',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1426,158,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1427,159,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1428,158,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1429,159,'43.40442857',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1430,159,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1431,160,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1432,159,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1433,160,'8011-S72',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1434,161,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1435,160,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1436,161,'8011-S81',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1437,160,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1438,161,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1439,160,'AS_S2_102330',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1440,161,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1441,160,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1442,161,'BCSS_S1_062532',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1443,160,'47.95528571',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1444,161,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1445,160,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1446,161,'42.83557143',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1447,160,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1448,161,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1449,162,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1450,161,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1451,162,'8011-S73',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1452,163,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1453,162,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1454,163,'8011-S82',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1455,162,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1456,163,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1457,162,'AS_S1_062531',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1458,163,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1459,162,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1460,163,'BCSS_S2_062532',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1461,162,'47.38642857',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1462,163,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1463,162,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1464,162,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1465,163,'42.26671429',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1466,163,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1467,164,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1468,163,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1469,164,'8011-S74',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1470,164,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1471,165,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1472,164,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1473,165,'8011-S83',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1474,164,'AS_S2_062531',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1475,165,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1476,164,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1477,165,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1478,164,'46.81757143',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1479,165,'AS_S1_102332',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1480,164,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1481,165,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1482,164,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1483,165,'41.69785714',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1484,165,'50',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1485,166,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1486,165,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1487,166,'8011-S75',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1488,167,'',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1489,166,'1',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1490,167,'8011-S84',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1491,166,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:49','2020-03-11 16:13:49','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1492,167,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1493,166,'BCSS_S1_062531',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1494,167,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1495,166,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1496,167,'AS_S2_102332',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1497,166,'46.24871429',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1498,167,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1499,166,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1500,167,'41.129',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1501,166,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1502,167,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1503,168,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1504,167,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1505,168,'8011-S76',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1506,168,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1507,169,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1508,168,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1509,169,'8011-S85',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1510,168,'BCSS_S2_062531',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1511,169,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1512,168,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1513,169,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1514,168,'45.67985714',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1515,168,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1516,168,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1517,169,'AS_S1_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1518,169,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1519,170,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1520,169,'40.56014286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1521,170,'8011-S77',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1522,169,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1523,170,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1524,169,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1525,170,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1526,170,'AS_S1_102331',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1527,171,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1528,171,'8011-S86',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1529,171,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1530,170,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1531,171,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1532,170,'45.111',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1533,171,'AS_S2_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1534,170,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1535,171,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1536,170,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1537,171,'39.99128571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1538,171,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1539,172,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1540,171,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1541,172,'8011-S78',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1542,172,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1543,173,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1544,172,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1545,173,'8011-S87',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1546,172,'AS_S2_102331',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1547,173,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1548,172,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1549,173,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1550,173,'BCSS_S1_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1551,172,'44.54214286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1552,173,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1553,172,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1554,173,'39.42242857',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1555,172,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1556,173,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1557,174,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1558,173,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1559,174,'8011-S79',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1560,175,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1561,174,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1562,175,'8011-S88',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1563,174,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1564,175,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1565,174,'AS_S1_062532',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1566,175,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1567,174,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1568,175,'BCSS_S2_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1569,174,'43.97328571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1570,175,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1571,174,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1572,175,'38.85357143',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1573,174,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1574,175,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1575,176,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1576,175,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1577,176,'8011-S80',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1578,177,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1579,176,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1580,176,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1581,177,'8011-S89',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1582,176,'AS_S2_062532',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1583,177,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1584,176,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1585,177,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1586,177,'AS_S1_102333',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1587,176,'43.40442857',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1588,177,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1589,176,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1590,176,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1591,177,'38.28471429',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1592,177,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1593,178,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1594,177,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1595,178,'8011-S81',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1596,179,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1597,178,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1598,179,'8011-S90',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1599,178,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1600,179,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1601,178,'BCSS_S1_062532',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1602,179,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1603,178,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1604,179,'AS_S2_102333',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1605,178,'42.83557143',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1606,179,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1607,178,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1608,179,'37.71585714',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1609,178,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1610,179,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1611,180,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1612,179,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1613,180,'8011-S82',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1614,181,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1615,180,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1616,181,'8011-S91',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1617,180,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1618,181,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1619,180,'BCSS_S2_062532',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1620,181,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1621,180,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1622,181,'AS_S1_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1623,180,'42.26671429',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1624,181,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1625,180,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1626,181,'37.147',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1627,180,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1628,181,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1629,182,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1630,182,'8011-S83',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1631,181,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1632,182,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1633,183,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1634,182,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1635,183,'8011-S92',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1636,182,'AS_S1_102332',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1637,183,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1638,182,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1639,183,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1640,182,'41.69785714',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1641,183,'AS_S2_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1642,182,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1643,183,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1644,182,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1645,183,'36.57814286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1646,184,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1647,183,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1648,184,'8011-S84',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1649,183,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1650,184,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1651,185,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1652,184,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1653,185,'8011-S93',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1654,184,'AS_S2_102332',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1655,185,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1656,184,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1657,185,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1658,184,'41.129',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1659,185,'BCSS_S1_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1660,184,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1661,185,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1662,184,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1663,185,'36.00928571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1664,186,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1665,185,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1666,186,'8011-S85',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1667,185,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1668,186,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1669,187,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1670,186,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1671,187,'8011-S94',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1672,186,'AS_S1_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1673,187,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1674,186,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1675,187,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1676,186,'40.56014286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1677,187,'BCSS_S2_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1678,186,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1679,187,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1680,186,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1681,187,'35.44042857',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1682,188,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1683,187,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1684,188,'8011-S86',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1685,187,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1686,188,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1687,188,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1688,189,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1689,188,'AS_S2_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1690,189,'8011-S95',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1691,188,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1692,189,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1693,188,'39.99128571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1694,189,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1695,188,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1696,189,'AS_S1_102334',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1697,188,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1698,189,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1699,189,'34.87157143',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1700,190,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1701,189,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1702,190,'8011-S87',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1703,189,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1704,190,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1705,190,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1706,191,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1707,190,'BCSS_S1_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1708,191,'8011-S96',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1709,190,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1710,191,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1711,190,'39.42242857',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1712,191,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1713,190,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1714,190,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1715,191,'AS_S2_102334',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1716,192,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1717,191,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1718,192,'8011-S88',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1719,191,'34.30271429',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1720,192,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1721,191,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1722,192,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1723,191,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1724,192,'BCSS_S2_062533',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1725,193,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1726,193,'8011-S97',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1727,192,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1728,193,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1729,192,'38.85357143',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1730,193,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1731,192,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1732,193,'AS_S1_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1733,192,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1734,193,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1735,193,'33.73385714',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1736,194,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1737,193,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1738,194,'8011-S89',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1739,193,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1740,194,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1741,194,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1742,195,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1743,194,'AS_S1_102333',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1744,195,'8011-S98',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1745,194,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1746,195,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1747,194,'38.28471429',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1748,195,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1749,194,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1750,195,'AS_S2_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1751,194,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1752,195,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1753,195,'33.165',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1754,196,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1755,195,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1756,196,'8011-S90',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1757,195,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1758,196,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1759,196,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1760,197,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1761,196,'AS_S2_102333',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1762,197,'8011-S99',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1763,196,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1764,197,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1765,196,'37.71585714',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1766,197,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1767,196,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1768,197,'BCSS_S1_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1769,196,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1770,197,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1771,197,'32.59614286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1772,198,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1773,197,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1774,198,'8011-S91',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1775,197,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1776,198,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1777,198,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1778,199,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1779,198,'AS_S1_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1780,199,'8011-S100',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1781,198,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1782,199,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1783,198,'37.147',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1784,199,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1785,198,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1786,199,'BCSS_S2_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1787,198,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1788,199,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1789,199,'32.02728571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1790,200,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1791,199,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1792,200,'8011-S92',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1793,199,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1794,200,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1795,200,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1796,201,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1797,200,'AS_S2_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1798,201,'8011-S101',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1799,200,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1800,201,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1801,200,'36.57814286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1802,201,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1803,200,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1804,201,'AS_S1_102335',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1805,200,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1806,201,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1807,201,'31.45842857',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1808,202,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1809,201,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1810,202,'8011-S93',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1811,201,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1812,202,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1813,202,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1814,203,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1815,202,'BCSS_S1_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1816,203,'8011-S102',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1817,202,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1818,203,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1819,202,'36.00928571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1820,203,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1821,202,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1822,203,'AS_S2_102335',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1823,202,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1824,203,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1825,203,'30.88957143',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1826,204,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1827,203,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1828,204,'8011-S94',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1829,203,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1830,204,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1831,204,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1832,205,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1833,204,'BCSS_S2_062534',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1834,205,'8011-S103',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1835,204,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1836,205,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1837,204,'35.44042857',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1838,205,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1839,204,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1840,205,'AS_S1_062536',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1841,204,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1842,205,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1843,205,'30.32071429',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1844,206,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1845,205,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1846,206,'8011-S95',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1847,205,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1848,206,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1849,206,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1850,207,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1851,206,'AS_S1_102334',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1852,207,'8011-S104',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1853,206,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1854,207,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1855,206,'34.87157143',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1856,207,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1857,206,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1858,207,'AS_S2_062536',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1859,206,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1860,207,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1861,207,'29.75185714',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1862,208,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1863,207,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1864,208,'8011-S96',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1865,207,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1866,208,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1867,209,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1868,208,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1869,209,'8011-S105',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1870,208,'AS_S2_102334',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1871,209,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1872,208,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1873,209,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1874,208,'34.30271429',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1875,209,'BCSS_S1_062536',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1876,208,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1877,209,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1878,208,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1879,209,'29.183',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1880,210,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1881,209,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1882,210,'8011-S97',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1883,209,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1884,210,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1885,211,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1886,210,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1887,211,'8011-S106',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1888,210,'AS_S1_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1889,211,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1890,210,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1891,211,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1892,210,'33.73385714',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1893,211,'BCSS_S2_062536',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1894,210,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1895,211,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1896,210,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1897,211,'28.61414286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1898,212,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1899,211,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1900,212,'8011-S98',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1901,211,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1902,212,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1903,213,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1904,212,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1905,213,'8011-S107',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1906,212,'AS_S2_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1907,213,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1908,212,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1909,212,'33.165',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1910,212,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1911,212,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1912,213,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1913,213,'AS_S1_102336',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1914,214,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1915,213,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1916,214,'8011-S99',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1917,213,'28.04528571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1918,214,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1919,213,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1920,214,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1921,213,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1922,215,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1923,214,'BCSS_S1_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1924,215,'8011-S108',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1925,214,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1926,215,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1927,214,'32.59614286',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1928,215,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1929,214,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1930,215,'AS_S2_102336',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1931,214,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1932,215,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1933,215,'27.47642857',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1934,216,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1935,215,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1936,216,'8011-S100',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1937,215,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1938,216,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1939,216,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1940,217,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1941,216,'BCSS_S2_062535',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1942,217,'8011-S109',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1943,216,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1944,217,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1945,216,'32.02728571',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1946,217,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1947,216,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1948,217,'AS_S1_062537',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1949,216,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1950,217,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1951,217,'26.90757143',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1952,218,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1953,217,'50',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1954,218,'8011-S101',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1955,217,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1956,218,'1',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1957,218,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1958,219,'',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1959,218,'AS_S1_102335',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1960,219,'8011-S110',NULL,NULL,'2020-03-11 16:13:50','2020-03-11 16:13:50','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1961,219,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1962,218,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1963,219,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1964,218,'31.45842857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1965,218,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1966,219,'AS_S2_062537',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1967,219,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1968,218,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1969,219,'26.33871429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1970,220,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1971,219,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1972,220,'8011-S102',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1973,219,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1974,220,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1975,221,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1976,220,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1977,221,'8011-S111',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1978,220,'AS_S2_102335',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1979,221,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1980,220,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1981,221,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1982,220,'30.88957143',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1983,221,'BCSS_S1_062537',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1984,220,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1985,221,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1986,220,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1987,221,'25.76985714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(1988,222,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1989,221,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(1990,222,'8011-S103',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1991,221,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(1992,222,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1993,223,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(1994,222,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(1995,223,'8011-S112',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(1996,222,'AS_S1_062536',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(1997,223,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(1998,222,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(1999,223,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2000,222,'30.32071429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2001,223,'BCSS_S2_062537',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2002,222,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2003,223,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2004,222,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2005,223,'25.201',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2006,224,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2007,223,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2008,223,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2009,224,'8011-S104',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2010,224,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2011,225,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2012,224,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2013,225,'8011-S113',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2014,224,'AS_S2_062536',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2015,225,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2016,224,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2017,225,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2018,224,'29.75185714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2019,225,'AS_S1_102337',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2020,224,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2021,225,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2022,224,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2023,225,'24.63214286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2024,225,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2025,226,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2026,225,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2027,226,'8011-S105',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2028,226,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2029,227,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2030,226,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2031,227,'8011-S114',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2032,226,'BCSS_S1_062536',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2033,227,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2034,226,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2035,227,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2036,226,'29.183',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2037,227,'AS_S2_102337',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2038,226,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2039,227,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2040,226,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2041,227,'24.06328571',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2042,227,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2043,228,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2044,227,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2045,228,'8011-S106',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2046,229,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2047,228,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2048,229,'8011-S115',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2049,228,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2050,229,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2051,228,'BCSS_S2_062536',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2052,229,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2053,228,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2054,229,'AS_S1_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2055,228,'28.61414286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2056,229,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2057,228,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2058,229,'23.49442857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2059,228,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2060,229,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2061,230,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2062,229,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2063,230,'8011-S107',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2064,231,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2065,230,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2066,231,'8011-S116',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2067,230,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2068,231,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2069,230,'AS_S1_102336',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2070,231,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2071,230,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2072,231,'AS_S2_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2073,230,'28.04528571',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2074,231,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2075,230,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2076,231,'22.92557143',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2077,230,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2078,231,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2079,231,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2080,232,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2081,232,'8011-S108',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2082,233,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2083,232,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2084,233,'8011-S117',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2085,232,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2086,233,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2087,232,'AS_S2_102336',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2088,233,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2089,232,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2090,233,'BCSS_S1_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2091,232,'27.47642857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2092,233,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2093,232,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2094,233,'22.35671429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2095,233,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2096,232,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2097,233,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2098,234,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2099,235,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2100,234,'8011-S109',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2101,235,'8011-S118',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2102,234,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2103,234,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2104,234,'AS_S1_062537',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2105,235,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2106,234,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2107,235,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2108,234,'26.90757143',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2109,235,'BCSS_S2_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2110,234,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2111,235,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2112,234,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2113,235,'21.78785714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2114,236,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2115,235,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2116,236,'8011-S110',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2117,235,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2118,236,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2119,237,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2120,237,'8011-S119',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2121,237,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2122,236,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2123,237,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2124,236,'AS_S2_062537',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2125,237,'AS_S1_102338',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2126,236,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2127,237,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2128,236,'26.33871429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2129,237,'21.219',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2130,236,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2131,237,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2132,236,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2133,237,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2134,238,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2135,239,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2136,238,'8011-S111',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2137,239,'8011-S120',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2138,238,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2139,239,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2140,238,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2141,239,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2142,238,'BCSS_S1_062537',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2143,239,'AS_S2_102338',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2144,238,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2145,239,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2146,238,'25.76985714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2147,239,'20.65014286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2148,238,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2149,239,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2150,238,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2151,239,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2152,240,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2153,241,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2154,240,'8011-S112',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2155,241,'8011-S121',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2156,240,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2157,241,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2158,241,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2159,240,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2160,241,'AS_S1_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2161,240,'BCSS_S2_062537',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2162,241,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2163,240,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2164,241,'20.08128571',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2165,240,'25.201',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2166,241,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2167,240,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2168,241,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2169,240,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2170,242,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2171,243,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2172,242,'8011-S122',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2173,243,'8011-S113',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2174,242,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2175,243,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2176,242,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2177,243,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2178,243,'AS_S1_102337',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2179,242,'AS_S2_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2180,242,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2181,243,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2182,242,'19.51242857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2183,243,'24.63214286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2184,242,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2185,243,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2186,242,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2187,243,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2188,244,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2189,245,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2190,244,'8011-S123',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2191,245,'8011-S114',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2192,244,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2193,245,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2194,244,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2195,245,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2196,244,'BCSS_S1_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2197,245,'AS_S2_102337',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2198,244,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2199,245,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2200,244,'18.94357143',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2201,245,'24.06328571',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2202,244,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2203,245,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2204,244,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2205,245,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2206,246,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2207,247,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2208,246,'8011-S124',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2209,247,'8011-S115',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2210,246,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2211,247,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2212,246,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2213,247,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2214,246,'BCSS_S2_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2215,247,'AS_S1_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2216,246,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2217,247,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2218,246,'18.37471429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2219,247,'23.49442857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2220,246,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2221,247,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2222,246,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2223,247,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2224,248,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2225,249,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2226,248,'8011-S125',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2227,249,'8011-S116',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2228,248,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2229,249,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2230,248,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2231,249,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2232,248,'AS_S1_102339',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2233,249,'AS_S2_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2234,248,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2235,249,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2236,248,'17.80585714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2237,249,'22.92557143',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2238,248,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2239,249,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2240,248,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2241,249,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2242,250,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2243,251,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2244,250,'8011-S126',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2245,251,'8011-S117',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2246,250,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2247,251,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2248,250,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2249,251,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2250,250,'AS_S2_102339',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2251,251,'BCSS_S1_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2252,250,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2253,251,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2254,250,'17.237',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2255,251,'22.35671429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2256,250,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2257,251,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2258,250,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2259,251,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2260,252,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2261,253,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2262,252,'8011-S127',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2263,253,'8011-S118',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2264,252,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2265,253,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2266,252,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2267,253,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2268,252,'AS_S1_062540',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2269,253,'BCSS_S2_062538',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2270,252,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2271,253,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2272,252,'16.66814286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2273,253,'21.78785714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2274,252,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2275,253,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2276,252,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2277,253,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2278,254,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2279,255,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2280,254,'8011-S128',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2281,255,'8011-S119',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2282,254,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2283,255,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2284,254,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2285,255,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2286,254,'AS_S2_062540',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2287,255,'AS_S1_102338',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2288,254,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2289,255,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2290,254,'16.09928571',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2291,255,'21.219',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2292,254,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2293,255,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2294,254,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2295,255,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2296,256,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2297,257,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2298,257,'8011-S120',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2299,257,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2300,256,'8011-S129',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2301,257,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2302,256,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2303,257,'AS_S2_102338',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2304,256,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2305,257,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2306,256,'BCSS_S1_062540',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2307,257,'20.65014286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2308,256,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2309,257,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2310,256,'15.53042857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2311,257,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2312,256,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2313,258,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2314,256,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2315,259,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2316,259,'8011-S130',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2317,258,'8011-S121',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2318,259,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2319,258,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2320,259,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2321,258,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2322,259,'BCSS_S2_062540',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2323,258,'AS_S1_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2324,259,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2325,259,'14.96157143',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2326,258,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2327,259,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2328,258,'20.08128571',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2329,259,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2330,258,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2331,258,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2332,260,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2333,260,'8011-S131',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2334,261,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2335,260,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2336,261,'8011-S122',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2337,260,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2338,261,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2339,260,'AS_S1_102340',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2340,261,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2341,261,'AS_S2_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2342,260,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2343,261,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2344,260,'14.39271429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2345,261,'19.51242857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2346,260,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2347,260,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2348,261,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2349,261,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2350,262,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2351,262,'8011-S132',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2352,263,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2353,262,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2354,263,'8011-S123',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2355,262,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2356,263,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2357,262,'AS_S2_102340',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2358,263,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2359,262,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2360,263,'BCSS_S1_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2361,262,'13.82385714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2362,263,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2363,262,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2364,263,'18.94357143',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2365,262,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2366,263,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2367,263,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2368,264,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2369,264,'8011-S133',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2370,265,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2371,264,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2372,265,'8011-S124',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2373,264,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2374,265,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2375,264,'AS_S1_062541',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2376,265,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2377,264,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2378,265,'BCSS_S2_062539',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2379,264,'13.255',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2380,265,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2381,264,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2382,265,'18.37471429',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2383,264,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2384,265,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2385,266,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2386,265,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2387,266,'8011-S134',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2388,267,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2389,266,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2390,267,'8011-S125',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2391,266,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2392,266,'AS_S2_062541',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2393,267,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2394,266,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2395,267,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2396,266,'12.68614286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2397,267,'AS_S1_102339',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2398,267,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2399,266,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2400,267,'17.80585714',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2401,266,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2402,267,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2403,268,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2404,267,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2405,268,'8011-S135',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2406,269,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2407,268,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2408,269,'8011-S126',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2409,268,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2410,269,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2411,268,'BCSS_S1_062541',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2412,268,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2413,269,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2414,268,'12.11728571',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2415,269,'AS_S2_102339',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2416,268,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2417,269,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2418,268,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2419,269,'17.237',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2420,269,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2421,270,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2422,269,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2423,270,'8011-S136',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2424,270,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2425,271,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2426,270,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2427,271,'8011-S127',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2428,270,'BCSS_S2_062541',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2429,271,'1',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2430,270,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2431,271,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2432,270,'11.54842857',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2433,271,'AS_S1_062540',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2434,270,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2435,271,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2436,270,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2437,271,'16.66814286',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2438,271,'50',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2439,272,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2440,271,'',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2441,272,'8011-S137',NULL,NULL,'2020-03-11 16:13:51','2020-03-11 16:13:51','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2442,272,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2443,273,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2444,272,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2445,273,'8011-S128',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2446,272,'AS_S1_102341',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2447,273,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2448,272,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2449,273,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2450,272,'10.97957143',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2451,273,'AS_S2_062540',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2452,272,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2453,273,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2454,272,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2455,273,'16.09928571',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2456,274,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2457,273,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2458,274,'8011-S138',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2459,273,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2460,274,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2461,275,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2462,274,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2463,274,'AS_S2_102341',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2464,275,'8011-S129',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2465,275,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2466,274,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2467,275,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2468,274,'10.41071429',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2469,274,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2470,275,'BCSS_S1_062540',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2471,274,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2472,275,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2473,275,'15.53042857',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2474,276,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2475,275,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2476,276,'8011-S139',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2477,275,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2478,276,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2479,276,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2480,277,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2481,276,'AS_S1_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2482,277,'8011-S130',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2483,276,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2484,277,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2485,276,'9.841857143',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2486,277,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2487,276,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2488,277,'BCSS_S2_062540',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2489,277,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2490,277,'14.96157143',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2491,277,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2492,276,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2493,277,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2494,278,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2495,279,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2496,278,'8011-S140',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2497,279,'8011-S131',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2498,278,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2499,279,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2500,278,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2501,279,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2502,278,'AS_S2_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2503,279,'AS_S1_102340',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2504,278,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2505,279,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2506,278,'9.273',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2507,279,'14.39271429',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2508,278,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2509,279,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2510,278,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2511,279,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2512,280,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2513,280,'8011-S141',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2514,280,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2515,281,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2516,280,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2517,281,'8011-S132',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2518,280,'BCSS_S1_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2519,281,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2520,280,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2521,281,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2522,280,'8.704142857',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2523,281,'AS_S2_102340',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2524,280,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2525,281,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2526,280,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2527,281,'13.82385714',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2528,282,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2529,281,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2530,282,'8011-S142',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2531,281,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2532,282,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2533,283,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2534,282,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2535,283,'8011-S133',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2536,282,'BCSS_S2_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2537,283,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2538,282,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2539,283,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2540,282,'8.135285714',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2541,283,'AS_S1_062541',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2542,282,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2543,283,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2544,282,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2545,283,'13.255',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2546,283,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2547,283,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2548,284,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2549,284,'8011-S134',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2550,284,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2551,284,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2552,284,'AS_S2_062541',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2553,284,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2554,284,'12.68614286',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2555,284,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2556,284,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2557,285,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2558,285,'8011-S135',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2559,285,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2560,285,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2561,285,'BCSS_S1_062541',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2562,285,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2563,285,'12.11728571',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2564,285,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2565,285,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2566,286,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2567,286,'8011-S136',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2568,286,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2569,286,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2570,286,'BCSS_S2_062541',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2571,286,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2572,286,'11.54842857',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2573,286,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2574,286,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2575,287,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2576,287,'8011-S137',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2577,287,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2578,287,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2579,287,'AS_S1_102341',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2580,287,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2581,287,'10.97957143',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2582,287,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2583,287,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2584,288,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2585,288,'8011-S138',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2586,288,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2587,288,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2588,288,'AS_S2_102341',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2589,288,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2590,288,'10.41071429',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2591,288,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2592,288,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2593,289,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2594,289,'8011-S139',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2595,289,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2596,289,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2597,289,'AS_S1_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2598,289,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2599,289,'9.841857143',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2600,289,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2601,289,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2602,290,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2603,290,'8011-S140',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2604,290,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2605,290,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2606,290,'AS_S2_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2607,290,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2608,290,'9.273',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2609,290,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2610,290,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2611,291,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2612,291,'8011-S141',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2613,291,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2614,291,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2615,291,'BCSS_S1_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2616,291,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2617,291,'8.704142857',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2618,291,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2619,291,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2620,292,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Customer','Sample',NULL,NULL,NULL,NULL,NULL),(2621,292,'8011-S142',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Code','Sample',NULL,NULL,NULL,NULL,NULL),(2622,292,'1',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Version','Sample',NULL,NULL,NULL,NULL,NULL),(2623,292,'DNA-Seq (~500bp insert)',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Type','Sample',NULL,NULL,NULL,NULL,NULL),(2624,292,'BCSS_S2_062542',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Label','Sample',NULL,NULL,NULL,NULL,NULL),(2625,292,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Organism','Sample',NULL,NULL,NULL,NULL,NULL),(2626,292,'8.135285714',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Conc','Sample',NULL,NULL,NULL,NULL,NULL),(2627,292,'50',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Volume','Sample',NULL,NULL,NULL,NULL,NULL),(2628,292,'',NULL,NULL,'2020-03-11 16:13:52','2020-03-11 16:13:52','Pool','Sample',NULL,NULL,NULL,NULL,NULL),(2629,1,NULL,1,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,0,0,1),(2630,1,NULL,2,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,1,0,1),(2631,1,NULL,3,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,2,0,1),(2632,1,NULL,4,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,3,0,1),(2633,1,NULL,5,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,4,0,1),(2634,1,NULL,6,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,5,0,1),(2635,1,NULL,7,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,6,0,1),(2636,1,NULL,8,2,'2020-03-11 16:30:09','2020-03-11 16:30:09','Input Array','Operation','input',10,7,0,1),(2637,2,NULL,1,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,0,0,1),(2638,2,NULL,2,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,1,0,1),(2639,2,NULL,3,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,2,0,1),(2640,2,NULL,4,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,3,0,1),(2641,2,NULL,5,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,4,0,1),(2642,2,NULL,6,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,5,0,1),(2643,2,NULL,7,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,6,0,1),(2644,2,NULL,8,2,'2020-03-11 17:33:15','2020-03-11 17:35:09','Input Array','Operation','input',10,7,0,1),(2645,2,NULL,292,2,'2020-03-11 17:35:09','2020-03-11 17:35:09','Input Array','Operation','input',10,0,1,1),(2646,3,NULL,9,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,0,0,1),(2647,3,NULL,12,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,3,0,1),(2648,3,NULL,13,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,4,0,1),(2649,3,NULL,10,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,1,0,1),(2650,3,NULL,11,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,2,0,1),(2651,3,NULL,14,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,5,0,1),(2652,3,NULL,15,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,6,0,1),(2653,3,NULL,16,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,7,0,1),(2654,3,NULL,17,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,0,1,1),(2655,3,NULL,19,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,2,1,1),(2656,3,NULL,21,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,4,1,1),(2657,3,NULL,23,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,6,1,1),(2658,3,NULL,25,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,0,2,1),(2659,3,NULL,27,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,2,2,1),(2660,3,NULL,29,160,'2020-03-11 20:58:20','2020-03-11 20:58:20','Input Array','Operation','input',10,4,2,1),(2669,4,NULL,1,2,'2020-03-11 22:19:28','2020-03-11 22:19:28','Input_Array','Operation','input',11,0,0,2),(2670,4,NULL,1,NULL,'2020-03-11 22:19:28','2020-03-13 18:21:45','Output_Array','Operation','output',12,NULL,NULL,3),(2671,4,NULL,2,NULL,'2020-03-11 22:19:28','2020-03-13 18:21:45','Output_Array','Operation','output',12,NULL,NULL,3),(2672,4,NULL,3,NULL,'2020-03-11 22:19:28','2020-03-13 18:21:45','Output_Array','Operation','output',12,NULL,NULL,3),(2673,4,NULL,4,NULL,'2020-03-11 22:19:28','2020-03-13 18:21:45','Output_Array','Operation','output',12,NULL,NULL,3),(2674,4,NULL,5,NULL,'2020-03-11 22:19:28','2020-03-13 18:21:45','Output_Array','Operation','output',12,NULL,NULL,3),(2675,4,NULL,2,2,'2020-03-11 22:19:28','2020-03-11 22:19:28','Input_Array','Operation','input',11,1,0,2),(2676,4,NULL,3,2,'2020-03-11 22:19:28','2020-03-11 22:19:28','Input_Array','Operation','input',11,2,0,2),(2677,4,NULL,4,2,'2020-03-11 22:19:28','2020-03-11 22:19:28','Input_Array','Operation','input',11,3,0,2),(2678,4,NULL,5,2,'2020-03-11 22:19:28','2020-03-11 22:19:28','Input_Array','Operation','input',11,4,0,2),(2715,11,NULL,1,2,'2020-03-12 22:36:14','2020-03-12 22:36:14','Input Array','Operation','input',11,0,0,2),(2716,11,NULL,1,689,'2020-03-12 22:36:14','2020-03-13 20:21:12','Output Array','Operation','output',12,0,0,3),(2717,11,NULL,2,2,'2020-03-12 22:36:14','2020-03-12 22:36:14','Input Array','Operation','input',11,1,0,2),(2718,11,NULL,3,2,'2020-03-12 22:36:14','2020-03-12 22:36:14','Input Array','Operation','input',11,2,0,2),(2719,11,NULL,4,2,'2020-03-12 22:36:14','2020-03-12 22:36:14','Input Array','Operation','input',11,3,0,2),(2720,11,NULL,2,689,'2020-03-12 22:36:14','2020-03-13 20:21:12','Output Array','Operation','output',12,0,1,3),(2721,11,NULL,3,689,'2020-03-12 22:36:14','2020-03-13 20:21:12','Output Array','Operation','output',12,0,2,3),(2722,11,NULL,4,689,'2020-03-12 22:36:14','2020-03-13 20:21:12','Output Array','Operation','output',12,0,3,3),(2723,12,NULL,1,2,'2020-03-12 22:57:17','2020-03-12 22:57:36','Input Array','Operation','input',11,0,0,2),(2724,12,NULL,1,NULL,'2020-03-12 22:57:17','2020-03-13 19:23:41','Output Array','Operation','output',12,NULL,NULL,3),(2725,12,NULL,2,2,'2020-03-12 22:57:17','2020-03-12 22:57:36','Input Array','Operation','input',11,1,0,2),(2726,12,NULL,3,2,'2020-03-12 22:57:17','2020-03-12 22:57:36','Input Array','Operation','input',11,2,0,2),(2727,12,NULL,4,2,'2020-03-12 22:57:17','2020-03-12 22:57:36','Input Array','Operation','input',11,3,0,2),(2728,12,NULL,2,NULL,'2020-03-12 22:57:17','2020-03-13 19:23:41','Output Array','Operation','output',12,NULL,NULL,3),(2729,12,NULL,3,NULL,'2020-03-12 22:57:17','2020-03-13 19:23:41','Output Array','Operation','output',12,NULL,NULL,3),(2730,12,NULL,4,NULL,'2020-03-12 22:57:17','2020-03-13 19:23:41','Output Array','Operation','output',12,NULL,NULL,3),(2731,12,NULL,4,NULL,'2020-03-12 22:57:36','2020-03-13 19:23:41','Output Array','Operation','output',12,NULL,NULL,3),(2732,12,NULL,4,2,'2020-03-12 22:57:36','2020-03-12 22:57:36','Input Array','Operation','input',11,3,0,2),(2733,13,NULL,1,2,'2020-03-12 22:58:47','2020-03-12 22:58:49','Input Array','Operation','input',11,0,0,2),(2734,13,NULL,1,621,'2020-03-12 22:58:47','2020-03-13 18:30:04','Output Array','Operation','output',12,0,0,3),(2735,13,NULL,2,2,'2020-03-12 22:58:47','2020-03-12 22:58:49','Input Array','Operation','input',11,1,0,2),(2736,13,NULL,3,2,'2020-03-12 22:58:47','2020-03-12 22:58:49','Input Array','Operation','input',11,2,0,2),(2737,13,NULL,4,2,'2020-03-12 22:58:47','2020-03-12 22:58:49','Input Array','Operation','input',11,3,0,2),(2738,13,NULL,2,621,'2020-03-12 22:58:47','2020-03-13 18:30:04','Output Array','Operation','output',12,0,1,3),(2739,13,NULL,3,621,'2020-03-12 22:58:47','2020-03-13 18:30:04','Output Array','Operation','output',12,0,2,3),(2740,13,NULL,4,621,'2020-03-12 22:58:47','2020-03-13 18:30:04','Output Array','Operation','output',12,0,3,3),(2741,14,NULL,9,160,'2020-03-12 22:58:58','2020-03-12 23:00:21','Input Array','Operation','input',11,0,0,2),(2742,14,NULL,9,NULL,'2020-03-12 22:58:58','2020-03-13 18:48:47','Output Array','Operation','output',12,NULL,NULL,3),(2743,14,NULL,10,160,'2020-03-12 22:58:58','2020-03-12 23:00:21','Input Array','Operation','input',11,3,0,2),(2744,14,NULL,11,160,'2020-03-12 22:58:58','2020-03-12 23:00:21','Input Array','Operation','input',11,4,0,2),(2745,14,NULL,12,160,'2020-03-12 22:58:58','2020-03-12 23:00:21','Input Array','Operation','input',11,1,0,2),(2746,14,NULL,10,NULL,'2020-03-12 22:58:58','2020-03-13 18:48:47','Output Array','Operation','output',12,NULL,NULL,3),(2747,14,NULL,11,NULL,'2020-03-12 22:58:58','2020-03-13 18:48:47','Output Array','Operation','output',12,NULL,NULL,3),(2748,14,NULL,12,NULL,'2020-03-12 22:58:58','2020-03-13 18:48:47','Output Array','Operation','output',12,NULL,NULL,3),(2749,14,NULL,13,NULL,'2020-03-12 22:58:58','2020-03-13 18:48:47','Output Array','Operation','output',12,NULL,NULL,3),(2750,14,NULL,13,160,'2020-03-12 22:58:58','2020-03-12 23:00:21','Input Array','Operation','input',11,2,0,2),(2757,16,NULL,15,160,'2020-03-13 20:32:48','2020-03-13 20:32:48','Input Array','Operation','input',11,6,0,2),(2758,16,NULL,15,698,'2020-03-13 20:32:48','2020-03-13 20:34:03','Output Array','Operation','output',12,0,0,3),(2759,16,NULL,16,698,'2020-03-13 20:32:48','2020-03-13 20:34:03','Output Array','Operation','output',12,0,1,3),(2760,16,NULL,17,698,'2020-03-13 20:32:48','2020-03-13 20:34:03','Output Array','Operation','output',12,0,2,3),(2761,16,NULL,16,160,'2020-03-13 20:32:48','2020-03-13 20:32:48','Input Array','Operation','input',11,7,0,2),(2762,16,NULL,17,160,'2020-03-13 20:32:48','2020-03-13 20:32:48','Input Array','Operation','input',11,0,1,2),(2763,17,NULL,15,698,'2020-03-13 20:32:48','2020-03-13 20:34:11','Input_Array','Operation','input',13,0,0,4),(2764,17,NULL,15,NULL,'2020-03-13 20:32:48','2020-03-13 20:32:48','Output_Array','Operation','output',14,NULL,NULL,5),(2765,17,NULL,16,NULL,'2020-03-13 20:32:48','2020-03-13 20:32:48','Output_Array','Operation','output',14,NULL,NULL,5),(2766,17,NULL,17,NULL,'2020-03-13 20:32:48','2020-03-13 20:32:48','Output_Array','Operation','output',14,NULL,NULL,5),(2767,17,NULL,16,698,'2020-03-13 20:32:48','2020-03-13 20:34:11','Input_Array','Operation','input',13,0,1,4),(2768,17,NULL,17,698,'2020-03-13 20:32:48','2020-03-13 20:34:11','Input_Array','Operation','input',13,0,2,4),(2769,18,NULL,15,160,'2020-03-13 20:32:48','2020-03-13 20:32:48','Input Array','Operation','input',10,6,0,1),(2770,18,NULL,16,160,'2020-03-13 20:32:48','2020-03-13 20:32:48','Input Array','Operation','input',10,7,0,1),(2771,18,NULL,17,160,'2020-03-13 20:32:48','2020-03-13 20:32:48','Input Array','Operation','input',10,0,1,1),(2772,19,NULL,15,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Input Array','Operation','input',11,6,0,2),(2773,19,NULL,15,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Output Array','Operation','output',12,0,0,3),(2774,19,NULL,16,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Output Array','Operation','output',12,0,1,3),(2775,19,NULL,17,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Output Array','Operation','output',12,0,2,3),(2776,19,NULL,16,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Input Array','Operation','input',11,7,0,2),(2777,19,NULL,17,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Input Array','Operation','input',11,0,1,2),(2778,20,NULL,15,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Input_Array','Operation','input',13,0,0,4),(2779,20,NULL,15,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Output_Array','Operation','output',14,NULL,NULL,5),(2780,20,NULL,16,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Output_Array','Operation','output',14,NULL,NULL,5),(2781,20,NULL,17,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Output_Array','Operation','output',14,NULL,NULL,5),(2782,20,NULL,16,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Input_Array','Operation','input',13,0,1,4),(2783,20,NULL,17,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00','Input_Array','Operation','input',13,0,2,4),(2784,21,NULL,15,160,'2020-03-13 20:37:00','2020-03-13 20:39:32','Input Array','Operation','input',10,6,0,1),(2785,21,NULL,16,160,'2020-03-13 20:37:00','2020-03-13 20:39:32','Input Array','Operation','input',10,7,0,1),(2786,21,NULL,17,160,'2020-03-13 20:37:00','2020-03-13 20:39:32','Input Array','Operation','input',10,0,1,1),(2787,22,NULL,15,160,'2020-03-13 20:37:18','2020-03-13 20:39:05','Input Array','Operation','input',11,6,0,2),(2788,22,NULL,15,710,'2020-03-13 20:37:18','2020-03-13 20:40:24','Output Array','Operation','output',12,0,0,3),(2789,22,NULL,16,710,'2020-03-13 20:37:18','2020-03-13 20:40:24','Output Array','Operation','output',12,0,1,3),(2790,22,NULL,17,710,'2020-03-13 20:37:18','2020-03-13 20:40:24','Output Array','Operation','output',12,0,2,3),(2791,22,NULL,16,160,'2020-03-13 20:37:18','2020-03-13 20:39:05','Input Array','Operation','input',11,7,0,2),(2792,22,NULL,17,160,'2020-03-13 20:37:18','2020-03-13 20:39:05','Input Array','Operation','input',11,0,1,2),(2799,24,NULL,15,160,'2020-03-13 20:37:18','2020-03-13 20:39:05','Input Array','Operation','input',10,6,0,1),(2800,24,NULL,16,160,'2020-03-13 20:37:18','2020-03-13 20:39:05','Input Array','Operation','input',10,7,0,1),(2801,24,NULL,17,160,'2020-03-13 20:37:18','2020-03-13 20:39:05','Input Array','Operation','input',10,0,1,1),(2802,25,NULL,15,710,'2020-03-13 20:39:05','2020-03-13 20:40:32','Input Array','Operation','input',13,0,0,4),(2806,25,NULL,16,710,'2020-03-13 20:39:05','2020-03-13 20:40:32','Input Array','Operation','input',13,0,1,4),(2807,25,NULL,17,710,'2020-03-13 20:39:05','2020-03-13 20:40:32','Input Array','Operation','input',13,0,2,4),(2808,26,NULL,18,726,'2020-03-13 21:44:52','2020-03-13 21:46:29','Input Array','Operation','input',13,0,0,4),(2809,26,NULL,19,726,'2020-03-13 21:44:52','2020-03-13 21:46:29','Input Array','Operation','input',13,0,1,4),(2810,26,NULL,20,726,'2020-03-13 21:44:52','2020-03-13 21:46:29','Input Array','Operation','input',13,0,2,4),(2811,27,NULL,18,726,'2020-03-13 21:44:52','2020-03-13 21:46:29','Input Array','Operation','input',15,0,0,6),(2812,27,NULL,18,NULL,'2020-03-13 21:44:52','2020-03-17 01:17:09','Output Array','Operation','output',16,NULL,NULL,7),(2813,27,NULL,19,726,'2020-03-13 21:44:52','2020-03-13 21:46:29','Input Array','Operation','input',15,0,1,6),(2814,27,NULL,20,726,'2020-03-13 21:44:52','2020-03-13 21:46:29','Input Array','Operation','input',15,0,2,6),(2815,27,NULL,19,NULL,'2020-03-13 21:44:52','2020-03-17 01:17:09','Output Array','Operation','output',16,NULL,NULL,7),(2816,27,NULL,20,NULL,'2020-03-13 21:44:52','2020-03-17 01:17:09','Output Array','Operation','output',16,NULL,NULL,7),(2817,28,NULL,18,718,'2020-03-13 21:44:52','2020-03-13 21:45:47','Input Array','Operation','input',11,2,2,2),(2818,28,NULL,18,726,'2020-03-13 21:44:52','2020-03-13 21:46:21','Output Array','Operation','output',12,0,0,3),(2819,28,NULL,19,718,'2020-03-13 21:44:52','2020-03-13 21:45:47','Input Array','Operation','input',11,2,3,2),(2820,28,NULL,20,718,'2020-03-13 21:44:52','2020-03-13 21:45:47','Input Array','Operation','input',11,6,5,2),(2821,28,NULL,19,726,'2020-03-13 21:44:52','2020-03-13 21:46:21','Output Array','Operation','output',12,0,1,3),(2822,28,NULL,20,726,'2020-03-13 21:44:52','2020-03-13 21:46:21','Output Array','Operation','output',12,0,2,3),(2823,29,NULL,18,718,'2020-03-13 21:44:52','2020-03-13 21:45:47','Input Array','Operation','input',10,2,2,1),(2824,29,NULL,19,718,'2020-03-13 21:44:52','2020-03-13 21:45:47','Input Array','Operation','input',10,2,3,1),(2825,29,NULL,20,718,'2020-03-13 21:44:52','2020-03-13 21:45:47','Input Array','Operation','input',10,6,5,1),(2826,30,NULL,15,NULL,'2020-03-13 21:50:54','2020-03-13 21:50:54','Input Array','Operation','input',15,NULL,NULL,6),(2827,30,NULL,15,NULL,'2020-03-13 21:50:54','2020-03-13 21:50:54','Output Array','Operation','output',16,NULL,NULL,7),(2828,30,NULL,16,NULL,'2020-03-13 21:50:54','2020-03-13 21:50:54','Input Array','Operation','input',15,NULL,NULL,6),(2829,30,NULL,17,NULL,'2020-03-13 21:50:54','2020-03-13 21:50:54','Input Array','Operation','input',15,NULL,NULL,6),(2830,30,NULL,16,NULL,'2020-03-13 21:50:54','2020-03-13 21:50:54','Output Array','Operation','output',16,NULL,NULL,7),(2831,30,NULL,17,NULL,'2020-03-13 21:50:54','2020-03-13 21:50:54','Output Array','Operation','output',16,NULL,NULL,7),(2832,31,NULL,15,160,'2020-03-13 21:52:12','2020-03-13 21:52:18','Input Array','Operation','input',11,6,0,2),(2833,31,NULL,15,749,'2020-03-13 21:52:12','2020-03-13 21:53:41','Output Array','Operation','output',12,0,0,3),(2834,31,NULL,16,749,'2020-03-13 21:52:12','2020-03-13 21:53:41','Output Array','Operation','output',12,0,1,3),(2835,31,NULL,17,749,'2020-03-13 21:52:12','2020-03-13 21:53:41','Output Array','Operation','output',12,0,2,3),(2836,31,NULL,16,160,'2020-03-13 21:52:12','2020-03-13 21:52:18','Input Array','Operation','input',11,7,0,2),(2837,31,NULL,17,160,'2020-03-13 21:52:12','2020-03-13 21:52:18','Input Array','Operation','input',11,0,1,2),(2838,32,NULL,15,160,'2020-03-13 21:52:12','2020-03-13 21:52:18','Input Array','Operation','input',10,6,0,1),(2839,32,NULL,16,160,'2020-03-13 21:52:12','2020-03-13 21:52:18','Input Array','Operation','input',10,7,0,1),(2840,32,NULL,17,160,'2020-03-13 21:52:12','2020-03-13 21:52:18','Input Array','Operation','input',10,0,1,1),(2841,33,NULL,15,749,'2020-03-13 21:52:12','2020-03-13 21:53:49','Input Array','Operation','input',13,0,0,4),(2842,33,NULL,16,749,'2020-03-13 21:52:12','2020-03-13 21:53:49','Input Array','Operation','input',13,0,1,4),(2843,33,NULL,17,749,'2020-03-13 21:52:13','2020-03-13 21:53:49','Input Array','Operation','input',13,0,2,4),(2844,34,NULL,15,749,'2020-03-13 21:52:13','2020-03-13 21:53:49','Input Array','Operation','input',15,0,0,6),(2845,34,NULL,15,778,'2020-03-13 21:52:13','2020-03-13 21:58:23','Output Array','Operation','output',16,0,0,7),(2846,34,NULL,16,749,'2020-03-13 21:52:13','2020-03-13 21:53:49','Input Array','Operation','input',15,0,1,6),(2847,34,NULL,17,749,'2020-03-13 21:52:13','2020-03-13 21:53:49','Input Array','Operation','input',15,0,2,6),(2848,34,NULL,16,778,'2020-03-13 21:52:13','2020-03-13 21:58:23','Output Array','Operation','output',16,0,1,7),(2849,34,NULL,17,778,'2020-03-13 21:52:13','2020-03-13 21:58:23','Output Array','Operation','output',16,0,2,7),(2850,35,NULL,18,753,'2020-03-13 21:52:22','2020-03-13 21:54:12','Input Array','Operation','input',13,0,1,4),(2851,35,NULL,19,753,'2020-03-13 21:52:22','2020-03-13 21:54:12','Input Array','Operation','input',13,0,0,4),(2852,35,NULL,20,753,'2020-03-13 21:52:22','2020-03-13 21:54:12','Input Array','Operation','input',13,0,2,4),(2853,36,NULL,18,753,'2020-03-13 21:52:22','2020-03-13 21:54:12','Input Array','Operation','input',15,0,1,6),(2854,36,NULL,18,778,'2020-03-13 21:52:22','2020-03-13 21:58:23','Output Array','Operation','output',16,0,4,7),(2855,36,NULL,19,753,'2020-03-13 21:52:22','2020-03-13 21:54:12','Input Array','Operation','input',15,0,0,6),(2856,36,NULL,20,753,'2020-03-13 21:52:22','2020-03-13 21:54:12','Input Array','Operation','input',15,0,2,6),(2857,36,NULL,19,778,'2020-03-13 21:52:22','2020-03-13 21:58:23','Output Array','Operation','output',16,0,3,7),(2858,36,NULL,20,778,'2020-03-13 21:52:22','2020-03-13 21:58:23','Output Array','Operation','output',16,0,5,7),(2859,37,NULL,18,718,'2020-03-13 21:52:22','2020-03-13 21:52:25','Input Array','Operation','input',11,2,2,2),(2860,37,NULL,18,753,'2020-03-13 21:52:22','2020-03-13 21:53:59','Output Array','Operation','output',12,0,1,3),(2861,37,NULL,19,160,'2020-03-13 21:52:22','2020-03-13 21:52:25','Input Array','Operation','input',11,1,1,2),(2862,37,NULL,20,718,'2020-03-13 21:52:22','2020-03-13 21:52:25','Input Array','Operation','input',11,6,5,2),(2863,37,NULL,19,753,'2020-03-13 21:52:22','2020-03-13 21:53:59','Output Array','Operation','output',12,0,0,3),(2864,37,NULL,20,753,'2020-03-13 21:52:22','2020-03-13 21:53:59','Output Array','Operation','output',12,0,2,3),(2865,38,NULL,18,718,'2020-03-13 21:52:22','2020-03-13 21:52:25','Input Array','Operation','input',10,2,2,1),(2866,38,NULL,19,160,'2020-03-13 21:52:22','2020-03-13 21:52:25','Input Array','Operation','input',10,1,1,1),(2867,38,NULL,20,718,'2020-03-13 21:52:22','2020-03-13 21:52:25','Input Array','Operation','input',10,6,5,1),(2868,39,NULL,18,793,'2020-03-13 21:58:56','2020-03-13 22:00:22','Input Array','Operation','input',13,0,1,4),(2869,39,NULL,19,793,'2020-03-13 21:58:56','2020-03-13 22:00:22','Input Array','Operation','input',13,0,0,4),(2870,39,NULL,20,793,'2020-03-13 21:58:56','2020-03-13 22:00:22','Input Array','Operation','input',13,0,2,4),(2871,40,NULL,18,793,'2020-03-13 21:58:56','2020-03-13 22:00:22','Input Array','Operation','input',15,0,1,6),(2872,40,NULL,18,NULL,'2020-03-13 21:58:56','2020-03-13 22:06:14','Output Array','Operation','output',16,NULL,NULL,7),(2873,40,NULL,19,793,'2020-03-13 21:58:56','2020-03-13 22:00:22','Input Array','Operation','input',15,0,0,6),(2874,40,NULL,20,793,'2020-03-13 21:58:56','2020-03-13 22:00:22','Input Array','Operation','input',15,0,2,6),(2875,40,NULL,19,NULL,'2020-03-13 21:58:56','2020-03-13 22:06:14','Output Array','Operation','output',16,NULL,NULL,7),(2876,40,NULL,20,NULL,'2020-03-13 21:58:56','2020-03-13 22:06:14','Output Array','Operation','output',16,NULL,NULL,7),(2877,41,NULL,18,718,'2020-03-13 21:58:56','2020-03-13 21:58:59','Input Array','Operation','input',11,2,2,2),(2878,41,NULL,18,793,'2020-03-13 21:58:56','2020-03-13 22:00:11','Output Array','Operation','output',12,0,1,3),(2879,41,NULL,19,160,'2020-03-13 21:58:56','2020-03-13 21:58:59','Input Array','Operation','input',11,1,1,2),(2880,41,NULL,20,718,'2020-03-13 21:58:56','2020-03-13 21:58:59','Input Array','Operation','input',11,6,5,2),(2881,41,NULL,19,793,'2020-03-13 21:58:56','2020-03-13 22:00:11','Output Array','Operation','output',12,0,0,3),(2882,41,NULL,20,793,'2020-03-13 21:58:56','2020-03-13 22:00:11','Output Array','Operation','output',12,0,2,3),(2883,42,NULL,18,718,'2020-03-13 21:58:56','2020-03-13 21:58:59','Input Array','Operation','input',10,2,2,1),(2884,42,NULL,19,160,'2020-03-13 21:58:56','2020-03-13 21:58:59','Input Array','Operation','input',10,1,1,1),(2885,42,NULL,20,718,'2020-03-13 21:58:56','2020-03-13 21:58:59','Input Array','Operation','input',10,6,5,1),(2886,43,NULL,15,160,'2020-03-13 21:59:07','2020-03-13 21:59:10','Input Array','Operation','input',11,6,0,2),(2887,43,NULL,15,797,'2020-03-13 21:59:07','2020-03-13 22:00:32','Output Array','Operation','output',12,0,0,3),(2888,43,NULL,16,797,'2020-03-13 21:59:07','2020-03-13 22:00:32','Output Array','Operation','output',12,0,1,3),(2889,43,NULL,17,797,'2020-03-13 21:59:07','2020-03-13 22:00:32','Output Array','Operation','output',12,0,2,3),(2890,43,NULL,16,160,'2020-03-13 21:59:07','2020-03-13 21:59:10','Input Array','Operation','input',11,7,0,2),(2891,43,NULL,17,160,'2020-03-13 21:59:07','2020-03-13 21:59:10','Input Array','Operation','input',11,0,1,2),(2892,44,NULL,15,160,'2020-03-13 21:59:07','2020-03-13 21:59:10','Input Array','Operation','input',10,6,0,1),(2893,44,NULL,16,160,'2020-03-13 21:59:07','2020-03-13 21:59:10','Input Array','Operation','input',10,7,0,1),(2894,44,NULL,17,160,'2020-03-13 21:59:07','2020-03-13 21:59:10','Input Array','Operation','input',10,0,1,1),(2895,45,NULL,15,797,'2020-03-13 21:59:07','2020-03-13 22:00:43','Input Array','Operation','input',13,0,0,4),(2896,45,NULL,16,797,'2020-03-13 21:59:07','2020-03-13 22:00:43','Input Array','Operation','input',13,0,1,4),(2897,45,NULL,17,797,'2020-03-13 21:59:07','2020-03-13 22:00:43','Input Array','Operation','input',13,0,2,4),(2898,46,NULL,15,797,'2020-03-13 21:59:07','2020-03-13 22:00:43','Input Array','Operation','input',15,0,0,6),(2899,46,NULL,15,NULL,'2020-03-13 21:59:07','2020-03-13 22:06:14','Output Array','Operation','output',16,NULL,NULL,7),(2900,46,NULL,16,797,'2020-03-13 21:59:07','2020-03-13 22:00:43','Input Array','Operation','input',15,0,1,6),(2901,46,NULL,17,797,'2020-03-13 21:59:07','2020-03-13 22:00:43','Input Array','Operation','input',15,0,2,6),(2902,46,NULL,16,NULL,'2020-03-13 21:59:07','2020-03-13 22:06:14','Output Array','Operation','output',16,NULL,NULL,7),(2903,46,NULL,17,NULL,'2020-03-13 21:59:07','2020-03-13 22:06:14','Output Array','Operation','output',16,NULL,NULL,7),(2904,47,NULL,9,160,'2020-03-17 00:31:53','2020-03-17 00:36:40','Input Array','Operation','input',10,0,0,1),(2906,49,NULL,9,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,0,0,2),(2907,49,NULL,9,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,0,3),(2908,49,NULL,12,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,1,0,2),(2909,49,NULL,13,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,2,0,2),(2910,49,NULL,10,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,3,0,2),(2911,49,NULL,11,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,4,0,2),(2912,49,NULL,14,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,5,0,2),(2913,49,NULL,15,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,6,0,2),(2914,49,NULL,16,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,7,0,2),(2915,49,NULL,17,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,0,1,2),(2916,49,NULL,19,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,1,1,2),(2917,49,NULL,21,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,2,1,2),(2918,49,NULL,23,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,3,1,2),(2919,49,NULL,12,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,1,3),(2920,49,NULL,13,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,2,3),(2921,49,NULL,10,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,3,3),(2922,49,NULL,11,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,4,3),(2923,49,NULL,14,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,5,3),(2924,49,NULL,15,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,6,3),(2925,49,NULL,16,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,7,3),(2926,49,NULL,17,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,8,3),(2927,49,NULL,19,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,9,3),(2928,49,NULL,21,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,10,3),(2929,49,NULL,23,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,0,11,3),(2930,49,NULL,25,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,1,0,3),(2931,49,NULL,27,950,'2020-03-17 00:31:53','2020-03-17 00:48:41','Output Array','Operation','output',12,1,1,3),(2932,49,NULL,25,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,4,1,2),(2933,49,NULL,27,160,'2020-03-17 00:31:53','2020-03-17 00:31:53','Input Array','Operation','input',11,5,1,2),(2934,50,NULL,9,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,0,4),(2935,50,NULL,12,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,1,4),(2936,50,NULL,13,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,2,4),(2937,50,NULL,10,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,3,4),(2938,50,NULL,11,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,4,4),(2939,50,NULL,14,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,5,4),(2940,50,NULL,15,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,6,4),(2941,50,NULL,16,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,7,4),(2942,50,NULL,17,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,8,4),(2943,50,NULL,19,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,9,4),(2944,50,NULL,21,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,10,4),(2945,50,NULL,23,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,0,11,4),(2946,50,NULL,25,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,1,0,4),(2947,50,NULL,27,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',13,1,1,4),(2948,51,NULL,9,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,0,6),(2949,51,NULL,9,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,0,7),(2950,51,NULL,12,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,1,6),(2951,51,NULL,13,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,2,6),(2952,51,NULL,10,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,3,6),(2953,51,NULL,11,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,4,6),(2954,51,NULL,14,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,5,6),(2955,51,NULL,15,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,6,6),(2956,51,NULL,16,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,7,6),(2957,51,NULL,17,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,8,6),(2958,51,NULL,19,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,9,6),(2959,51,NULL,21,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,10,6),(2960,51,NULL,23,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,0,11,6),(2961,51,NULL,25,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,1,0,6),(2962,51,NULL,27,950,'2020-03-17 00:31:53','2020-03-17 00:48:58','Input Array','Operation','input',15,1,1,6),(2963,51,NULL,12,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,2,7),(2964,51,NULL,13,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,4,7),(2965,51,NULL,10,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,5,7),(2966,51,NULL,11,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,6,7),(2967,51,NULL,14,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,7,7),(2968,51,NULL,15,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,8,7),(2969,51,NULL,16,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,9,7),(2970,51,NULL,17,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,10,7),(2971,51,NULL,19,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,11,7),(2972,51,NULL,21,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,1,0,7),(2973,51,NULL,23,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,1,1,7),(2974,51,NULL,25,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,1,7),(2975,51,NULL,27,1020,'2020-03-17 00:31:53','2020-03-17 01:18:31','Output Array','Operation','output',16,0,3,7),(2976,47,NULL,12,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,1,0,1),(2977,47,NULL,13,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,2,0,1),(2978,47,NULL,10,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,3,0,1),(2979,47,NULL,11,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,4,0,1),(2980,47,NULL,14,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,5,0,1),(2981,47,NULL,15,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,6,0,1),(2982,47,NULL,16,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,7,0,1),(2983,47,NULL,17,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,0,1,1),(2984,47,NULL,19,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,1,1,1),(2985,47,NULL,21,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,2,1,1),(2986,47,NULL,23,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,3,1,1),(2987,47,NULL,25,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,4,1,1),(2988,47,NULL,27,160,'2020-03-17 00:36:40','2020-03-17 00:36:40','Input Array','Operation','input',10,5,1,1),(2989,52,NULL,1,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',15,1,2,6),(2990,52,NULL,1,1020,'2020-03-17 00:46:14','2020-03-17 01:19:21','Output Array','Operation','output',16,1,2,7),(2991,52,NULL,2,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',15,1,3,6),(2992,52,NULL,3,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',15,1,4,6),(2993,52,NULL,4,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',15,1,5,6),(2994,52,NULL,5,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',15,1,6,6),(2995,52,NULL,6,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',15,1,7,6),(2996,52,NULL,7,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',15,1,8,6),(2997,52,NULL,2,1020,'2020-03-17 00:46:14','2020-03-17 01:19:21','Output Array','Operation','output',16,1,3,7),(2998,52,NULL,3,1020,'2020-03-17 00:46:14','2020-03-17 01:19:21','Output Array','Operation','output',16,1,4,7),(2999,52,NULL,4,1020,'2020-03-17 00:46:14','2020-03-17 01:19:21','Output Array','Operation','output',16,1,5,7),(3000,52,NULL,5,1020,'2020-03-17 00:46:14','2020-03-17 01:19:21','Output Array','Operation','output',16,1,6,7),(3001,52,NULL,6,1020,'2020-03-17 00:46:14','2020-03-17 01:19:21','Output Array','Operation','output',16,1,7,7),(3002,52,NULL,7,1020,'2020-03-17 00:46:14','2020-03-17 01:19:21','Output Array','Operation','output',16,1,8,7),(3003,53,NULL,1,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',13,1,2,4),(3004,53,NULL,2,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',13,1,3,4),(3005,53,NULL,3,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',13,1,4,4),(3006,53,NULL,4,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',13,1,5,4),(3007,53,NULL,5,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',13,1,6,4),(3008,53,NULL,6,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',13,1,7,4),(3009,53,NULL,7,950,'2020-03-17 00:46:14','2020-03-17 00:48:58','Input Array','Operation','input',13,1,8,4),(3010,54,NULL,1,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',11,0,0,2),(3011,54,NULL,1,950,'2020-03-17 00:46:14','2020-03-17 00:48:45','Output Array','Operation','output',12,1,2,3),(3012,54,NULL,2,950,'2020-03-17 00:46:14','2020-03-17 00:48:45','Output Array','Operation','output',12,1,3,3),(3013,54,NULL,3,950,'2020-03-17 00:46:14','2020-03-17 00:48:45','Output Array','Operation','output',12,1,4,3),(3014,54,NULL,4,950,'2020-03-17 00:46:14','2020-03-17 00:48:45','Output Array','Operation','output',12,1,5,3),(3015,54,NULL,5,950,'2020-03-17 00:46:14','2020-03-17 00:48:45','Output Array','Operation','output',12,1,6,3),(3016,54,NULL,6,950,'2020-03-17 00:46:14','2020-03-17 00:48:45','Output Array','Operation','output',12,1,7,3),(3017,54,NULL,7,950,'2020-03-17 00:46:14','2020-03-17 00:48:45','Output Array','Operation','output',12,1,8,3),(3018,54,NULL,2,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',11,1,0,2),(3019,54,NULL,3,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',11,2,0,2),(3020,54,NULL,4,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',11,3,0,2),(3021,54,NULL,5,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',11,4,0,2),(3022,54,NULL,6,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',11,5,0,2),(3023,54,NULL,7,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',11,6,0,2),(3024,55,NULL,1,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',10,0,0,1),(3025,55,NULL,2,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',10,1,0,1),(3026,55,NULL,3,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',10,2,0,1),(3027,55,NULL,4,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',10,3,0,1),(3028,55,NULL,5,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',10,4,0,1),(3029,55,NULL,6,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',10,5,0,1),(3030,55,NULL,7,2,'2020-03-17 00:46:14','2020-03-17 00:46:14','Input Array','Operation','input',10,6,0,1),(3031,56,NULL,1,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',15,0,0,6),(3032,56,NULL,1,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19','Output Array','Operation','output',16,1,2,7),(3033,56,NULL,2,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',15,0,1,6),(3034,56,NULL,3,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',15,0,2,6),(3035,56,NULL,4,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',15,0,3,6),(3036,56,NULL,5,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',15,0,4,6),(3037,56,NULL,6,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',15,0,5,6),(3038,56,NULL,7,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',15,0,6,6),(3039,56,NULL,2,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19','Output Array','Operation','output',16,1,3,7),(3040,56,NULL,3,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19','Output Array','Operation','output',16,1,4,7),(3041,56,NULL,4,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19','Output Array','Operation','output',16,1,5,7),(3042,56,NULL,5,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19','Output Array','Operation','output',16,1,6,7),(3043,56,NULL,6,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19','Output Array','Operation','output',16,1,7,7),(3044,56,NULL,7,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19','Output Array','Operation','output',16,1,8,7),(3045,57,NULL,1,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',13,0,0,4),(3046,57,NULL,2,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',13,0,1,4),(3047,57,NULL,3,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',13,0,2,4),(3048,57,NULL,4,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',13,0,3,4),(3049,57,NULL,5,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',13,0,4,4),(3050,57,NULL,6,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',13,0,5,4),(3051,57,NULL,7,1050,'2020-03-17 01:20:19','2020-03-17 01:24:33','Input Array','Operation','input',13,0,6,4),(3052,58,NULL,1,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',11,0,0,2),(3053,58,NULL,1,1050,'2020-03-17 01:20:19','2020-03-17 01:24:20','Output Array','Operation','output',12,0,0,3),(3054,58,NULL,2,1050,'2020-03-17 01:20:19','2020-03-17 01:24:20','Output Array','Operation','output',12,0,1,3),(3055,58,NULL,3,1050,'2020-03-17 01:20:19','2020-03-17 01:24:20','Output Array','Operation','output',12,0,2,3),(3056,58,NULL,4,1050,'2020-03-17 01:20:19','2020-03-17 01:24:20','Output Array','Operation','output',12,0,3,3),(3057,58,NULL,5,1050,'2020-03-17 01:20:19','2020-03-17 01:24:20','Output Array','Operation','output',12,0,4,3),(3058,58,NULL,6,1050,'2020-03-17 01:20:19','2020-03-17 01:24:20','Output Array','Operation','output',12,0,5,3),(3059,58,NULL,7,1050,'2020-03-17 01:20:19','2020-03-17 01:24:20','Output Array','Operation','output',12,0,6,3),(3060,58,NULL,2,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',11,1,0,2),(3061,58,NULL,3,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',11,2,0,2),(3062,58,NULL,4,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',11,3,0,2),(3063,58,NULL,5,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',11,4,0,2),(3064,58,NULL,6,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',11,5,0,2),(3065,58,NULL,7,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',11,6,0,2),(3066,59,NULL,1,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',10,0,0,1),(3067,59,NULL,2,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',10,1,0,1),(3068,59,NULL,3,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',10,2,0,1),(3069,59,NULL,4,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',10,3,0,1),(3070,59,NULL,5,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',10,4,0,1),(3071,59,NULL,6,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',10,5,0,1),(3072,59,NULL,7,2,'2020-03-17 01:20:19','2020-03-17 01:20:22','Input Array','Operation','input',10,6,0,1),(3073,60,NULL,1,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',15,0,0,6),(3074,60,NULL,1,1132,'2020-03-17 01:20:30','2020-03-17 01:30:38','Output Array','Operation','output',16,0,0,7),(3075,60,NULL,2,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',15,0,1,6),(3076,60,NULL,3,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',15,0,2,6),(3077,60,NULL,4,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',15,0,3,6),(3078,60,NULL,5,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',15,0,4,6),(3079,60,NULL,6,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',15,0,5,6),(3080,60,NULL,7,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',15,0,6,6),(3081,60,NULL,2,1132,'2020-03-17 01:20:30','2020-03-17 01:30:38','Output Array','Operation','output',16,0,1,7),(3082,60,NULL,3,1132,'2020-03-17 01:20:30','2020-03-17 01:30:38','Output Array','Operation','output',16,0,2,7),(3083,60,NULL,4,1132,'2020-03-17 01:20:30','2020-03-17 01:30:38','Output Array','Operation','output',16,0,3,7),(3084,60,NULL,5,1132,'2020-03-17 01:20:30','2020-03-17 01:30:38','Output Array','Operation','output',16,0,4,7),(3085,60,NULL,6,1132,'2020-03-17 01:20:30','2020-03-17 01:30:38','Output Array','Operation','output',16,0,5,7),(3086,60,NULL,7,1132,'2020-03-17 01:20:30','2020-03-17 01:30:38','Output Array','Operation','output',16,0,6,7),(3087,61,NULL,1,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',13,0,0,4),(3088,61,NULL,2,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',13,0,1,4),(3089,61,NULL,3,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',13,0,2,4),(3090,61,NULL,4,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',13,0,3,4),(3091,61,NULL,5,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',13,0,4,4),(3092,61,NULL,6,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',13,0,5,4),(3093,61,NULL,7,1094,'2020-03-17 01:20:30','2020-03-17 01:26:43','Input Array','Operation','input',13,0,6,4),(3094,62,NULL,1,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',11,0,0,2),(3095,62,NULL,1,1094,'2020-03-17 01:20:30','2020-03-17 01:26:34','Output Array','Operation','output',12,0,0,3),(3096,62,NULL,2,1094,'2020-03-17 01:20:30','2020-03-17 01:26:34','Output Array','Operation','output',12,0,1,3),(3097,62,NULL,3,1094,'2020-03-17 01:20:30','2020-03-17 01:26:34','Output Array','Operation','output',12,0,2,3),(3098,62,NULL,4,1094,'2020-03-17 01:20:30','2020-03-17 01:26:34','Output Array','Operation','output',12,0,3,3),(3099,62,NULL,5,1094,'2020-03-17 01:20:30','2020-03-17 01:26:34','Output Array','Operation','output',12,0,4,3),(3100,62,NULL,6,1094,'2020-03-17 01:20:30','2020-03-17 01:26:34','Output Array','Operation','output',12,0,5,3),(3101,62,NULL,7,1094,'2020-03-17 01:20:30','2020-03-17 01:26:34','Output Array','Operation','output',12,0,6,3),(3102,62,NULL,2,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',11,1,0,2),(3103,62,NULL,3,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',11,2,0,2),(3104,62,NULL,4,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',11,3,0,2),(3105,62,NULL,5,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',11,4,0,2),(3106,62,NULL,6,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',11,5,0,2),(3107,62,NULL,7,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',11,6,0,2),(3108,63,NULL,1,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',10,0,0,1),(3109,63,NULL,2,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',10,1,0,1),(3110,63,NULL,3,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',10,2,0,1),(3111,63,NULL,4,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',10,3,0,1),(3112,63,NULL,5,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',10,4,0,1),(3113,63,NULL,6,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',10,5,0,1),(3114,63,NULL,7,2,'2020-03-17 01:20:30','2020-03-17 01:20:34','Input Array','Operation','input',10,6,0,1),(3115,64,NULL,9,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,0,0,1),(3116,64,NULL,12,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,1,0,1),(3117,64,NULL,13,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,2,0,1),(3118,64,NULL,10,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,3,0,1),(3119,64,NULL,11,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,4,0,1),(3120,64,NULL,14,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,5,0,1),(3121,64,NULL,15,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,6,0,1),(3122,64,NULL,16,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,7,0,1),(3123,64,NULL,17,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,0,1,1),(3124,64,NULL,19,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,1,1,1),(3125,64,NULL,21,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,2,1,1),(3126,64,NULL,23,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,3,1,1),(3127,64,NULL,25,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,4,1,1),(3128,64,NULL,27,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',10,5,1,1),(3129,65,NULL,9,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,0,0,2),(3130,65,NULL,9,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,0,7,3),(3131,65,NULL,12,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,1,0,2),(3132,65,NULL,13,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,2,0,2),(3133,65,NULL,10,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,3,0,2),(3134,65,NULL,11,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,4,0,2),(3135,65,NULL,14,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,5,0,2),(3136,65,NULL,15,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,6,0,2),(3137,65,NULL,16,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,7,0,2),(3138,65,NULL,17,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,0,1,2),(3139,65,NULL,19,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,1,1,2),(3140,65,NULL,21,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,2,1,2),(3141,65,NULL,23,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,3,1,2),(3142,65,NULL,12,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,0,8,3),(3143,65,NULL,13,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,0,9,3),(3144,65,NULL,10,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,0,10,3),(3145,65,NULL,11,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,0,11,3),(3146,65,NULL,14,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,0,3),(3147,65,NULL,15,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,1,3),(3148,65,NULL,16,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,2,3),(3149,65,NULL,17,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,3,3),(3150,65,NULL,19,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,4,3),(3151,65,NULL,21,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,5,3),(3152,65,NULL,23,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,6,3),(3153,65,NULL,25,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,7,3),(3154,65,NULL,27,1050,'2020-03-17 01:23:30','2020-03-17 01:24:24','Output Array','Operation','output',12,1,8,3),(3155,65,NULL,25,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,4,1,2),(3156,65,NULL,27,160,'2020-03-17 01:23:30','2020-03-17 01:23:33','Input Array','Operation','input',11,5,1,2),(3157,66,NULL,9,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,0,7,4),(3158,66,NULL,12,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,0,8,4),(3159,66,NULL,13,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,0,9,4),(3160,66,NULL,10,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,0,10,4),(3161,66,NULL,11,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,0,11,4),(3162,66,NULL,14,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,0,4),(3163,66,NULL,15,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,1,4),(3164,66,NULL,16,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,2,4),(3165,66,NULL,17,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,3,4),(3166,66,NULL,19,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,4,4),(3167,66,NULL,21,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,5,4),(3168,66,NULL,23,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,6,4),(3169,66,NULL,25,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,7,4),(3170,66,NULL,27,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',13,1,8,4),(3171,67,NULL,9,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,0,7,6),(3172,67,NULL,9,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,2,7),(3173,67,NULL,12,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,0,8,6),(3174,67,NULL,13,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,0,9,6),(3175,67,NULL,10,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,0,10,6),(3176,67,NULL,11,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,0,11,6),(3177,67,NULL,14,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,0,6),(3178,67,NULL,15,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,1,6),(3179,67,NULL,16,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,2,6),(3180,67,NULL,17,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,3,6),(3181,67,NULL,19,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,4,6),(3182,67,NULL,21,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,5,6),(3183,67,NULL,23,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,6,6),(3184,67,NULL,25,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,7,6),(3185,67,NULL,27,1050,'2020-03-17 01:23:30','2020-03-17 01:24:33','Input Array','Operation','input',15,1,8,6),(3186,67,NULL,12,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,4,7),(3187,67,NULL,13,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,6,7),(3188,67,NULL,10,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,7,7),(3189,67,NULL,11,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,8,7),(3190,67,NULL,14,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,0,7,7),(3191,67,NULL,15,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,0,8,7),(3192,67,NULL,16,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,0,9,7),(3193,67,NULL,17,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,0,10,7),(3194,67,NULL,19,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,0,11,7),(3195,67,NULL,21,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,0,7),(3196,67,NULL,23,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,1,7),(3197,67,NULL,25,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,3,7),(3198,67,NULL,27,1132,'2020-03-17 01:23:30','2020-03-17 01:30:52','Output Array','Operation','output',16,1,5,7),(3199,68,NULL,9,160,'2020-03-17 01:43:47','2020-03-17 01:44:04','Input Array','Operation','input',10,0,0,1),(3200,68,NULL,12,160,'2020-03-17 01:43:47','2020-03-17 01:44:04','Input Array','Operation','input',10,1,0,1),(3201,68,NULL,13,160,'2020-03-17 01:43:47','2020-03-17 01:44:04','Input Array','Operation','input',10,2,0,1),(3202,68,NULL,10,160,'2020-03-17 01:43:47','2020-03-17 01:44:04','Input Array','Operation','input',10,3,0,1),(3203,68,NULL,11,160,'2020-03-17 01:43:47','2020-03-17 01:44:04','Input Array','Operation','input',10,4,0,1),(3204,68,NULL,14,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,5,0,1),(3205,68,NULL,15,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,6,0,1),(3206,68,NULL,16,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,7,0,1),(3207,68,NULL,17,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,0,1,1),(3208,68,NULL,19,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,1,1,1),(3209,68,NULL,21,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,2,1,1),(3210,68,NULL,23,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,3,1,1),(3211,68,NULL,25,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,4,1,1),(3212,68,NULL,27,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',10,5,1,1),(3213,69,NULL,9,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,0,0,2),(3214,69,NULL,9,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,0,3),(3215,69,NULL,12,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,1,0,2),(3216,69,NULL,13,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,2,0,2),(3217,69,NULL,10,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,3,0,2),(3218,69,NULL,11,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,4,0,2),(3219,69,NULL,14,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,5,0,2),(3220,69,NULL,15,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,6,0,2),(3221,69,NULL,16,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,7,0,2),(3222,69,NULL,17,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,0,1,2),(3223,69,NULL,19,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,1,1,2),(3224,69,NULL,21,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,2,1,2),(3225,69,NULL,23,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,3,1,2),(3226,69,NULL,12,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,1,3),(3227,69,NULL,13,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,2,3),(3228,69,NULL,10,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,3,3),(3229,69,NULL,11,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,4,3),(3230,69,NULL,14,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,5,3),(3231,69,NULL,15,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,6,3),(3232,69,NULL,16,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,7,3),(3233,69,NULL,17,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,8,3),(3234,69,NULL,19,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,9,3),(3235,69,NULL,21,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,10,3),(3236,69,NULL,23,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,0,11,3),(3237,69,NULL,25,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,1,0,3),(3238,69,NULL,27,1169,'2020-03-17 01:43:47','2020-03-17 01:46:30','Output Array','Operation','output',12,1,1,3),(3239,69,NULL,25,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,4,1,2),(3240,69,NULL,27,160,'2020-03-17 01:43:47','2020-03-17 01:44:05','Input Array','Operation','input',11,5,1,2),(3241,70,NULL,9,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,0,4),(3242,70,NULL,12,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,1,4),(3243,70,NULL,13,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,2,4),(3244,70,NULL,10,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,3,4),(3245,70,NULL,11,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,4,4),(3246,70,NULL,14,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,5,4),(3247,70,NULL,15,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,6,4),(3248,70,NULL,16,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,7,4),(3249,70,NULL,17,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,8,4),(3250,70,NULL,19,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,9,4),(3251,70,NULL,21,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,10,4),(3252,70,NULL,23,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,0,11,4),(3253,70,NULL,25,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,1,0,4),(3254,70,NULL,27,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',13,1,1,4),(3255,71,NULL,9,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,0,6),(3256,71,NULL,9,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,0,7),(3257,71,NULL,12,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,1,6),(3258,71,NULL,13,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,2,6),(3259,71,NULL,10,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,3,6),(3260,71,NULL,11,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,4,6),(3261,71,NULL,14,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,5,6),(3262,71,NULL,15,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,6,6),(3263,71,NULL,16,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,7,6),(3264,71,NULL,17,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,8,6),(3265,71,NULL,19,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,9,6),(3266,71,NULL,21,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,10,6),(3267,71,NULL,23,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,0,11,6),(3268,71,NULL,25,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,1,0,6),(3269,71,NULL,27,1169,'2020-03-17 01:43:47','2020-03-17 01:46:47','Input Array','Operation','input',15,1,1,6),(3270,71,NULL,12,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,2,7),(3271,71,NULL,13,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,4,7),(3272,71,NULL,10,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,5,7),(3273,71,NULL,11,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,6,7),(3274,71,NULL,14,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,7,7),(3275,71,NULL,15,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,8,7),(3276,71,NULL,16,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,9,7),(3277,71,NULL,17,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,10,7),(3278,71,NULL,19,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,11,7),(3279,71,NULL,21,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,1,0,7),(3280,71,NULL,23,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,1,1,7),(3281,71,NULL,25,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,1,7),(3282,71,NULL,27,1214,'2020-03-17 01:43:47','2020-03-17 01:51:37','Output Array','Operation','output',16,0,3,7),(3283,72,NULL,1,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',15,1,2,6),(3284,72,NULL,1,1236,'2020-03-17 01:43:53','2020-03-17 01:53:36','Output Array','Operation','output',16,0,0,7),(3285,72,NULL,2,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',15,1,3,6),(3286,72,NULL,3,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',15,1,4,6),(3287,72,NULL,4,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',15,1,5,6),(3288,72,NULL,5,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',15,1,6,6),(3289,72,NULL,6,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',15,1,7,6),(3290,72,NULL,7,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',15,1,8,6),(3291,72,NULL,2,1236,'2020-03-17 01:43:53','2020-03-17 01:53:36','Output Array','Operation','output',16,0,1,7),(3292,72,NULL,3,1236,'2020-03-17 01:43:53','2020-03-17 01:53:36','Output Array','Operation','output',16,0,2,7),(3293,72,NULL,4,1236,'2020-03-17 01:43:53','2020-03-17 01:53:36','Output Array','Operation','output',16,0,3,7),(3294,72,NULL,5,1236,'2020-03-17 01:43:53','2020-03-17 01:53:36','Output Array','Operation','output',16,0,4,7),(3295,72,NULL,6,1236,'2020-03-17 01:43:53','2020-03-17 01:53:36','Output Array','Operation','output',16,0,5,7),(3296,72,NULL,7,1236,'2020-03-17 01:43:53','2020-03-17 01:53:36','Output Array','Operation','output',16,0,6,7),(3297,73,NULL,1,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',13,1,2,4),(3298,73,NULL,2,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',13,1,3,4),(3299,73,NULL,3,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',13,1,4,4),(3300,73,NULL,4,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',13,1,5,4),(3301,73,NULL,5,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',13,1,6,4),(3302,73,NULL,6,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',13,1,7,4),(3303,73,NULL,7,1169,'2020-03-17 01:43:53','2020-03-17 01:46:47','Input Array','Operation','input',13,1,8,4),(3304,74,NULL,1,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',11,0,0,2),(3305,74,NULL,1,1169,'2020-03-17 01:43:53','2020-03-17 01:46:35','Output Array','Operation','output',12,1,2,3),(3306,74,NULL,2,1169,'2020-03-17 01:43:53','2020-03-17 01:46:35','Output Array','Operation','output',12,1,3,3),(3307,74,NULL,3,1169,'2020-03-17 01:43:53','2020-03-17 01:46:35','Output Array','Operation','output',12,1,4,3),(3308,74,NULL,4,1169,'2020-03-17 01:43:53','2020-03-17 01:46:35','Output Array','Operation','output',12,1,5,3),(3309,74,NULL,5,1169,'2020-03-17 01:43:53','2020-03-17 01:46:35','Output Array','Operation','output',12,1,6,3),(3310,74,NULL,6,1169,'2020-03-17 01:43:53','2020-03-17 01:46:35','Output Array','Operation','output',12,1,7,3),(3311,74,NULL,7,1169,'2020-03-17 01:43:53','2020-03-17 01:46:35','Output Array','Operation','output',12,1,8,3),(3312,74,NULL,2,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',11,1,0,2),(3313,74,NULL,3,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',11,2,0,2),(3314,74,NULL,4,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',11,3,0,2),(3315,74,NULL,5,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',11,4,0,2),(3316,74,NULL,6,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',11,5,0,2),(3317,74,NULL,7,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',11,6,0,2),(3318,75,NULL,1,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',10,0,0,1),(3319,75,NULL,2,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',10,1,0,1),(3320,75,NULL,3,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',10,2,0,1),(3321,75,NULL,4,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',10,3,0,1),(3322,75,NULL,5,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',10,4,0,1),(3323,75,NULL,6,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',10,5,0,1),(3324,75,NULL,7,2,'2020-03-17 01:43:53','2020-03-17 01:43:56','Input Array','Operation','input',10,6,0,1),(3325,76,NULL,1,1252,'2020-03-17 01:56:06','2020-03-17 01:56:33','Input Array','Operation','input',15,0,0,6),(3326,76,NULL,1,1298,'2020-03-17 01:56:06','2020-03-17 01:59:55','Output Array','Operation','output',16,0,0,7),(3327,76,NULL,2,1252,'2020-03-17 01:56:06','2020-03-17 01:56:33','Input Array','Operation','input',15,0,1,6),(3328,76,NULL,3,1252,'2020-03-17 01:56:06','2020-03-17 01:56:33','Input Array','Operation','input',15,0,2,6),(3329,76,NULL,4,1252,'2020-03-17 01:56:06','2020-03-17 01:56:33','Input Array','Operation','input',15,0,3,6),(3330,76,NULL,5,1252,'2020-03-17 01:56:06','2020-03-17 01:56:33','Input Array','Operation','input',15,0,4,6),(3331,76,NULL,6,1252,'2020-03-17 01:56:06','2020-03-17 01:56:33','Input Array','Operation','input',15,0,5,6),(3332,76,NULL,7,1252,'2020-03-17 01:56:06','2020-03-17 01:56:33','Input Array','Operation','input',15,0,6,6),(3333,76,NULL,2,1298,'2020-03-17 01:56:06','2020-03-17 01:59:55','Output Array','Operation','output',16,0,1,7),(3334,76,NULL,3,1298,'2020-03-17 01:56:06','2020-03-17 01:59:55','Output Array','Operation','output',16,0,2,7),(3335,76,NULL,4,1298,'2020-03-17 01:56:06','2020-03-17 01:59:55','Output Array','Operation','output',16,0,3,7),(3336,76,NULL,5,1298,'2020-03-17 01:56:07','2020-03-17 01:59:55','Output Array','Operation','output',16,0,4,7),(3337,76,NULL,6,1298,'2020-03-17 01:56:07','2020-03-17 01:59:55','Output Array','Operation','output',16,0,5,7),(3338,76,NULL,7,1298,'2020-03-17 01:56:07','2020-03-17 01:59:55','Output Array','Operation','output',16,0,6,7),(3339,77,NULL,1,1252,'2020-03-17 01:56:07','2020-03-17 01:56:33','Input Array','Operation','input',13,0,0,4),(3340,77,NULL,2,1252,'2020-03-17 01:56:07','2020-03-17 01:56:33','Input Array','Operation','input',13,0,1,4),(3341,77,NULL,3,1252,'2020-03-17 01:56:07','2020-03-17 01:56:33','Input Array','Operation','input',13,0,2,4),(3342,77,NULL,4,1252,'2020-03-17 01:56:07','2020-03-17 01:56:33','Input Array','Operation','input',13,0,3,4),(3343,77,NULL,5,1252,'2020-03-17 01:56:07','2020-03-17 01:56:33','Input Array','Operation','input',13,0,4,4),(3344,77,NULL,6,1252,'2020-03-17 01:56:07','2020-03-17 01:56:33','Input Array','Operation','input',13,0,5,4),(3345,77,NULL,7,1252,'2020-03-17 01:56:07','2020-03-17 01:56:33','Input Array','Operation','input',13,0,6,4),(3346,78,NULL,1,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',11,0,0,2),(3347,78,NULL,1,1252,'2020-03-17 01:56:07','2020-03-17 01:56:25','Output Array','Operation','output',12,0,0,3),(3348,78,NULL,2,1252,'2020-03-17 01:56:07','2020-03-17 01:56:25','Output Array','Operation','output',12,0,1,3),(3349,78,NULL,3,1252,'2020-03-17 01:56:07','2020-03-17 01:56:25','Output Array','Operation','output',12,0,2,3),(3350,78,NULL,4,1252,'2020-03-17 01:56:07','2020-03-17 01:56:25','Output Array','Operation','output',12,0,3,3),(3351,78,NULL,5,1252,'2020-03-17 01:56:07','2020-03-17 01:56:25','Output Array','Operation','output',12,0,4,3),(3352,78,NULL,6,1252,'2020-03-17 01:56:07','2020-03-17 01:56:25','Output Array','Operation','output',12,0,5,3),(3353,78,NULL,7,1252,'2020-03-17 01:56:07','2020-03-17 01:56:25','Output Array','Operation','output',12,0,6,3),(3354,78,NULL,2,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',11,1,0,2),(3355,78,NULL,3,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',11,2,0,2),(3356,78,NULL,4,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',11,3,0,2),(3357,78,NULL,5,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',11,4,0,2),(3358,78,NULL,6,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',11,5,0,2),(3359,78,NULL,7,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',11,6,0,2),(3360,79,NULL,1,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',10,0,0,1),(3361,79,NULL,2,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',10,1,0,1),(3362,79,NULL,3,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',10,2,0,1),(3363,79,NULL,4,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',10,3,0,1),(3364,79,NULL,5,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',10,4,0,1),(3365,79,NULL,6,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',10,5,0,1),(3366,79,NULL,7,2,'2020-03-17 01:56:07','2020-03-17 01:56:09','Input Array','Operation','input',10,6,0,1),(3367,80,NULL,9,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,0,0,1),(3368,80,NULL,12,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,1,0,1),(3369,80,NULL,13,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,2,0,1),(3370,80,NULL,10,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,3,0,1),(3371,80,NULL,11,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,4,0,1),(3372,80,NULL,14,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,5,0,1),(3373,80,NULL,15,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,6,0,1),(3374,80,NULL,16,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,7,0,1),(3375,80,NULL,17,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,0,1,1),(3376,80,NULL,19,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,1,1,1),(3377,80,NULL,21,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,2,1,1),(3378,80,NULL,23,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,3,1,1),(3379,80,NULL,25,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,4,1,1),(3380,80,NULL,27,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',10,5,1,1),(3381,81,NULL,9,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,0,0,2),(3382,81,NULL,9,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,0,3),(3383,81,NULL,12,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,1,0,2),(3384,81,NULL,13,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,2,0,2),(3385,81,NULL,10,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,3,0,2),(3386,81,NULL,11,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,4,0,2),(3387,81,NULL,14,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,5,0,2),(3388,81,NULL,15,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,6,0,2),(3389,81,NULL,16,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,7,0,2),(3390,81,NULL,17,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,0,1,2),(3391,81,NULL,19,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,1,1,2),(3392,81,NULL,21,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,2,1,2),(3393,81,NULL,23,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,3,1,2),(3394,81,NULL,12,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,1,3),(3395,81,NULL,13,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,2,3),(3396,81,NULL,10,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,3,3),(3397,81,NULL,11,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,4,3),(3398,81,NULL,14,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,5,3),(3399,81,NULL,15,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,6,3),(3400,81,NULL,16,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,7,3),(3401,81,NULL,17,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,8,3),(3402,81,NULL,19,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,9,3),(3403,81,NULL,21,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,10,3),(3404,81,NULL,23,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,0,11,3),(3405,81,NULL,25,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,1,0,3),(3406,81,NULL,27,1260,'2020-03-17 01:57:24','2020-03-17 01:57:44','Output Array','Operation','output',12,1,1,3),(3407,81,NULL,25,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,4,1,2),(3408,81,NULL,27,160,'2020-03-17 01:57:24','2020-03-17 01:57:28','Input Array','Operation','input',11,5,1,2),(3409,82,NULL,9,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,0,4),(3410,82,NULL,12,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,1,4),(3411,82,NULL,13,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,2,4),(3412,82,NULL,10,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,3,4),(3413,82,NULL,11,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,4,4),(3414,82,NULL,14,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,5,4),(3415,82,NULL,15,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,6,4),(3416,82,NULL,16,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,7,4),(3417,82,NULL,17,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,8,4),(3418,82,NULL,19,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,9,4),(3419,82,NULL,21,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,10,4),(3420,82,NULL,23,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,0,11,4),(3421,82,NULL,25,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,1,0,4),(3422,82,NULL,27,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',13,1,1,4),(3423,83,NULL,9,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,0,6),(3424,83,NULL,9,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,0,7,7),(3425,83,NULL,12,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,1,6),(3426,83,NULL,13,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,2,6),(3427,83,NULL,10,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,3,6),(3428,83,NULL,11,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,4,6),(3429,83,NULL,14,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,5,6),(3430,83,NULL,15,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,6,6),(3431,83,NULL,16,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,7,6),(3432,83,NULL,17,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,8,6),(3433,83,NULL,19,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,9,6),(3434,83,NULL,21,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,10,6),(3435,83,NULL,23,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,0,11,6),(3436,83,NULL,25,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,1,0,6),(3437,83,NULL,27,1260,'2020-03-17 01:57:24','2020-03-17 01:57:50','Input Array','Operation','input',15,1,1,6),(3438,83,NULL,12,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,0,9,7),(3439,83,NULL,13,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,0,11,7),(3440,83,NULL,10,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,0,7),(3441,83,NULL,11,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,1,7),(3442,83,NULL,14,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,2,7),(3443,83,NULL,15,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,3,7),(3444,83,NULL,16,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,4,7),(3445,83,NULL,17,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,5,7),(3446,83,NULL,19,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,6,7),(3447,83,NULL,21,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,7,7),(3448,83,NULL,23,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,1,8,7),(3449,83,NULL,25,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,0,8,7),(3450,83,NULL,27,1298,'2020-03-17 01:57:24','2020-03-17 01:59:58','Output Array','Operation','output',16,0,10,7);
/*!40000 ALTER TABLE `field_values` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `groups`
--

DROP TABLE IF EXISTS `groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=237 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `groups`
--

LOCK TABLES `groups` WRITE;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;
INSERT INTO `groups` VALUES (1,'admin','These users can use administrative functions (make users, etc)','2013-11-15 21:37:36','2013-11-15 21:37:36'),(235,'technicians','People who run jobs','2017-10-02 17:50:56','2017-10-02 17:50:56'),(236,'neptune','','2018-07-25 16:22:30','2018-07-25 16:22:30');
/*!40000 ALTER TABLE `groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `invoices`
--

DROP TABLE IF EXISTS `invoices`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `invoices` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `year` int(11) DEFAULT NULL,
  `month` int(11) DEFAULT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `status` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `notes` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `invoices`
--

LOCK TABLES `invoices` WRITE;
/*!40000 ALTER TABLE `invoices` DISABLE KEYS */;
/*!40000 ALTER TABLE `invoices` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `items`
--

DROP TABLE IF EXISTS `items`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `items` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `location` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `quantity` int(11) DEFAULT NULL,
  `object_type_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `inuse` int(11) DEFAULT '0',
  `sample_id` int(11) DEFAULT NULL,
  `data` mediumtext COLLATE utf8_unicode_ci,
  `locator_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_items_on_object_type_id` (`object_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1320 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `items`
--

LOCK TABLES `items` WRITE;
/*!40000 ALTER TABLE `items` DISABLE KEYS */;
INSERT INTO `items` VALUES (1,'Bench',1,3,'2020-03-11 16:15:42','2020-03-11 16:15:42',0,NULL,NULL,NULL),(2,'Freezer',1,3,'2020-03-11 16:19:02','2020-03-13 18:52:33',0,NULL,NULL,NULL),(3,NULL,1,1,'2020-03-11 16:19:32','2020-03-11 16:19:32',0,1,NULL,NULL),(4,NULL,1,1,'2020-03-11 16:19:41','2020-03-11 16:20:05',0,2,NULL,NULL),(5,NULL,1,1,'2020-03-11 16:20:18','2020-03-11 16:20:18',0,3,NULL,NULL),(6,NULL,1,1,'2020-03-11 16:20:26','2020-03-11 16:20:26',0,4,NULL,NULL),(7,NULL,1,1,'2020-03-11 16:20:35','2020-03-11 16:20:49',0,5,NULL,NULL),(8,NULL,1,1,'2020-03-11 16:20:56','2020-03-11 16:20:56',0,6,NULL,NULL),(9,NULL,1,1,'2020-03-11 16:21:04','2020-03-11 16:21:04',0,7,NULL,NULL),(10,NULL,1,1,'2020-03-11 16:21:15','2020-03-11 16:21:15',0,8,NULL,NULL),(11,'Bench',1,4,'2020-03-11 16:30:39','2020-03-11 16:30:39',0,NULL,NULL,NULL),(12,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,1,NULL,NULL),(13,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,2,NULL,NULL),(14,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,3,NULL,NULL),(15,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,4,NULL,NULL),(16,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,5,NULL,NULL),(17,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,6,NULL,NULL),(18,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,7,NULL,NULL),(19,NULL,1,1,'2020-03-11 16:30:42','2020-03-11 16:30:42',0,8,NULL,NULL),(20,'Bench',1,4,'2020-03-11 16:32:12','2020-03-11 16:32:12',0,NULL,NULL,NULL),(21,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,1,NULL,NULL),(22,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,2,NULL,NULL),(23,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,3,NULL,NULL),(24,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,4,NULL,NULL),(25,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,5,NULL,NULL),(26,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,6,NULL,NULL),(27,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,7,NULL,NULL),(28,NULL,1,1,'2020-03-11 16:32:14','2020-03-11 16:32:14',0,8,NULL,NULL),(29,'Bench',1,4,'2020-03-11 17:25:58','2020-03-11 17:25:58',0,NULL,NULL,NULL),(30,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,1,NULL,NULL),(31,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,2,NULL,NULL),(32,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,3,NULL,NULL),(33,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,4,NULL,NULL),(34,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,5,NULL,NULL),(35,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,6,NULL,NULL),(36,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,7,NULL,NULL),(37,NULL,1,1,'2020-03-11 17:26:00','2020-03-11 17:26:00',0,8,NULL,NULL),(38,'Bench',1,4,'2020-03-11 17:26:45','2020-03-11 17:26:45',0,NULL,NULL,NULL),(39,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,1,NULL,NULL),(40,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,2,NULL,NULL),(41,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,3,NULL,NULL),(42,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,4,NULL,NULL),(43,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,5,NULL,NULL),(44,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,6,NULL,NULL),(45,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,7,NULL,NULL),(46,NULL,1,1,'2020-03-11 17:26:46','2020-03-11 17:26:46',0,8,NULL,NULL),(47,'deleted',-1,1,'2020-03-11 17:27:37','2020-03-11 17:34:41',-1,1,NULL,NULL),(48,'Bench',1,4,'2020-03-11 17:27:51','2020-03-11 17:27:51',0,NULL,NULL,NULL),(49,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,1,NULL,NULL),(50,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,2,NULL,NULL),(51,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,3,NULL,NULL),(52,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,4,NULL,NULL),(53,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,5,NULL,NULL),(54,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,6,NULL,NULL),(55,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,7,NULL,NULL),(56,NULL,1,1,'2020-03-11 17:27:53','2020-03-11 17:27:53',0,8,NULL,NULL),(57,'Bench',1,4,'2020-03-11 17:30:00','2020-03-11 17:30:00',0,NULL,NULL,NULL),(58,NULL,1,1,'2020-03-11 17:30:09','2020-03-11 17:30:09',0,1,NULL,NULL),(59,NULL,1,1,'2020-03-11 17:30:09','2020-03-11 17:30:09',0,2,NULL,NULL),(60,NULL,1,1,'2020-03-11 17:30:09','2020-03-11 17:30:09',0,3,NULL,NULL),(61,NULL,1,1,'2020-03-11 17:30:09','2020-03-11 17:30:09',0,4,NULL,NULL),(62,NULL,1,1,'2020-03-11 17:30:09','2020-03-11 17:30:09',0,5,NULL,NULL),(63,NULL,1,1,'2020-03-11 17:30:09','2020-03-11 17:30:09',0,6,NULL,NULL),(64,NULL,1,1,'2020-03-11 17:30:09','2020-03-11 17:30:09',0,7,NULL,NULL),(65,NULL,1,1,'2020-03-11 17:30:10','2020-03-11 17:30:10',0,8,NULL,NULL),(66,'Bench',1,4,'2020-03-11 17:30:56','2020-03-11 17:30:56',0,NULL,NULL,NULL),(67,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,1,NULL,NULL),(68,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,2,NULL,NULL),(69,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,3,NULL,NULL),(70,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,4,NULL,NULL),(71,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,5,NULL,NULL),(72,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,6,NULL,NULL),(73,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,7,NULL,NULL),(74,NULL,1,1,'2020-03-11 17:31:57','2020-03-11 17:31:57',0,8,NULL,NULL),(75,'Bench',1,4,'2020-03-11 17:32:15','2020-03-11 17:32:15',0,NULL,NULL,NULL),(76,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,1,NULL,NULL),(77,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,2,NULL,NULL),(78,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,3,NULL,NULL),(79,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,4,NULL,NULL),(80,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,5,NULL,NULL),(81,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,6,NULL,NULL),(82,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,7,NULL,NULL),(83,NULL,1,1,'2020-03-11 17:32:19','2020-03-11 17:32:19',0,8,NULL,NULL),(84,'deleted',-1,1,'2020-03-11 17:34:36','2020-03-11 17:34:44',-1,292,NULL,NULL),(85,NULL,1,1,'2020-03-11 17:34:47','2020-03-11 17:34:47',0,292,NULL,NULL),(86,'Bench',1,4,'2020-03-11 17:35:32','2020-03-11 17:35:32',0,NULL,NULL,NULL),(87,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,1,NULL,NULL),(88,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,2,NULL,NULL),(89,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,3,NULL,NULL),(90,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,4,NULL,NULL),(91,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,5,NULL,NULL),(92,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,6,NULL,NULL),(93,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,7,NULL,NULL),(94,NULL,1,1,'2020-03-11 17:35:41','2020-03-11 17:35:41',0,8,NULL,NULL),(95,'Bench',1,4,'2020-03-11 17:36:01','2020-03-11 17:36:01',0,NULL,NULL,NULL),(96,NULL,1,1,'2020-03-11 17:36:04','2020-03-11 17:36:04',0,1,NULL,NULL),(97,NULL,1,1,'2020-03-11 17:36:04','2020-03-11 17:36:04',0,292,NULL,NULL),(98,NULL,1,1,'2020-03-11 17:36:04','2020-03-11 17:36:04',0,2,NULL,NULL),(99,NULL,1,1,'2020-03-11 17:36:04','2020-03-11 17:36:04',0,3,NULL,NULL),(100,NULL,1,1,'2020-03-11 17:36:04','2020-03-11 17:36:04',0,4,NULL,NULL),(101,NULL,1,1,'2020-03-11 17:36:04','2020-03-11 17:36:04',0,5,NULL,NULL),(102,NULL,1,1,'2020-03-11 17:36:04','2020-03-11 17:36:05',0,6,NULL,NULL),(103,NULL,1,1,'2020-03-11 17:36:05','2020-03-11 17:36:05',0,7,NULL,NULL),(104,NULL,1,1,'2020-03-11 17:36:05','2020-03-11 17:36:05',0,8,NULL,NULL),(105,'Bench',1,4,'2020-03-11 17:36:58','2020-03-11 17:36:58',0,NULL,NULL,NULL),(106,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,1,NULL,NULL),(107,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,2,NULL,NULL),(108,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,3,NULL,NULL),(109,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,4,NULL,NULL),(110,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,5,NULL,NULL),(111,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,6,NULL,NULL),(112,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,7,NULL,NULL),(113,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,8,NULL,NULL),(114,NULL,1,1,'2020-03-11 17:37:00','2020-03-11 17:37:00',0,292,NULL,NULL),(115,'Bench',1,4,'2020-03-11 17:37:19','2020-03-11 17:37:19',0,NULL,NULL,NULL),(116,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,1,NULL,NULL),(117,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,2,NULL,NULL),(118,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,3,NULL,NULL),(119,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,4,NULL,NULL),(120,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,5,NULL,NULL),(121,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,6,NULL,NULL),(122,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,7,NULL,NULL),(123,NULL,1,1,'2020-03-11 17:37:21','2020-03-11 17:37:21',0,8,NULL,NULL),(124,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,1,NULL,NULL),(125,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,2,NULL,NULL),(126,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,3,NULL,NULL),(127,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,4,NULL,NULL),(128,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,5,NULL,NULL),(129,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,6,NULL,NULL),(130,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,7,NULL,NULL),(131,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,8,NULL,NULL),(132,NULL,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25',0,292,NULL,NULL),(133,'Bench',1,4,'2020-03-11 17:48:07','2020-03-11 17:48:07',0,NULL,NULL,NULL),(134,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,1,NULL,NULL),(135,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,2,NULL,NULL),(136,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,3,NULL,NULL),(137,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,4,NULL,NULL),(138,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,5,NULL,NULL),(139,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,6,NULL,NULL),(140,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,7,NULL,NULL),(141,NULL,1,1,'2020-03-11 17:48:08','2020-03-11 17:48:08',0,8,NULL,NULL),(142,'Bench',1,4,'2020-03-11 20:48:07','2020-03-11 20:48:07',0,NULL,NULL,NULL),(143,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,1,NULL,NULL),(144,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,2,NULL,NULL),(145,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,3,NULL,NULL),(146,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,4,NULL,NULL),(147,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,5,NULL,NULL),(148,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,6,NULL,NULL),(149,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,7,NULL,NULL),(150,NULL,1,1,'2020-03-11 20:48:09','2020-03-11 20:48:09',0,8,NULL,NULL),(151,'Bench',1,4,'2020-03-11 20:49:42','2020-03-11 20:49:42',0,NULL,NULL,NULL),(152,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,1,NULL,NULL),(153,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,2,NULL,NULL),(154,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,3,NULL,NULL),(155,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,4,NULL,NULL),(156,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,5,NULL,NULL),(157,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,6,NULL,NULL),(158,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,7,NULL,NULL),(159,NULL,1,1,'2020-03-11 20:49:44','2020-03-11 20:49:44',0,8,NULL,NULL),(160,'Bench',1,3,'2020-03-11 20:49:56','2020-03-11 20:49:56',0,NULL,NULL,NULL),(161,NULL,1,1,'2020-03-11 20:50:28','2020-03-11 20:50:28',0,9,NULL,NULL),(162,'deleted',-1,1,'2020-03-11 20:50:37','2020-03-11 20:59:10',-1,10,NULL,NULL),(163,'deleted',-1,1,'2020-03-11 20:50:44','2020-03-11 20:59:16',-1,11,NULL,NULL),(164,'deleted',-1,1,'2020-03-11 20:50:49','2020-03-11 21:02:30',-1,12,NULL,NULL),(165,'deleted',-1,1,'2020-03-11 20:51:03','2020-03-11 21:02:48',-1,13,NULL,NULL),(166,NULL,1,1,'2020-03-11 20:51:20','2020-03-11 20:51:20',0,14,NULL,NULL),(167,NULL,1,1,'2020-03-11 20:51:29','2020-03-11 20:51:29',0,15,NULL,NULL),(168,NULL,1,1,'2020-03-11 20:51:36','2020-03-11 20:51:36',0,16,NULL,NULL),(169,NULL,1,1,'2020-03-11 20:51:47','2020-03-11 20:51:47',0,17,NULL,NULL),(170,'deleted',-1,1,'2020-03-11 20:51:58','2020-03-11 20:52:10',-1,17,NULL,NULL),(171,'deleted',-1,1,'2020-03-11 20:52:12','2020-03-11 21:03:16',-1,18,NULL,NULL),(172,'deleted',-1,1,'2020-03-11 20:52:18','2020-03-11 21:03:30',-1,19,NULL,NULL),(173,'deleted',-1,1,'2020-03-11 20:52:30','2020-03-11 21:03:37',-1,20,NULL,NULL),(174,'deleted',-1,1,'2020-03-11 20:52:39','2020-03-11 21:03:54',-1,21,NULL,NULL),(175,'deleted',-1,1,'2020-03-11 20:52:45','2020-03-11 21:04:20',-1,22,NULL,NULL),(176,'deleted',-1,1,'2020-03-11 20:52:54','2020-03-11 21:04:47',-1,23,NULL,NULL),(177,'deleted',-1,1,'2020-03-11 20:53:01','2020-03-11 21:04:58',-1,24,NULL,NULL),(178,'deleted',-1,1,'2020-03-11 20:53:09','2020-03-11 20:53:15',-1,23,NULL,NULL),(179,'deleted',-1,1,'2020-03-11 20:53:21','2020-03-11 21:05:07',-1,25,NULL,NULL),(180,'deleted',-1,1,'2020-03-11 20:53:28','2020-03-11 21:05:10',-1,26,NULL,NULL),(181,'deleted',-1,1,'2020-03-11 20:53:35','2020-03-11 21:05:12',-1,27,NULL,NULL),(182,'deleted',-1,1,'2020-03-11 20:53:47','2020-03-11 21:05:15',-1,28,NULL,NULL),(183,'deleted',-1,1,'2020-03-11 20:53:54','2020-03-11 21:05:20',-1,29,NULL,NULL),(184,'deleted',-1,1,'2020-03-11 20:54:01','2020-03-11 21:05:23',-1,30,NULL,NULL),(185,'deleted',-1,1,'2020-03-11 20:54:07','2020-03-11 21:05:26',-1,31,NULL,NULL),(186,'deleted',-1,1,'2020-03-11 20:54:16','2020-03-11 21:05:29',-1,32,NULL,NULL),(187,NULL,1,1,'2020-03-11 20:59:12','2020-03-11 20:59:12',0,12,NULL,NULL),(188,NULL,1,1,'2020-03-11 20:59:27','2020-03-11 20:59:27',0,13,NULL,NULL),(189,NULL,1,1,'2020-03-11 21:02:38','2020-03-11 21:02:38',0,10,NULL,NULL),(190,NULL,1,1,'2020-03-11 21:02:51','2020-03-11 21:02:51',0,11,NULL,NULL),(191,NULL,1,1,'2020-03-11 21:03:19','2020-03-11 21:03:19',0,19,NULL,NULL),(192,NULL,1,1,'2020-03-11 21:03:32','2020-03-11 21:03:32',0,21,NULL,NULL),(193,NULL,1,1,'2020-03-11 21:03:50','2020-03-11 21:03:50',0,23,NULL,NULL),(194,NULL,1,1,'2020-03-11 21:04:07','2020-03-11 21:04:07',0,25,NULL,NULL),(195,NULL,1,1,'2020-03-11 21:04:22','2020-03-11 21:04:22',0,27,NULL,NULL),(196,NULL,1,1,'2020-03-11 21:04:49','2020-03-11 21:04:49',0,29,NULL,NULL),(197,NULL,1,1,'2020-03-11 21:05:00','2020-03-11 21:05:00',0,30,NULL,NULL),(198,'Bench',1,4,'2020-03-11 21:07:23','2020-03-11 21:07:23',0,NULL,NULL,NULL),(199,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,9,NULL,NULL),(200,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,12,NULL,NULL),(201,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,13,NULL,NULL),(202,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,10,NULL,NULL),(203,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,11,NULL,NULL),(204,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,14,NULL,NULL),(205,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,15,NULL,NULL),(206,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,16,NULL,NULL),(207,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,17,NULL,NULL),(208,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,19,NULL,NULL),(209,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,21,NULL,NULL),(210,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,23,NULL,NULL),(211,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,25,NULL,NULL),(212,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,27,NULL,NULL),(213,NULL,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26',0,29,NULL,NULL),(214,'Bench',1,4,'2020-03-11 21:08:45','2020-03-11 21:08:45',0,NULL,NULL,NULL),(215,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,1,NULL,NULL),(216,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,2,NULL,NULL),(217,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,3,NULL,NULL),(218,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,4,NULL,NULL),(219,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,5,NULL,NULL),(220,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,6,NULL,NULL),(221,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,7,NULL,NULL),(222,NULL,1,1,'2020-03-11 21:09:35','2020-03-11 21:09:35',0,8,NULL,NULL),(223,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,9,NULL,NULL),(224,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,12,NULL,NULL),(225,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,13,NULL,NULL),(226,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,10,NULL,NULL),(227,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,11,NULL,NULL),(228,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,14,NULL,NULL),(229,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,15,NULL,NULL),(230,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,16,NULL,NULL),(231,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,17,NULL,NULL),(232,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,19,NULL,NULL),(233,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,21,NULL,NULL),(234,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,23,NULL,NULL),(235,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,25,NULL,NULL),(236,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,27,NULL,NULL),(237,NULL,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42',0,29,NULL,NULL),(238,'Bench',1,4,'2020-03-11 21:12:18','2020-03-11 21:12:18',0,NULL,NULL,NULL),(239,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,1,NULL,NULL),(240,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,2,NULL,NULL),(241,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,3,NULL,NULL),(242,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,4,NULL,NULL),(243,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,5,NULL,NULL),(244,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,6,NULL,NULL),(245,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,7,NULL,NULL),(246,NULL,1,1,'2020-03-11 21:12:23','2020-03-11 21:12:23',0,8,NULL,NULL),(247,'Bench',1,4,'2020-03-11 21:25:34','2020-03-11 21:25:34',0,NULL,NULL,NULL),(248,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,1,NULL,NULL),(249,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,2,NULL,NULL),(250,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,3,NULL,NULL),(251,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,4,NULL,NULL),(252,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,5,NULL,NULL),(253,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,6,NULL,NULL),(254,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,7,NULL,NULL),(255,NULL,1,1,'2020-03-11 21:25:36','2020-03-11 21:25:36',0,8,NULL,NULL),(256,'Bench',1,4,'2020-03-11 21:31:20','2020-03-11 21:31:20',0,NULL,NULL,NULL),(257,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,1,NULL,NULL),(258,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,2,NULL,NULL),(259,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,3,NULL,NULL),(260,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,4,NULL,NULL),(261,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,5,NULL,NULL),(262,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,6,NULL,NULL),(263,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,7,NULL,NULL),(264,NULL,1,1,'2020-03-11 21:31:22','2020-03-11 21:31:22',0,8,NULL,NULL),(265,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,1,NULL,NULL),(266,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,2,NULL,NULL),(267,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,3,NULL,NULL),(268,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,4,NULL,NULL),(269,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,5,NULL,NULL),(270,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,6,NULL,NULL),(271,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,7,NULL,NULL),(272,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,8,NULL,NULL),(273,NULL,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26',0,292,NULL,NULL),(274,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,9,NULL,NULL),(275,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,12,NULL,NULL),(276,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,13,NULL,NULL),(277,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,10,NULL,NULL),(278,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,11,NULL,NULL),(279,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,14,NULL,NULL),(280,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,15,NULL,NULL),(281,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,16,NULL,NULL),(282,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,17,NULL,NULL),(283,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,19,NULL,NULL),(284,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,21,NULL,NULL),(285,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,23,NULL,NULL),(286,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,25,NULL,NULL),(287,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,27,NULL,NULL),(288,NULL,1,1,'2020-03-11 21:31:30','2020-03-11 21:31:30',0,29,NULL,NULL),(289,'Bench',1,4,'2020-03-11 21:32:33','2020-03-11 21:32:33',0,NULL,NULL,NULL),(290,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,1,NULL,NULL),(291,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,2,NULL,NULL),(292,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,3,NULL,NULL),(293,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,4,NULL,NULL),(294,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,5,NULL,NULL),(295,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,6,NULL,NULL),(296,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,7,NULL,NULL),(297,NULL,1,1,'2020-03-11 21:32:35','2020-03-11 21:32:35',0,8,NULL,NULL),(298,'Bench',1,4,'2020-03-11 21:53:47','2020-03-11 21:53:47',0,NULL,NULL,NULL),(299,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,1,NULL,NULL),(300,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,2,NULL,NULL),(301,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,3,NULL,NULL),(302,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,4,NULL,NULL),(303,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,5,NULL,NULL),(304,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,6,NULL,NULL),(305,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,7,NULL,NULL),(306,NULL,1,1,'2020-03-11 21:53:48','2020-03-11 21:53:48',0,8,NULL,NULL),(307,'Bench',1,4,'2020-03-11 21:56:33','2020-03-11 21:56:33',0,NULL,NULL,NULL),(308,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,1,NULL,NULL),(309,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,2,NULL,NULL),(310,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,3,NULL,NULL),(311,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,4,NULL,NULL),(312,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,5,NULL,NULL),(313,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,6,NULL,NULL),(314,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,7,NULL,NULL),(315,NULL,1,1,'2020-03-11 21:56:35','2020-03-11 21:56:35',0,8,NULL,NULL),(316,'Bench',1,4,'2020-03-11 22:00:03','2020-03-11 22:00:03',0,NULL,NULL,NULL),(317,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,1,NULL,NULL),(318,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,2,NULL,NULL),(319,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,3,NULL,NULL),(320,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,4,NULL,NULL),(321,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,5,NULL,NULL),(322,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,6,NULL,NULL),(323,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,7,NULL,NULL),(324,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,8,NULL,NULL),(325,NULL,1,1,'2020-03-11 22:00:05','2020-03-11 22:00:05',0,292,NULL,NULL),(326,'Bench',1,4,'2020-03-11 22:00:28','2020-03-11 22:00:28',0,NULL,NULL,NULL),(327,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,9,NULL,NULL),(328,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,12,NULL,NULL),(329,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,13,NULL,NULL),(330,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,10,NULL,NULL),(331,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,11,NULL,NULL),(332,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,14,NULL,NULL),(333,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,15,NULL,NULL),(334,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,16,NULL,NULL),(335,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,17,NULL,NULL),(336,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,19,NULL,NULL),(337,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,21,NULL,NULL),(338,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,23,NULL,NULL),(339,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,25,NULL,NULL),(340,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,27,NULL,NULL),(341,NULL,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29',0,29,NULL,NULL),(342,'Bench',1,4,'2020-03-11 22:00:59','2020-03-11 22:00:59',0,NULL,NULL,NULL),(343,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,1,NULL,NULL),(344,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,2,NULL,NULL),(345,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,3,NULL,NULL),(346,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,4,NULL,NULL),(347,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,5,NULL,NULL),(348,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,6,NULL,NULL),(349,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,7,NULL,NULL),(350,NULL,1,1,'2020-03-11 22:01:00','2020-03-11 22:01:00',0,8,NULL,NULL),(351,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,1,NULL,NULL),(352,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,2,NULL,NULL),(353,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,3,NULL,NULL),(354,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,4,NULL,NULL),(355,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,5,NULL,NULL),(356,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,6,NULL,NULL),(357,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,7,NULL,NULL),(358,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,8,NULL,NULL),(359,NULL,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04',0,292,NULL,NULL),(360,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,9,NULL,NULL),(361,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,12,NULL,NULL),(362,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,13,NULL,NULL),(363,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,10,NULL,NULL),(364,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,11,NULL,NULL),(365,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,14,NULL,NULL),(366,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,15,NULL,NULL),(367,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,16,NULL,NULL),(368,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,17,NULL,NULL),(369,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,19,NULL,NULL),(370,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,21,NULL,NULL),(371,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,23,NULL,NULL),(372,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,25,NULL,NULL),(373,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,27,NULL,NULL),(374,NULL,1,1,'2020-03-11 22:01:07','2020-03-11 22:01:07',0,29,NULL,NULL),(375,'deleted',-1,4,'2020-03-11 22:06:43','2020-03-11 22:06:53',-1,NULL,NULL,NULL),(376,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,1,NULL,NULL),(377,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,2,NULL,NULL),(378,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,3,NULL,NULL),(379,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,4,NULL,NULL),(380,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,5,NULL,NULL),(381,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,6,NULL,NULL),(382,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,7,NULL,NULL),(383,NULL,1,1,'2020-03-11 22:06:44','2020-03-11 22:06:44',0,8,NULL,NULL),(384,'Bench',1,4,'2020-03-11 22:09:28','2020-03-11 22:09:28',0,NULL,NULL,NULL),(385,'deleted',-1,4,'2020-03-11 22:10:53','2020-03-11 22:11:36',-1,NULL,NULL,NULL),(386,NULL,1,1,'2020-03-11 22:11:28','2020-03-11 22:11:28',0,1,NULL,NULL),(387,NULL,1,1,'2020-03-11 22:11:28','2020-03-11 22:11:28',0,2,NULL,NULL),(388,NULL,1,1,'2020-03-11 22:11:28','2020-03-11 22:11:28',0,3,NULL,NULL),(389,NULL,1,1,'2020-03-11 22:11:29','2020-03-11 22:11:29',0,4,NULL,NULL),(390,NULL,1,1,'2020-03-11 22:11:29','2020-03-11 22:11:29',0,5,NULL,NULL),(391,NULL,1,1,'2020-03-11 22:11:29','2020-03-11 22:11:29',0,6,NULL,NULL),(392,NULL,1,1,'2020-03-11 22:11:29','2020-03-11 22:11:29',0,7,NULL,NULL),(393,NULL,1,1,'2020-03-11 22:11:29','2020-03-11 22:11:29',0,8,NULL,NULL),(394,'deleted',-1,4,'2020-03-11 22:11:51','2020-03-11 22:12:39',-1,NULL,NULL,NULL),(395,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,1,NULL,NULL),(396,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,2,NULL,NULL),(397,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,3,NULL,NULL),(398,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,4,NULL,NULL),(399,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,5,NULL,NULL),(400,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,6,NULL,NULL),(401,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,7,NULL,NULL),(402,NULL,1,1,'2020-03-11 22:12:10','2020-03-11 22:12:10',0,8,NULL,NULL),(417,'Bench',1,4,'2020-03-12 22:32:14','2020-03-12 22:32:14',0,NULL,NULL,NULL),(418,'Bench',1,4,'2020-03-12 22:33:06','2020-03-12 22:33:06',0,NULL,NULL,NULL),(419,'Bench',1,4,'2020-03-12 22:33:06','2020-03-12 22:33:06',0,NULL,NULL,NULL),(420,'Bench',1,4,'2020-03-12 22:33:06','2020-03-12 22:33:06',0,NULL,NULL,NULL),(421,'Bench',1,4,'2020-03-12 22:33:06','2020-03-12 22:33:06',0,NULL,NULL,NULL),(422,'Bench',1,4,'2020-03-12 22:33:06','2020-03-12 22:33:06',0,NULL,NULL,NULL),(423,'Bench',1,4,'2020-03-12 22:33:06','2020-03-12 22:33:06',0,NULL,NULL,NULL),(424,'Bench',1,4,'2020-03-12 22:34:13','2020-03-12 22:34:13',0,NULL,NULL,NULL),(425,'deleted',-1,4,'2020-03-12 22:34:13','2020-03-13 18:21:45',-1,NULL,NULL,NULL),(426,'deleted',-1,4,'2020-03-12 22:34:13','2020-03-13 18:21:45',-1,NULL,NULL,NULL),(427,'deleted',-1,4,'2020-03-12 22:34:13','2020-03-13 18:21:45',-1,NULL,NULL,NULL),(428,'deleted',-1,4,'2020-03-12 22:34:13','2020-03-13 18:21:45',-1,NULL,NULL,NULL),(429,'deleted',-1,4,'2020-03-12 22:34:13','2020-03-13 18:21:45',-1,NULL,NULL,NULL),(430,'Bench',1,4,'2020-03-12 22:36:48','2020-03-12 22:36:48',0,NULL,NULL,NULL),(431,'Bench',1,4,'2020-03-12 22:36:48','2020-03-12 22:36:48',0,NULL,NULL,NULL),(432,'Bench',1,4,'2020-03-12 22:36:48','2020-03-12 22:36:48',0,NULL,NULL,NULL),(433,'Bench',1,4,'2020-03-12 22:36:48','2020-03-12 22:36:48',0,NULL,NULL,NULL),(434,'Bench',1,4,'2020-03-12 22:36:48','2020-03-12 22:36:48',0,NULL,NULL,NULL),(435,'Bench',1,4,'2020-03-12 22:37:20','2020-03-12 22:37:20',0,NULL,NULL,NULL),(436,'deleted',-1,4,'2020-03-12 22:37:20','2020-03-12 22:38:19',-1,NULL,NULL,NULL),(437,'deleted',-1,4,'2020-03-12 22:37:20','2020-03-12 22:38:19',-1,NULL,NULL,NULL),(438,'deleted',-1,4,'2020-03-12 22:37:20','2020-03-12 22:38:19',-1,NULL,NULL,NULL),(439,'deleted',-1,4,'2020-03-12 22:37:20','2020-03-12 22:38:19',-1,NULL,NULL,NULL),(440,'Bench',1,4,'2020-03-12 22:38:24','2020-03-12 22:38:24',0,NULL,NULL,NULL),(441,'deleted',-1,4,'2020-03-12 22:38:24','2020-03-12 22:45:32',-1,NULL,NULL,NULL),(442,'deleted',-1,4,'2020-03-12 22:38:24','2020-03-12 22:45:32',-1,NULL,NULL,NULL),(443,'deleted',-1,4,'2020-03-12 22:38:24','2020-03-12 22:45:32',-1,NULL,NULL,NULL),(444,'deleted',-1,4,'2020-03-12 22:38:24','2020-03-12 22:45:32',-1,NULL,NULL,NULL),(445,'Bench',1,4,'2020-03-12 22:45:17','2020-03-12 22:45:17',0,NULL,NULL,NULL),(446,'Bench',1,4,'2020-03-12 22:45:34','2020-03-12 22:45:34',0,NULL,NULL,NULL),(447,'Bench',1,4,'2020-03-12 22:45:34','2020-03-12 22:45:34',0,NULL,NULL,NULL),(448,'Bench',1,4,'2020-03-12 22:45:34','2020-03-12 22:45:34',0,NULL,NULL,NULL),(449,'Bench',1,4,'2020-03-12 22:45:34','2020-03-12 22:45:34',0,NULL,NULL,NULL),(450,'Bench',1,4,'2020-03-12 22:45:34','2020-03-12 22:45:34',0,NULL,NULL,NULL),(451,'deleted',-1,4,'2020-03-12 22:45:57','2020-03-12 22:56:03',-1,NULL,NULL,NULL),(452,'Bench',1,4,'2020-03-12 22:55:27','2020-03-12 22:55:27',0,NULL,NULL,NULL),(453,'Bench',1,4,'2020-03-12 22:56:05','2020-03-12 22:56:05',0,NULL,NULL,NULL),(454,NULL,1,1,'2020-03-12 22:56:09','2020-03-12 22:56:09',0,1,NULL,NULL),(455,NULL,1,1,'2020-03-12 22:56:09','2020-03-12 22:56:09',0,2,NULL,NULL),(456,NULL,1,1,'2020-03-12 22:56:09','2020-03-12 22:56:09',0,3,NULL,NULL),(457,NULL,1,1,'2020-03-12 22:56:09','2020-03-12 22:56:09',0,4,NULL,NULL),(458,'Bench',1,4,'2020-03-12 22:56:31','2020-03-12 22:56:31',0,NULL,NULL,NULL),(459,NULL,1,1,'2020-03-12 22:56:34','2020-03-12 22:56:34',0,1,NULL,NULL),(460,NULL,1,1,'2020-03-12 22:56:34','2020-03-12 22:56:34',0,2,NULL,NULL),(461,NULL,1,1,'2020-03-12 22:56:34','2020-03-12 22:56:34',0,3,NULL,NULL),(462,NULL,1,1,'2020-03-12 22:56:34','2020-03-12 22:56:34',0,4,NULL,NULL),(463,'Bench',1,4,'2020-03-12 22:57:45','2020-03-12 22:57:45',0,NULL,NULL,NULL),(464,NULL,1,1,'2020-03-12 22:57:48','2020-03-12 22:57:48',0,1,NULL,NULL),(465,NULL,1,1,'2020-03-12 22:57:48','2020-03-12 22:57:48',0,2,NULL,NULL),(466,NULL,1,1,'2020-03-12 22:57:48','2020-03-12 22:57:48',0,3,NULL,NULL),(467,NULL,1,1,'2020-03-12 22:57:48','2020-03-12 22:57:48',0,4,NULL,NULL),(468,NULL,1,1,'2020-03-12 22:57:48','2020-03-12 22:57:48',0,4,NULL,NULL),(469,'Bench',1,4,'2020-03-12 23:00:34','2020-03-12 23:00:34',0,NULL,NULL,NULL),(470,NULL,1,1,'2020-03-12 23:00:37','2020-03-12 23:00:37',0,1,NULL,NULL),(471,NULL,1,1,'2020-03-12 23:00:37','2020-03-12 23:00:37',0,2,NULL,NULL),(472,NULL,1,1,'2020-03-12 23:00:37','2020-03-12 23:00:37',0,3,NULL,NULL),(473,NULL,1,1,'2020-03-12 23:00:37','2020-03-12 23:00:37',0,4,NULL,NULL),(474,NULL,1,1,'2020-03-12 23:00:42','2020-03-12 23:00:42',0,9,NULL,NULL),(475,NULL,1,1,'2020-03-12 23:00:42','2020-03-12 23:00:42',0,12,NULL,NULL),(476,NULL,1,1,'2020-03-12 23:00:42','2020-03-12 23:00:42',0,13,NULL,NULL),(477,NULL,1,1,'2020-03-12 23:00:42','2020-03-12 23:00:42',0,10,NULL,NULL),(478,NULL,1,1,'2020-03-12 23:00:42','2020-03-12 23:00:42',0,11,NULL,NULL),(479,'Bench',1,4,'2020-03-12 23:16:58','2020-03-12 23:16:58',0,NULL,NULL,NULL),(480,NULL,1,1,'2020-03-12 23:17:39','2020-03-12 23:17:39',0,1,NULL,NULL),(481,NULL,1,1,'2020-03-12 23:17:39','2020-03-12 23:17:39',0,2,NULL,NULL),(482,NULL,1,1,'2020-03-12 23:17:39','2020-03-12 23:17:39',0,3,NULL,NULL),(483,NULL,1,1,'2020-03-12 23:17:39','2020-03-12 23:17:39',0,4,NULL,NULL),(484,'Freezer',1,4,'2020-03-13 15:36:46','2020-03-13 15:37:02',0,NULL,NULL,NULL),(485,NULL,1,1,'2020-03-13 15:36:54','2020-03-13 15:36:54',0,1,NULL,NULL),(486,NULL,1,1,'2020-03-13 15:36:54','2020-03-13 15:36:54',0,2,NULL,NULL),(487,NULL,1,1,'2020-03-13 15:36:54','2020-03-13 15:36:54',0,3,NULL,NULL),(488,NULL,1,1,'2020-03-13 15:36:54','2020-03-13 15:36:54',0,4,NULL,NULL),(489,'Freezer',1,4,'2020-03-13 15:37:55','2020-03-13 15:38:03',0,NULL,NULL,NULL),(490,NULL,1,1,'2020-03-13 15:37:58','2020-03-13 15:37:58',0,1,NULL,NULL),(491,NULL,1,1,'2020-03-13 15:37:58','2020-03-13 15:37:58',0,2,NULL,NULL),(492,NULL,1,1,'2020-03-13 15:37:58','2020-03-13 15:37:58',0,3,NULL,NULL),(493,NULL,1,1,'2020-03-13 15:37:58','2020-03-13 15:37:58',0,4,NULL,NULL),(494,'Freezer',1,4,'2020-03-13 15:39:14','2020-03-13 15:39:22',0,NULL,NULL,NULL),(495,NULL,1,1,'2020-03-13 15:39:16','2020-03-13 15:39:16',0,1,NULL,NULL),(496,NULL,1,1,'2020-03-13 15:39:16','2020-03-13 15:39:16',0,2,NULL,NULL),(497,NULL,1,1,'2020-03-13 15:39:16','2020-03-13 15:39:16',0,3,NULL,NULL),(498,NULL,1,1,'2020-03-13 15:39:16','2020-03-13 15:39:16',0,4,NULL,NULL),(499,'Freezer',1,4,'2020-03-13 15:40:14','2020-03-13 15:40:26',0,NULL,NULL,NULL),(500,NULL,1,1,'2020-03-13 15:40:16','2020-03-13 15:40:16',0,1,NULL,NULL),(501,NULL,1,1,'2020-03-13 15:40:16','2020-03-13 15:40:16',0,2,NULL,NULL),(502,NULL,1,1,'2020-03-13 15:40:16','2020-03-13 15:40:16',0,3,NULL,NULL),(503,NULL,1,1,'2020-03-13 15:40:16','2020-03-13 15:40:16',0,4,NULL,NULL),(504,'Freezer',1,4,'2020-03-13 15:41:32','2020-03-13 15:41:41',0,NULL,NULL,NULL),(505,NULL,1,1,'2020-03-13 15:41:36','2020-03-13 15:41:36',0,1,NULL,NULL),(506,NULL,1,1,'2020-03-13 15:41:36','2020-03-13 15:41:36',0,2,NULL,NULL),(507,NULL,1,1,'2020-03-13 15:41:36','2020-03-13 15:41:36',0,3,NULL,NULL),(508,NULL,1,1,'2020-03-13 15:41:36','2020-03-13 15:41:36',0,4,NULL,NULL),(509,'Freezer',1,4,'2020-03-13 15:42:19','2020-03-13 15:42:30',0,NULL,NULL,NULL),(510,NULL,1,1,'2020-03-13 15:42:24','2020-03-13 15:42:24',0,1,NULL,NULL),(511,NULL,1,1,'2020-03-13 15:42:24','2020-03-13 15:42:24',0,2,NULL,NULL),(512,NULL,1,1,'2020-03-13 15:42:24','2020-03-13 15:42:24',0,3,NULL,NULL),(513,NULL,1,1,'2020-03-13 15:42:24','2020-03-13 15:42:24',0,4,NULL,NULL),(514,'Freezer',1,4,'2020-03-13 15:43:33','2020-03-13 15:43:55',0,NULL,NULL,NULL),(515,NULL,1,1,'2020-03-13 15:43:35','2020-03-13 15:43:35',0,1,NULL,NULL),(516,NULL,1,1,'2020-03-13 15:43:35','2020-03-13 15:43:35',0,2,NULL,NULL),(517,NULL,1,1,'2020-03-13 15:43:35','2020-03-13 15:43:35',0,3,NULL,NULL),(518,NULL,1,1,'2020-03-13 15:43:35','2020-03-13 15:43:35',0,4,NULL,NULL),(519,'Freezer',1,4,'2020-03-13 17:39:19','2020-03-13 17:39:40',0,NULL,NULL,NULL),(520,NULL,1,1,'2020-03-13 17:39:29','2020-03-13 17:39:29',0,1,NULL,NULL),(521,NULL,1,1,'2020-03-13 17:39:29','2020-03-13 17:39:29',0,2,NULL,NULL),(522,NULL,1,1,'2020-03-13 17:39:29','2020-03-13 17:39:29',0,3,NULL,NULL),(523,NULL,1,1,'2020-03-13 17:39:29','2020-03-13 17:39:29',0,4,NULL,NULL),(524,'Freezer',1,4,'2020-03-13 17:42:46','2020-03-13 17:42:57',0,NULL,NULL,NULL),(525,NULL,1,1,'2020-03-13 17:42:48','2020-03-13 17:42:48',0,1,NULL,NULL),(526,NULL,1,1,'2020-03-13 17:42:48','2020-03-13 17:42:48',0,2,NULL,NULL),(527,NULL,1,1,'2020-03-13 17:42:48','2020-03-13 17:42:48',0,3,NULL,NULL),(528,NULL,1,1,'2020-03-13 17:42:48','2020-03-13 17:42:48',0,4,NULL,NULL),(529,'Freezer',1,4,'2020-03-13 17:48:11','2020-03-13 17:48:37',0,NULL,NULL,NULL),(530,NULL,1,1,'2020-03-13 17:48:20','2020-03-13 17:48:20',0,1,NULL,NULL),(531,NULL,1,1,'2020-03-13 17:48:20','2020-03-13 17:48:20',0,2,NULL,NULL),(532,NULL,1,1,'2020-03-13 17:48:20','2020-03-13 17:48:20',0,3,NULL,NULL),(533,NULL,1,1,'2020-03-13 17:48:20','2020-03-13 17:48:20',0,4,NULL,NULL),(534,'deleted',-1,4,'2020-03-13 18:04:12','2020-03-13 18:04:57',-1,NULL,NULL,NULL),(535,NULL,1,1,'2020-03-13 18:04:14','2020-03-13 18:04:14',0,1,NULL,NULL),(536,NULL,1,1,'2020-03-13 18:04:14','2020-03-13 18:04:14',0,2,NULL,NULL),(537,NULL,1,1,'2020-03-13 18:04:14','2020-03-13 18:04:14',0,3,NULL,NULL),(538,NULL,1,1,'2020-03-13 18:04:14','2020-03-13 18:04:14',0,4,NULL,NULL),(539,'Freezer',1,4,'2020-03-13 18:05:01','2020-03-13 18:05:14',0,NULL,NULL,NULL),(540,NULL,1,1,'2020-03-13 18:05:05','2020-03-13 18:05:05',0,1,NULL,NULL),(541,NULL,1,1,'2020-03-13 18:05:05','2020-03-13 18:05:05',0,2,NULL,NULL),(542,NULL,1,1,'2020-03-13 18:05:05','2020-03-13 18:05:05',0,3,NULL,NULL),(543,NULL,1,1,'2020-03-13 18:05:05','2020-03-13 18:05:05',0,4,NULL,NULL),(544,'deleted',-1,4,'2020-03-13 18:07:47','2020-03-13 18:10:36',-1,NULL,NULL,NULL),(545,NULL,1,1,'2020-03-13 18:07:50','2020-03-13 18:07:50',0,1,NULL,NULL),(546,NULL,1,1,'2020-03-13 18:07:50','2020-03-13 18:07:50',0,2,NULL,NULL),(547,NULL,1,1,'2020-03-13 18:07:50','2020-03-13 18:07:50',0,3,NULL,NULL),(548,NULL,1,1,'2020-03-13 18:07:50','2020-03-13 18:07:50',0,4,NULL,NULL),(549,'Bench',1,4,'2020-03-13 18:10:41','2020-03-13 18:10:41',0,NULL,NULL,NULL),(550,'Bench',1,4,'2020-03-13 18:11:41','2020-03-13 18:11:41',0,NULL,NULL,NULL),(551,'deleted',-1,4,'2020-03-13 18:11:59','2020-03-13 18:13:47',-1,NULL,NULL,NULL),(552,NULL,1,1,'2020-03-13 18:12:13','2020-03-13 18:12:13',0,1,NULL,NULL),(553,NULL,1,1,'2020-03-13 18:12:13','2020-03-13 18:12:13',0,2,NULL,NULL),(554,NULL,1,1,'2020-03-13 18:12:13','2020-03-13 18:12:13',0,3,NULL,NULL),(555,NULL,1,1,'2020-03-13 18:12:13','2020-03-13 18:12:13',0,4,NULL,NULL),(556,'deleted',-1,4,'2020-03-13 18:13:51','2020-03-13 18:15:53',-1,NULL,NULL,NULL),(557,NULL,1,1,'2020-03-13 18:13:53','2020-03-13 18:13:53',0,1,NULL,NULL),(558,NULL,1,1,'2020-03-13 18:13:53','2020-03-13 18:13:53',0,2,NULL,NULL),(559,NULL,1,1,'2020-03-13 18:13:53','2020-03-13 18:13:53',0,3,NULL,NULL),(560,NULL,1,1,'2020-03-13 18:13:53','2020-03-13 18:13:53',0,4,NULL,NULL),(561,'Freezer',1,4,'2020-03-13 18:15:56','2020-03-13 18:16:05',0,NULL,NULL,NULL),(562,NULL,1,1,'2020-03-13 18:15:59','2020-03-13 18:15:59',0,1,NULL,NULL),(563,NULL,1,1,'2020-03-13 18:15:59','2020-03-13 18:15:59',0,2,NULL,NULL),(564,NULL,1,1,'2020-03-13 18:15:59','2020-03-13 18:15:59',0,3,NULL,NULL),(565,NULL,1,1,'2020-03-13 18:15:59','2020-03-13 18:15:59',0,4,NULL,NULL),(566,'Bench',1,4,'2020-03-13 18:17:31','2020-03-13 18:17:31',0,NULL,NULL,NULL),(567,'deleted',-1,4,'2020-03-13 18:20:31','2020-03-13 18:21:45',-1,NULL,NULL,NULL),(568,NULL,1,1,'2020-03-13 18:20:33','2020-03-13 18:20:33',0,1,NULL,NULL),(569,NULL,1,1,'2020-03-13 18:20:33','2020-03-13 18:20:33',0,2,NULL,NULL),(570,NULL,1,1,'2020-03-13 18:20:33','2020-03-13 18:20:33',0,3,NULL,NULL),(571,NULL,1,1,'2020-03-13 18:20:33','2020-03-13 18:20:33',0,4,NULL,NULL),(572,NULL,1,1,'2020-03-13 18:20:38','2020-03-13 18:20:38',0,1,NULL,NULL),(573,NULL,1,1,'2020-03-13 18:20:38','2020-03-13 18:20:38',0,2,NULL,NULL),(574,NULL,1,1,'2020-03-13 18:20:38','2020-03-13 18:20:38',0,3,NULL,NULL),(575,NULL,1,1,'2020-03-13 18:20:38','2020-03-13 18:20:38',0,4,NULL,NULL),(576,NULL,1,1,'2020-03-13 18:20:38','2020-03-13 18:20:38',0,4,NULL,NULL),(577,NULL,1,1,'2020-03-13 18:20:51','2020-03-13 18:20:51',0,1,NULL,NULL),(578,NULL,1,1,'2020-03-13 18:20:51','2020-03-13 18:20:51',0,2,NULL,NULL),(579,NULL,1,1,'2020-03-13 18:20:51','2020-03-13 18:20:51',0,3,NULL,NULL),(580,NULL,1,1,'2020-03-13 18:20:51','2020-03-13 18:20:51',0,4,NULL,NULL),(581,NULL,1,1,'2020-03-13 18:20:55','2020-03-13 18:20:55',0,9,NULL,NULL),(582,NULL,1,1,'2020-03-13 18:20:55','2020-03-13 18:20:55',0,12,NULL,NULL),(583,NULL,1,1,'2020-03-13 18:20:55','2020-03-13 18:20:55',0,13,NULL,NULL),(584,NULL,1,1,'2020-03-13 18:20:55','2020-03-13 18:20:55',0,10,NULL,NULL),(585,NULL,1,1,'2020-03-13 18:20:55','2020-03-13 18:20:55',0,11,NULL,NULL),(586,'Bench',1,4,'2020-03-13 18:21:52','2020-03-13 18:21:52',0,NULL,NULL,NULL),(587,'deleted',-1,4,'2020-03-13 18:22:28','2020-03-13 18:27:22',-1,NULL,NULL,NULL),(588,NULL,1,1,'2020-03-13 18:22:31','2020-03-13 18:22:31',0,1,NULL,NULL),(589,NULL,1,1,'2020-03-13 18:22:31','2020-03-13 18:22:31',0,2,NULL,NULL),(590,NULL,1,1,'2020-03-13 18:22:31','2020-03-13 18:22:31',0,3,NULL,NULL),(591,NULL,1,1,'2020-03-13 18:22:31','2020-03-13 18:22:31',0,4,NULL,NULL),(592,'deleted',-1,4,'2020-03-13 18:23:48','2020-03-13 18:27:22',-1,NULL,NULL,NULL),(593,NULL,1,1,'2020-03-13 18:23:51','2020-03-13 18:23:51',0,1,NULL,NULL),(594,NULL,1,1,'2020-03-13 18:23:51','2020-03-13 18:23:51',0,2,NULL,NULL),(595,NULL,1,1,'2020-03-13 18:23:51','2020-03-13 18:23:51',0,3,NULL,NULL),(596,NULL,1,1,'2020-03-13 18:23:51','2020-03-13 18:23:51',0,4,NULL,NULL),(597,NULL,1,1,'2020-03-13 18:23:51','2020-03-13 18:23:51',0,4,NULL,NULL),(598,'deleted',-1,4,'2020-03-13 18:25:38','2020-03-13 18:27:22',-1,NULL,NULL,NULL),(599,NULL,1,1,'2020-03-13 18:25:41','2020-03-13 18:25:41',0,1,NULL,NULL),(600,NULL,1,1,'2020-03-13 18:25:41','2020-03-13 18:25:41',0,2,NULL,NULL),(601,NULL,1,1,'2020-03-13 18:25:41','2020-03-13 18:25:41',0,3,NULL,NULL),(602,NULL,1,1,'2020-03-13 18:25:41','2020-03-13 18:25:41',0,4,NULL,NULL),(603,'deleted',-1,4,'2020-03-13 18:26:53','2020-03-13 18:27:22',-1,NULL,NULL,NULL),(604,NULL,1,1,'2020-03-13 18:26:55','2020-03-13 18:26:55',0,9,NULL,NULL),(605,NULL,1,1,'2020-03-13 18:26:55','2020-03-13 18:26:55',0,12,NULL,NULL),(606,NULL,1,1,'2020-03-13 18:26:55','2020-03-13 18:26:55',0,13,NULL,NULL),(607,NULL,1,1,'2020-03-13 18:26:55','2020-03-13 18:26:55',0,10,NULL,NULL),(608,NULL,1,1,'2020-03-13 18:26:55','2020-03-13 18:26:55',0,11,NULL,NULL),(609,'Bench',1,4,'2020-03-13 18:27:29','2020-03-13 18:27:29',0,NULL,NULL,NULL),(610,'deleted',-1,4,'2020-03-13 18:28:45','2020-03-13 18:48:47',-1,NULL,NULL,NULL),(611,NULL,1,1,'2020-03-13 18:28:47','2020-03-13 18:28:47',0,1,NULL,NULL),(612,NULL,1,1,'2020-03-13 18:28:47','2020-03-13 18:28:47',0,2,NULL,NULL),(613,NULL,1,1,'2020-03-13 18:28:47','2020-03-13 18:28:47',0,3,NULL,NULL),(614,NULL,1,1,'2020-03-13 18:28:47','2020-03-13 18:28:47',0,4,NULL,NULL),(615,'deleted',-1,4,'2020-03-13 18:29:24','2020-03-13 18:48:47',-1,NULL,NULL,NULL),(616,NULL,1,1,'2020-03-13 18:29:27','2020-03-13 18:29:27',0,1,NULL,NULL),(617,NULL,1,1,'2020-03-13 18:29:27','2020-03-13 18:29:27',0,2,NULL,NULL),(618,NULL,1,1,'2020-03-13 18:29:27','2020-03-13 18:29:27',0,3,NULL,NULL),(619,NULL,1,1,'2020-03-13 18:29:27','2020-03-13 18:29:27',0,4,NULL,NULL),(620,NULL,1,1,'2020-03-13 18:29:27','2020-03-13 18:29:27',0,4,NULL,NULL),(621,'Freezer',1,4,'2020-03-13 18:30:02','2020-03-13 18:30:20',0,NULL,NULL,NULL),(622,NULL,1,1,'2020-03-13 18:30:04','2020-03-13 18:30:04',0,1,NULL,NULL),(623,NULL,1,1,'2020-03-13 18:30:04','2020-03-13 18:30:04',0,2,NULL,NULL),(624,NULL,1,1,'2020-03-13 18:30:04','2020-03-13 18:30:04',0,3,NULL,NULL),(625,NULL,1,1,'2020-03-13 18:30:04','2020-03-13 18:30:04',0,4,NULL,NULL),(626,'deleted',-1,4,'2020-03-13 18:47:11','2020-03-13 18:48:47',-1,NULL,NULL,NULL),(627,NULL,1,1,'2020-03-13 18:47:13','2020-03-13 18:47:13',0,9,NULL,NULL),(628,NULL,1,1,'2020-03-13 18:47:13','2020-03-13 18:47:13',0,12,NULL,NULL),(629,NULL,1,1,'2020-03-13 18:47:13','2020-03-13 18:47:13',0,13,NULL,NULL),(630,NULL,1,1,'2020-03-13 18:47:13','2020-03-13 18:47:13',0,10,NULL,NULL),(631,NULL,1,1,'2020-03-13 18:47:13','2020-03-13 18:47:13',0,11,NULL,NULL),(632,'Freezer',1,4,'2020-03-13 18:48:54','2020-03-13 18:49:11',0,NULL,NULL,NULL),(633,'Bench',1,4,'2020-03-13 18:52:20','2020-03-13 18:52:20',0,NULL,NULL,NULL),(634,NULL,1,1,'2020-03-13 18:52:23','2020-03-13 18:52:23',0,1,NULL,NULL),(635,NULL,1,1,'2020-03-13 18:52:23','2020-03-13 18:52:23',0,2,NULL,NULL),(636,NULL,1,1,'2020-03-13 18:52:23','2020-03-13 18:52:23',0,3,NULL,NULL),(637,NULL,1,1,'2020-03-13 18:52:23','2020-03-13 18:52:23',0,4,NULL,NULL),(638,'deleted',-1,4,'2020-03-13 18:59:18','2020-03-13 18:59:44',-1,NULL,NULL,NULL),(639,NULL,1,1,'2020-03-13 18:59:20','2020-03-13 18:59:20',0,1,NULL,NULL),(640,NULL,1,1,'2020-03-13 18:59:20','2020-03-13 18:59:20',0,2,NULL,NULL),(641,NULL,1,1,'2020-03-13 18:59:20','2020-03-13 18:59:20',0,3,NULL,NULL),(642,NULL,1,1,'2020-03-13 18:59:20','2020-03-13 18:59:20',0,4,NULL,NULL),(643,NULL,1,1,'2020-03-13 18:59:20','2020-03-13 18:59:20',0,4,NULL,NULL),(644,'deleted',-1,4,'2020-03-13 18:59:49','2020-03-13 19:13:06',-1,NULL,NULL,NULL),(645,NULL,1,1,'2020-03-13 18:59:51','2020-03-13 18:59:51',0,1,NULL,NULL),(646,NULL,1,1,'2020-03-13 18:59:51','2020-03-13 18:59:51',0,2,NULL,NULL),(647,NULL,1,1,'2020-03-13 18:59:51','2020-03-13 18:59:51',0,3,NULL,NULL),(648,NULL,1,1,'2020-03-13 18:59:51','2020-03-13 18:59:51',0,4,NULL,NULL),(649,NULL,1,1,'2020-03-13 18:59:51','2020-03-13 18:59:51',0,4,NULL,NULL),(650,'deleted',-1,4,'2020-03-13 19:19:15','2020-03-13 19:23:41',-1,NULL,NULL,NULL),(651,NULL,1,1,'2020-03-13 19:19:17','2020-03-13 19:19:17',0,1,NULL,NULL),(652,NULL,1,1,'2020-03-13 19:19:17','2020-03-13 19:19:17',0,2,NULL,NULL),(653,NULL,1,1,'2020-03-13 19:19:17','2020-03-13 19:19:17',0,3,NULL,NULL),(654,NULL,1,1,'2020-03-13 19:19:17','2020-03-13 19:19:17',0,4,NULL,NULL),(655,NULL,1,1,'2020-03-13 19:19:17','2020-03-13 19:19:17',0,4,NULL,NULL),(656,'deleted',-1,4,'2020-03-13 19:21:01','2020-03-13 19:23:19',-1,NULL,NULL,NULL),(657,NULL,1,1,'2020-03-13 19:21:06','2020-03-13 19:21:06',0,1,NULL,NULL),(658,NULL,1,1,'2020-03-13 19:21:06','2020-03-13 19:21:06',0,2,NULL,NULL),(659,NULL,1,1,'2020-03-13 19:21:06','2020-03-13 19:21:06',0,3,NULL,NULL),(660,NULL,1,1,'2020-03-13 19:21:06','2020-03-13 19:21:06',0,4,NULL,NULL),(661,'Freezer',1,4,'2020-03-13 19:23:23','2020-03-13 19:23:34',0,NULL,NULL,NULL),(662,NULL,1,1,'2020-03-13 19:23:27','2020-03-13 19:23:27',0,1,NULL,NULL),(663,NULL,1,1,'2020-03-13 19:23:27','2020-03-13 19:23:27',0,2,NULL,NULL),(664,NULL,1,1,'2020-03-13 19:23:27','2020-03-13 19:23:27',0,3,NULL,NULL),(665,NULL,1,1,'2020-03-13 19:23:27','2020-03-13 19:23:27',0,4,NULL,NULL),(666,'Freezer',1,4,'2020-03-13 19:50:14','2020-03-13 19:50:24',0,NULL,NULL,NULL),(667,NULL,1,1,'2020-03-13 19:50:17','2020-03-13 19:50:17',0,1,NULL,NULL),(668,NULL,1,1,'2020-03-13 19:50:17','2020-03-13 19:50:17',0,2,NULL,NULL),(669,NULL,1,1,'2020-03-13 19:50:17','2020-03-13 19:50:17',0,3,NULL,NULL),(670,NULL,1,1,'2020-03-13 19:50:17','2020-03-13 19:50:17',0,4,NULL,NULL),(671,'deleted',-1,4,'2020-03-13 19:50:44','2020-03-13 19:50:54',-1,NULL,NULL,NULL),(672,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,1,NULL,NULL),(673,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,2,NULL,NULL),(674,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,3,NULL,NULL),(675,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,4,NULL,NULL),(676,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,5,NULL,NULL),(677,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,6,NULL,NULL),(678,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,7,NULL,NULL),(679,NULL,1,1,'2020-03-13 19:50:46','2020-03-13 19:50:46',0,8,NULL,NULL),(680,'deleted',-1,4,'2020-03-13 20:04:27','2020-03-13 20:04:40',-1,NULL,NULL,NULL),(681,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,1,NULL,NULL),(682,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,2,NULL,NULL),(683,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,3,NULL,NULL),(684,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,4,NULL,NULL),(685,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,5,NULL,NULL),(686,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,6,NULL,NULL),(687,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,7,NULL,NULL),(688,NULL,1,1,'2020-03-13 20:04:29','2020-03-13 20:04:29',0,8,NULL,NULL),(689,'Freezer',1,4,'2020-03-13 20:21:06','2020-03-13 20:21:20',0,NULL,NULL,NULL),(690,NULL,1,1,'2020-03-13 20:21:12','2020-03-13 20:21:12',0,1,NULL,NULL),(691,NULL,1,1,'2020-03-13 20:21:12','2020-03-13 20:21:12',0,2,NULL,NULL),(692,NULL,1,1,'2020-03-13 20:21:12','2020-03-13 20:21:12',0,3,NULL,NULL),(693,NULL,1,1,'2020-03-13 20:21:12','2020-03-13 20:21:12',0,4,NULL,NULL),(694,'deleted',-1,4,'2020-03-13 20:33:41','2020-03-13 20:33:52',-1,NULL,NULL,NULL),(695,NULL,1,1,'2020-03-13 20:33:43','2020-03-13 20:33:43',0,15,NULL,NULL),(696,NULL,1,1,'2020-03-13 20:33:43','2020-03-13 20:33:43',0,16,NULL,NULL),(697,NULL,1,1,'2020-03-13 20:33:43','2020-03-13 20:33:43',0,17,NULL,NULL),(698,'Freezer',1,4,'2020-03-13 20:34:01','2020-03-13 20:34:10',0,NULL,NULL,NULL),(699,NULL,1,1,'2020-03-13 20:34:03','2020-03-13 20:34:03',0,15,NULL,NULL),(700,NULL,1,1,'2020-03-13 20:34:03','2020-03-13 20:34:03',0,16,NULL,NULL),(701,NULL,1,1,'2020-03-13 20:34:03','2020-03-13 20:34:03',0,17,NULL,NULL),(702,'deleted',-1,4,'2020-03-13 20:39:31','2020-03-13 20:39:40',-1,NULL,NULL,NULL),(703,NULL,1,1,'2020-03-13 20:39:33','2020-03-13 20:39:33',0,15,NULL,NULL),(704,NULL,1,1,'2020-03-13 20:39:33','2020-03-13 20:39:33',0,16,NULL,NULL),(705,NULL,1,1,'2020-03-13 20:39:33','2020-03-13 20:39:33',0,17,NULL,NULL),(706,'deleted',-1,4,'2020-03-13 20:39:48','2020-03-13 20:39:57',-1,NULL,NULL,NULL),(707,NULL,1,1,'2020-03-13 20:39:50','2020-03-13 20:39:50',0,15,NULL,NULL),(708,NULL,1,1,'2020-03-13 20:39:50','2020-03-13 20:39:50',0,16,NULL,NULL),(709,NULL,1,1,'2020-03-13 20:39:50','2020-03-13 20:39:50',0,17,NULL,NULL),(710,'Freezer',1,4,'2020-03-13 20:40:21','2020-03-13 20:40:31',0,NULL,NULL,NULL),(711,NULL,1,1,'2020-03-13 20:40:24','2020-03-13 20:40:24',0,15,NULL,NULL),(712,NULL,1,1,'2020-03-13 20:40:24','2020-03-13 20:40:24',0,16,NULL,NULL),(713,NULL,1,1,'2020-03-13 20:40:24','2020-03-13 20:40:24',0,17,NULL,NULL),(714,'deleted',-1,4,'2020-03-13 20:40:47','2020-03-13 20:41:25',-1,NULL,NULL,NULL),(715,NULL,1,1,'2020-03-13 20:40:51','2020-03-13 20:40:51',0,15,NULL,NULL),(716,NULL,1,1,'2020-03-13 20:40:51','2020-03-13 20:40:51',0,16,NULL,NULL),(717,NULL,1,1,'2020-03-13 20:40:51','2020-03-13 20:40:51',0,17,NULL,NULL),(718,'Bench',1,3,'2020-03-13 21:45:02','2020-03-13 21:45:02',0,NULL,NULL,NULL),(719,NULL,1,1,'2020-03-13 21:45:11','2020-03-13 21:45:11',0,18,NULL,NULL),(720,NULL,1,1,'2020-03-13 21:45:17','2020-03-13 21:45:17',0,19,NULL,NULL),(721,NULL,1,1,'2020-03-13 21:45:26','2020-03-13 21:45:26',0,20,NULL,NULL),(722,'deleted',-1,4,'2020-03-13 21:45:59','2020-03-13 21:46:10',-1,NULL,NULL,NULL),(723,NULL,1,1,'2020-03-13 21:46:01','2020-03-13 21:46:01',0,18,NULL,NULL),(724,NULL,1,1,'2020-03-13 21:46:01','2020-03-13 21:46:01',0,19,NULL,NULL),(725,NULL,1,1,'2020-03-13 21:46:01','2020-03-13 21:46:01',0,20,NULL,NULL),(726,'deleted',-1,4,'2020-03-13 21:46:18','2020-03-13 21:49:12',-1,NULL,NULL,NULL),(727,NULL,1,1,'2020-03-13 21:46:21','2020-03-13 21:46:21',0,18,NULL,NULL),(728,NULL,1,1,'2020-03-13 21:46:21','2020-03-13 21:46:21',0,19,NULL,NULL),(729,NULL,1,1,'2020-03-13 21:46:21','2020-03-13 21:46:21',0,20,NULL,NULL),(730,'deleted',-1,4,'2020-03-13 21:46:37','2020-03-13 21:46:50',-1,NULL,NULL,NULL),(731,NULL,1,1,'2020-03-13 21:46:40','2020-03-13 21:46:40',0,18,NULL,NULL),(732,NULL,1,1,'2020-03-13 21:46:40','2020-03-13 21:46:40',0,19,NULL,NULL),(733,NULL,1,1,'2020-03-13 21:46:40','2020-03-13 21:46:40',0,20,NULL,NULL),(734,'deleted',-1,4,'2020-03-13 21:48:08','2020-03-13 21:48:38',-1,NULL,NULL,NULL),(735,NULL,1,1,'2020-03-13 21:48:10','2020-03-13 21:48:10',0,18,NULL,NULL),(736,NULL,1,1,'2020-03-13 21:48:10','2020-03-13 21:48:10',0,19,NULL,NULL),(737,NULL,1,1,'2020-03-13 21:48:10','2020-03-13 21:48:10',0,20,NULL,NULL),(738,'deleted',-1,4,'2020-03-13 21:48:42','2020-03-17 01:17:09',-1,NULL,NULL,NULL),(739,NULL,1,1,'2020-03-13 21:48:43','2020-03-13 21:48:43',0,18,NULL,NULL),(740,NULL,1,1,'2020-03-13 21:48:43','2020-03-13 21:48:43',0,19,NULL,NULL),(741,NULL,1,1,'2020-03-13 21:48:43','2020-03-13 21:48:43',0,20,NULL,NULL),(742,'deleted',-1,4,'2020-03-13 21:53:05','2020-03-13 21:53:27',-1,NULL,NULL,NULL),(743,NULL,1,1,'2020-03-13 21:53:07','2020-03-13 21:53:07',0,15,NULL,NULL),(744,NULL,1,1,'2020-03-13 21:53:07','2020-03-13 21:53:07',0,16,NULL,NULL),(745,NULL,1,1,'2020-03-13 21:53:07','2020-03-13 21:53:07',0,17,NULL,NULL),(746,NULL,1,1,'2020-03-13 21:53:13','2020-03-13 21:53:13',0,19,NULL,NULL),(747,NULL,1,1,'2020-03-13 21:53:13','2020-03-13 21:53:13',0,18,NULL,NULL),(748,NULL,1,1,'2020-03-13 21:53:13','2020-03-13 21:53:13',0,20,NULL,NULL),(749,'deleted',-1,4,'2020-03-13 21:53:39','2020-03-13 21:54:56',-1,NULL,NULL,NULL),(750,NULL,1,1,'2020-03-13 21:53:41','2020-03-13 21:53:41',0,15,NULL,NULL),(751,NULL,1,1,'2020-03-13 21:53:41','2020-03-13 21:53:41',0,16,NULL,NULL),(752,NULL,1,1,'2020-03-13 21:53:41','2020-03-13 21:53:41',0,17,NULL,NULL),(753,'Freezer',1,4,'2020-03-13 21:53:57','2020-03-13 21:54:10',0,NULL,NULL,NULL),(754,NULL,1,1,'2020-03-13 21:53:59','2020-03-13 21:53:59',0,19,NULL,NULL),(755,NULL,1,1,'2020-03-13 21:53:59','2020-03-13 21:53:59',0,18,NULL,NULL),(756,NULL,1,1,'2020-03-13 21:53:59','2020-03-13 21:53:59',0,20,NULL,NULL),(757,'deleted',-1,4,'2020-03-13 21:54:18','2020-03-13 21:54:36',-1,NULL,NULL,NULL),(758,NULL,1,1,'2020-03-13 21:54:21','2020-03-13 21:54:21',0,15,NULL,NULL),(759,NULL,1,1,'2020-03-13 21:54:21','2020-03-13 21:54:21',0,16,NULL,NULL),(760,NULL,1,1,'2020-03-13 21:54:21','2020-03-13 21:54:21',0,17,NULL,NULL),(761,NULL,1,1,'2020-03-13 21:54:26','2020-03-13 21:54:26',0,19,NULL,NULL),(762,NULL,1,1,'2020-03-13 21:54:26','2020-03-13 21:54:26',0,18,NULL,NULL),(763,NULL,1,1,'2020-03-13 21:54:26','2020-03-13 21:54:26',0,20,NULL,NULL),(764,'Freezer',1,4,'2020-03-13 21:54:50','2020-03-13 21:55:00',0,NULL,NULL,NULL),(765,NULL,1,1,'2020-03-13 21:54:52','2020-03-13 21:54:52',0,15,NULL,NULL),(766,NULL,1,1,'2020-03-13 21:54:52','2020-03-13 21:54:52',0,16,NULL,NULL),(767,NULL,1,1,'2020-03-13 21:54:52','2020-03-13 21:54:52',0,17,NULL,NULL),(768,NULL,1,1,'2020-03-13 21:54:52','2020-03-13 21:54:52',0,19,NULL,NULL),(769,NULL,1,1,'2020-03-13 21:54:52','2020-03-13 21:54:52',0,18,NULL,NULL),(770,NULL,1,1,'2020-03-13 21:54:52','2020-03-13 21:54:52',0,20,NULL,NULL),(771,'deleted',-1,4,'2020-03-13 21:57:20','2020-03-13 21:58:18',-1,NULL,NULL,NULL),(772,NULL,1,1,'2020-03-13 21:57:21','2020-03-13 21:57:21',0,15,NULL,NULL),(773,NULL,1,1,'2020-03-13 21:57:21','2020-03-13 21:57:21',0,16,NULL,NULL),(774,NULL,1,1,'2020-03-13 21:57:21','2020-03-13 21:57:21',0,17,NULL,NULL),(775,NULL,1,1,'2020-03-13 21:57:21','2020-03-13 21:57:21',0,19,NULL,NULL),(776,NULL,1,1,'2020-03-13 21:57:21','2020-03-13 21:57:21',0,18,NULL,NULL),(777,NULL,1,1,'2020-03-13 21:57:21','2020-03-13 21:57:21',0,20,NULL,NULL),(778,'Freezer',1,4,'2020-03-13 21:58:22','2020-03-13 21:58:26',0,NULL,NULL,NULL),(779,NULL,1,1,'2020-03-13 21:58:23','2020-03-13 21:58:23',0,15,NULL,NULL),(780,NULL,1,1,'2020-03-13 21:58:23','2020-03-13 21:58:23',0,16,NULL,NULL),(781,NULL,1,1,'2020-03-13 21:58:23','2020-03-13 21:58:23',0,17,NULL,NULL),(782,NULL,1,1,'2020-03-13 21:58:23','2020-03-13 21:58:23',0,19,NULL,NULL),(783,NULL,1,1,'2020-03-13 21:58:23','2020-03-13 21:58:23',0,18,NULL,NULL),(784,NULL,1,1,'2020-03-13 21:58:23','2020-03-13 21:58:23',0,20,NULL,NULL),(785,'deleted',-1,4,'2020-03-13 21:59:19','2020-03-13 21:59:41',-1,NULL,NULL,NULL),(786,NULL,1,1,'2020-03-13 21:59:21','2020-03-13 21:59:21',0,19,NULL,NULL),(787,NULL,1,1,'2020-03-13 21:59:21','2020-03-13 21:59:21',0,18,NULL,NULL),(788,NULL,1,1,'2020-03-13 21:59:21','2020-03-13 21:59:21',0,20,NULL,NULL),(789,'deleted',-1,4,'2020-03-13 21:59:50','2020-03-13 21:59:59',-1,NULL,NULL,NULL),(790,NULL,1,1,'2020-03-13 21:59:53','2020-03-13 21:59:53',0,15,NULL,NULL),(791,NULL,1,1,'2020-03-13 21:59:53','2020-03-13 21:59:53',0,16,NULL,NULL),(792,NULL,1,1,'2020-03-13 21:59:53','2020-03-13 21:59:53',0,17,NULL,NULL),(793,'deleted',-1,4,'2020-03-13 22:00:08','2020-03-13 22:05:37',-1,NULL,NULL,NULL),(794,NULL,1,1,'2020-03-13 22:00:11','2020-03-13 22:00:11',0,19,NULL,NULL),(795,NULL,1,1,'2020-03-13 22:00:11','2020-03-13 22:00:11',0,18,NULL,NULL),(796,NULL,1,1,'2020-03-13 22:00:11','2020-03-13 22:00:11',0,20,NULL,NULL),(797,'Freezer',1,4,'2020-03-13 22:00:29','2020-03-13 22:00:41',0,NULL,NULL,NULL),(798,NULL,1,1,'2020-03-13 22:00:32','2020-03-13 22:00:32',0,15,NULL,NULL),(799,NULL,1,1,'2020-03-13 22:00:32','2020-03-13 22:00:32',0,16,NULL,NULL),(800,NULL,1,1,'2020-03-13 22:00:32','2020-03-13 22:00:32',0,17,NULL,NULL),(801,'deleted',-1,4,'2020-03-13 22:00:52','2020-03-13 22:01:12',-1,NULL,NULL,NULL),(802,NULL,1,1,'2020-03-13 22:00:54','2020-03-13 22:00:54',0,19,NULL,NULL),(803,NULL,1,1,'2020-03-13 22:00:54','2020-03-13 22:00:54',0,18,NULL,NULL),(804,NULL,1,1,'2020-03-13 22:00:54','2020-03-13 22:00:54',0,20,NULL,NULL),(805,'deleted',-1,4,'2020-03-13 22:01:20','2020-03-13 22:01:44',-1,NULL,NULL,NULL),(806,NULL,1,1,'2020-03-13 22:01:24','2020-03-13 22:01:24',0,15,NULL,NULL),(807,NULL,1,1,'2020-03-13 22:01:24','2020-03-13 22:01:24',0,16,NULL,NULL),(808,NULL,1,1,'2020-03-13 22:01:24','2020-03-13 22:01:24',0,17,NULL,NULL),(809,'deleted',-1,4,'2020-03-13 22:02:03','2020-03-13 22:03:37',-1,NULL,NULL,NULL),(810,NULL,1,1,'2020-03-13 22:02:05','2020-03-13 22:02:05',0,19,NULL,NULL),(811,NULL,1,1,'2020-03-13 22:02:05','2020-03-13 22:02:05',0,18,NULL,NULL),(812,NULL,1,1,'2020-03-13 22:02:05','2020-03-13 22:02:05',0,20,NULL,NULL),(813,NULL,1,1,'2020-03-13 22:02:05','2020-03-13 22:02:05',0,15,NULL,NULL),(814,NULL,1,1,'2020-03-13 22:02:05','2020-03-13 22:02:05',0,16,NULL,NULL),(815,NULL,1,1,'2020-03-13 22:02:05','2020-03-13 22:02:05',0,17,NULL,NULL),(816,'deleted',-1,4,'2020-03-13 22:03:42','2020-03-13 22:05:28',-1,NULL,NULL,NULL),(817,NULL,1,1,'2020-03-13 22:03:44','2020-03-13 22:03:44',0,19,NULL,NULL),(818,NULL,1,1,'2020-03-13 22:03:44','2020-03-13 22:03:44',0,18,NULL,NULL),(819,NULL,1,1,'2020-03-13 22:03:44','2020-03-13 22:03:44',0,20,NULL,NULL),(820,NULL,1,1,'2020-03-13 22:03:44','2020-03-13 22:03:44',0,15,NULL,NULL),(821,NULL,1,1,'2020-03-13 22:03:44','2020-03-13 22:03:44',0,16,NULL,NULL),(822,NULL,1,1,'2020-03-13 22:03:44','2020-03-13 22:03:44',0,17,NULL,NULL),(823,'deleted',-1,4,'2020-03-13 22:05:34','2020-03-13 22:06:14',-1,NULL,NULL,NULL),(824,NULL,1,1,'2020-03-13 22:05:36','2020-03-13 22:05:36',0,19,NULL,NULL),(825,NULL,1,1,'2020-03-13 22:05:36','2020-03-13 22:05:36',0,18,NULL,NULL),(826,NULL,1,1,'2020-03-13 22:05:36','2020-03-13 22:05:36',0,20,NULL,NULL),(827,NULL,1,1,'2020-03-13 22:05:36','2020-03-13 22:05:36',0,15,NULL,NULL),(828,NULL,1,1,'2020-03-13 22:05:36','2020-03-13 22:05:36',0,16,NULL,NULL),(829,NULL,1,1,'2020-03-13 22:05:36','2020-03-13 22:05:36',0,17,NULL,NULL),(830,'Bench',1,4,'2020-03-13 22:06:18','2020-03-13 22:06:18',0,NULL,NULL,NULL),(831,NULL,1,1,'2020-03-16 23:57:41','2020-03-16 23:57:41',0,32,NULL,NULL),(832,NULL,1,1,'2020-03-16 23:57:55','2020-03-16 23:57:55',0,32,NULL,NULL),(833,NULL,1,1,'2020-03-16 23:58:04','2020-03-16 23:58:04',0,35,NULL,NULL),(834,NULL,1,1,'2020-03-16 23:58:15','2020-03-16 23:58:15',0,37,NULL,NULL),(835,NULL,1,1,'2020-03-16 23:58:23','2020-03-16 23:58:23',0,39,NULL,NULL),(836,NULL,1,1,'2020-03-16 23:58:29','2020-03-16 23:58:29',0,41,NULL,NULL),(837,NULL,1,1,'2020-03-16 23:58:36','2020-03-16 23:58:36',0,43,NULL,NULL),(838,NULL,1,1,'2020-03-16 23:58:43','2020-03-16 23:58:43',0,45,NULL,NULL),(839,NULL,1,1,'2020-03-16 23:58:50','2020-03-16 23:58:50',0,47,NULL,NULL),(840,NULL,1,1,'2020-03-16 23:58:56','2020-03-16 23:58:56',0,49,NULL,NULL),(841,NULL,1,1,'2020-03-16 23:59:04','2020-03-16 23:59:04',0,53,NULL,NULL),(842,NULL,1,1,'2020-03-16 23:59:11','2020-03-16 23:59:11',0,55,NULL,NULL),(843,NULL,1,1,'2020-03-16 23:59:17','2020-03-16 23:59:17',0,57,NULL,NULL),(844,NULL,1,1,'2020-03-16 23:59:25','2020-03-16 23:59:25',0,59,NULL,NULL),(845,NULL,1,1,'2020-03-16 23:59:31','2020-03-16 23:59:31',0,61,NULL,NULL),(846,NULL,1,1,'2020-03-16 23:59:38','2020-03-16 23:59:38',0,64,NULL,NULL),(847,NULL,1,1,'2020-03-16 23:59:45','2020-03-16 23:59:45',0,65,NULL,NULL),(848,NULL,1,1,'2020-03-16 23:59:51','2020-03-16 23:59:51',0,67,NULL,NULL),(849,NULL,1,1,'2020-03-16 23:59:56','2020-03-16 23:59:56',0,69,NULL,NULL),(850,NULL,1,1,'2020-03-17 00:00:02','2020-03-17 00:00:02',0,71,NULL,NULL),(851,NULL,1,1,'2020-03-17 00:00:08','2020-03-17 00:00:08',0,73,NULL,NULL),(852,NULL,1,1,'2020-03-17 00:00:17','2020-03-17 00:00:17',0,75,NULL,NULL),(853,NULL,1,1,'2020-03-17 00:00:34','2020-03-17 00:00:34',0,78,NULL,NULL),(854,NULL,1,1,'2020-03-17 00:00:41','2020-03-17 00:00:41',0,80,NULL,NULL),(855,NULL,1,1,'2020-03-17 00:00:49','2020-03-17 00:00:49',0,82,NULL,NULL),(856,NULL,1,1,'2020-03-17 00:00:57','2020-03-17 00:00:57',0,84,NULL,NULL),(857,NULL,1,1,'2020-03-17 00:01:06','2020-03-17 00:01:06',0,86,NULL,NULL),(858,NULL,1,1,'2020-03-17 00:01:13','2020-03-17 00:01:13',0,88,NULL,NULL),(859,NULL,1,1,'2020-03-17 00:01:20','2020-03-17 00:01:20',0,90,NULL,NULL),(860,NULL,1,1,'2020-03-17 00:01:28','2020-03-17 00:01:28',0,92,NULL,NULL),(861,NULL,1,1,'2020-03-17 00:01:35','2020-03-17 00:01:35',0,94,NULL,NULL),(862,NULL,1,1,'2020-03-17 00:02:02','2020-03-17 00:02:02',0,96,NULL,NULL),(863,NULL,1,1,'2020-03-17 00:02:10','2020-03-17 00:02:10',0,98,NULL,NULL),(864,NULL,1,1,'2020-03-17 00:02:17','2020-03-17 00:02:17',0,100,NULL,NULL),(865,NULL,1,1,'2020-03-17 00:02:24','2020-03-17 00:02:24',0,102,NULL,NULL),(866,NULL,1,1,'2020-03-17 00:02:32','2020-03-17 00:02:32',0,104,NULL,NULL),(867,NULL,1,1,'2020-03-17 00:02:40','2020-03-17 00:02:40',0,106,NULL,NULL),(868,NULL,1,1,'2020-03-17 00:02:47','2020-03-17 00:02:47',0,108,NULL,NULL),(869,NULL,1,1,'2020-03-17 00:02:54','2020-03-17 00:02:54',0,110,NULL,NULL),(870,NULL,1,1,'2020-03-17 00:03:00','2020-03-17 00:03:00',0,112,NULL,NULL),(871,NULL,1,1,'2020-03-17 00:03:46','2020-03-17 00:03:46',0,114,NULL,NULL),(872,NULL,1,1,'2020-03-17 00:03:53','2020-03-17 00:03:53',0,116,NULL,NULL),(873,NULL,1,1,'2020-03-17 00:04:02','2020-03-17 00:04:02',0,118,NULL,NULL),(874,NULL,1,1,'2020-03-17 00:04:10','2020-03-17 00:04:10',0,120,NULL,NULL),(875,NULL,1,1,'2020-03-17 00:04:15','2020-03-17 00:04:15',0,122,NULL,NULL),(876,NULL,1,1,'2020-03-17 00:04:22','2020-03-17 00:04:22',0,124,NULL,NULL),(877,NULL,1,1,'2020-03-17 00:04:29','2020-03-17 00:04:29',0,126,NULL,NULL),(878,NULL,1,1,'2020-03-17 00:04:37','2020-03-17 00:04:37',0,128,NULL,NULL),(879,NULL,1,1,'2020-03-17 00:04:44','2020-03-17 00:04:44',0,130,NULL,NULL),(880,NULL,1,1,'2020-03-17 00:04:51','2020-03-17 00:04:51',0,132,NULL,NULL),(881,NULL,1,1,'2020-03-17 00:04:59','2020-03-17 00:04:59',0,134,NULL,NULL),(882,NULL,1,1,'2020-03-17 00:05:04','2020-03-17 00:05:04',0,136,NULL,NULL),(883,NULL,1,1,'2020-03-17 00:05:10','2020-03-17 00:05:10',0,139,NULL,NULL),(884,NULL,1,1,'2020-03-17 00:05:16','2020-03-17 00:05:16',0,141,NULL,NULL),(885,NULL,1,1,'2020-03-17 00:05:22','2020-03-17 00:05:22',0,143,NULL,NULL),(886,NULL,1,1,'2020-03-17 00:05:28','2020-03-17 00:05:28',0,145,NULL,NULL),(887,NULL,1,1,'2020-03-17 00:05:34','2020-03-17 00:05:34',0,147,NULL,NULL),(888,NULL,1,1,'2020-03-17 00:05:40','2020-03-17 00:05:40',0,149,NULL,NULL),(889,NULL,1,1,'2020-03-17 00:05:47','2020-03-17 00:05:47',0,151,NULL,NULL),(890,NULL,1,1,'2020-03-17 00:05:53','2020-03-17 00:05:53',0,153,NULL,NULL),(891,NULL,1,1,'2020-03-17 00:05:59','2020-03-17 00:05:59',0,155,NULL,NULL),(892,NULL,1,1,'2020-03-17 00:06:06','2020-03-17 00:06:06',0,157,NULL,NULL),(893,NULL,1,1,'2020-03-17 00:06:14','2020-03-17 00:06:14',0,159,NULL,NULL),(894,NULL,1,1,'2020-03-17 00:06:21','2020-03-17 00:06:21',0,161,NULL,NULL),(895,NULL,1,1,'2020-03-17 00:06:28','2020-03-17 00:06:28',0,163,NULL,NULL),(896,NULL,1,1,'2020-03-17 00:06:35','2020-03-17 00:06:35',0,165,NULL,NULL),(897,NULL,1,1,'2020-03-17 00:06:41','2020-03-17 00:06:41',0,167,NULL,NULL),(898,NULL,1,1,'2020-03-17 00:06:47','2020-03-17 00:06:47',0,169,NULL,NULL),(899,NULL,1,1,'2020-03-17 00:06:54','2020-03-17 00:06:54',0,171,NULL,NULL),(900,NULL,1,1,'2020-03-17 00:07:00','2020-03-17 00:07:00',0,173,NULL,NULL),(901,NULL,1,1,'2020-03-17 00:07:06','2020-03-17 00:07:06',0,175,NULL,NULL),(902,NULL,1,1,'2020-03-17 00:07:12','2020-03-17 00:07:12',0,177,NULL,NULL),(903,NULL,1,1,'2020-03-17 00:07:18','2020-03-17 00:07:18',0,179,NULL,NULL),(904,NULL,1,1,'2020-03-17 00:07:27','2020-03-17 00:07:27',0,181,NULL,NULL),(905,NULL,1,1,'2020-03-17 00:07:32','2020-03-17 00:07:32',0,183,NULL,NULL),(906,NULL,1,1,'2020-03-17 00:07:39','2020-03-17 00:07:39',0,185,NULL,NULL),(907,NULL,1,1,'2020-03-17 00:07:44','2020-03-17 00:07:44',0,187,NULL,NULL),(908,NULL,1,1,'2020-03-17 00:07:51','2020-03-17 00:07:51',0,189,NULL,NULL),(909,NULL,1,1,'2020-03-17 00:07:59','2020-03-17 00:07:59',0,191,NULL,NULL),(910,NULL,1,1,'2020-03-17 00:08:05','2020-03-17 00:08:05',0,193,NULL,NULL),(911,'Bench',1,3,'2020-03-17 00:09:37','2020-03-17 00:09:37',0,NULL,NULL,NULL),(912,NULL,1,1,'2020-03-17 00:09:59','2020-03-17 00:09:59',0,193,NULL,NULL),(913,NULL,1,1,'2020-03-17 00:10:07','2020-03-17 00:10:07',0,195,NULL,NULL),(914,NULL,1,1,'2020-03-17 00:10:14','2020-03-17 00:10:14',0,197,NULL,NULL),(915,NULL,1,1,'2020-03-17 00:10:23','2020-03-17 00:10:23',0,199,NULL,NULL),(916,NULL,1,1,'2020-03-17 00:10:29','2020-03-17 00:10:29',0,201,NULL,NULL),(917,NULL,1,1,'2020-03-17 00:10:37','2020-03-17 00:10:37',0,203,NULL,NULL),(918,NULL,1,1,'2020-03-17 00:10:44','2020-03-17 00:10:44',0,205,NULL,NULL),(919,NULL,1,1,'2020-03-17 00:11:24','2020-03-17 00:11:24',0,207,NULL,NULL),(920,NULL,1,1,'2020-03-17 00:11:41','2020-03-17 00:11:41',0,207,NULL,NULL),(921,NULL,1,1,'2020-03-17 00:11:49','2020-03-17 00:11:49',0,211,NULL,NULL),(922,NULL,1,1,'2020-03-17 00:11:58','2020-03-17 00:11:58',0,213,NULL,NULL),(923,NULL,1,1,'2020-03-17 00:12:04','2020-03-17 00:12:04',0,215,NULL,NULL),(924,NULL,1,1,'2020-03-17 00:12:09','2020-03-17 00:12:09',0,217,NULL,NULL),(925,NULL,1,1,'2020-03-17 00:12:16','2020-03-17 00:12:16',0,219,NULL,NULL),(926,NULL,1,1,'2020-03-17 00:12:24','2020-03-17 00:12:24',0,221,NULL,NULL),(927,NULL,1,1,'2020-03-17 00:12:33','2020-03-17 00:12:33',0,223,NULL,NULL),(928,'deleted',-1,4,'2020-03-17 00:47:48','2020-03-17 00:48:22',-1,NULL,NULL,NULL),(929,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,9,NULL,NULL),(930,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,12,NULL,NULL),(931,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,13,NULL,NULL),(932,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,10,NULL,NULL),(933,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,11,NULL,NULL),(934,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,14,NULL,NULL),(935,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,15,NULL,NULL),(936,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,16,NULL,NULL),(937,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,17,NULL,NULL),(938,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,19,NULL,NULL),(939,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,21,NULL,NULL),(940,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,23,NULL,NULL),(941,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,25,NULL,NULL),(942,NULL,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52',0,27,NULL,NULL),(943,NULL,1,1,'2020-03-17 00:48:03','2020-03-17 00:48:03',0,1,NULL,NULL),(944,NULL,1,1,'2020-03-17 00:48:03','2020-03-17 00:48:03',0,2,NULL,NULL),(945,NULL,1,1,'2020-03-17 00:48:03','2020-03-17 00:48:03',0,3,NULL,NULL),(946,NULL,1,1,'2020-03-17 00:48:03','2020-03-17 00:48:03',0,4,NULL,NULL),(947,NULL,1,1,'2020-03-17 00:48:03','2020-03-17 00:48:03',0,5,NULL,NULL),(948,NULL,1,1,'2020-03-17 00:48:03','2020-03-17 00:48:03',0,6,NULL,NULL),(949,NULL,1,1,'2020-03-17 00:48:03','2020-03-17 00:48:03',0,7,NULL,NULL),(950,'Freezer',1,4,'2020-03-17 00:48:38','2020-03-17 00:48:54',0,NULL,NULL,NULL),(951,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,9,NULL,NULL),(952,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,12,NULL,NULL),(953,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,13,NULL,NULL),(954,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,10,NULL,NULL),(955,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,11,NULL,NULL),(956,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,14,NULL,NULL),(957,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,15,NULL,NULL),(958,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,16,NULL,NULL),(959,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,17,NULL,NULL),(960,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,19,NULL,NULL),(961,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,21,NULL,NULL),(962,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,23,NULL,NULL),(963,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,25,NULL,NULL),(964,NULL,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41',0,27,NULL,NULL),(965,NULL,1,1,'2020-03-17 00:48:45','2020-03-17 00:48:45',0,1,NULL,NULL),(966,NULL,1,1,'2020-03-17 00:48:45','2020-03-17 00:48:45',0,2,NULL,NULL),(967,NULL,1,1,'2020-03-17 00:48:45','2020-03-17 00:48:45',0,3,NULL,NULL),(968,NULL,1,1,'2020-03-17 00:48:45','2020-03-17 00:48:45',0,4,NULL,NULL),(969,NULL,1,1,'2020-03-17 00:48:45','2020-03-17 00:48:45',0,5,NULL,NULL),(970,NULL,1,1,'2020-03-17 00:48:45','2020-03-17 00:48:45',0,6,NULL,NULL),(971,NULL,1,1,'2020-03-17 00:48:45','2020-03-17 00:48:45',0,7,NULL,NULL),(972,'deleted',-1,4,'2020-03-17 00:53:02','2020-03-17 00:53:31',-1,NULL,NULL,NULL),(973,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,9,NULL,NULL),(974,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,25,NULL,NULL),(975,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,12,NULL,NULL),(976,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,27,NULL,NULL),(977,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,13,NULL,NULL),(978,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,10,NULL,NULL),(979,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,11,NULL,NULL),(980,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,14,NULL,NULL),(981,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,15,NULL,NULL),(982,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,16,NULL,NULL),(983,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,17,NULL,NULL),(984,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,19,NULL,NULL),(985,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,21,NULL,NULL),(986,NULL,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06',0,23,NULL,NULL),(987,'Bench',1,4,'2020-03-17 00:53:40','2020-03-17 00:53:40',0,NULL,NULL,NULL),(988,'deleted',-1,4,'2020-03-17 00:54:21','2020-03-17 00:55:11',-1,NULL,NULL,NULL),(989,NULL,1,1,'2020-03-17 00:54:44','2020-03-17 00:54:44',0,1,NULL,NULL),(990,NULL,1,1,'2020-03-17 00:54:44','2020-03-17 00:54:44',0,2,NULL,NULL),(991,NULL,1,1,'2020-03-17 00:54:44','2020-03-17 00:54:44',0,3,NULL,NULL),(992,NULL,1,1,'2020-03-17 00:54:44','2020-03-17 00:54:44',0,4,NULL,NULL),(993,NULL,1,1,'2020-03-17 00:54:44','2020-03-17 00:54:44',0,5,NULL,NULL),(994,NULL,1,1,'2020-03-17 00:54:44','2020-03-17 00:54:44',0,6,NULL,NULL),(995,NULL,1,1,'2020-03-17 00:54:44','2020-03-17 00:54:44',0,7,NULL,NULL),(996,'Bench',1,4,'2020-03-17 00:57:18','2020-03-17 00:57:18',0,NULL,NULL,NULL),(997,'Bench',1,4,'2020-03-17 01:05:28','2020-03-17 01:05:28',0,NULL,NULL,NULL),(998,'deleted',-1,4,'2020-03-17 01:06:30','2020-03-17 01:17:09',-1,NULL,NULL,NULL),(999,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,9,NULL,NULL),(1000,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,25,NULL,NULL),(1001,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,12,NULL,NULL),(1002,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,27,NULL,NULL),(1003,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,13,NULL,NULL),(1004,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,10,NULL,NULL),(1005,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,11,NULL,NULL),(1006,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,14,NULL,NULL),(1007,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,15,NULL,NULL),(1008,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,16,NULL,NULL),(1009,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,17,NULL,NULL),(1010,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,19,NULL,NULL),(1011,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,21,NULL,NULL),(1012,NULL,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38',0,23,NULL,NULL),(1013,NULL,1,1,'2020-03-17 01:06:42','2020-03-17 01:06:42',0,1,NULL,NULL),(1014,NULL,1,1,'2020-03-17 01:06:42','2020-03-17 01:06:42',0,2,NULL,NULL),(1015,NULL,1,1,'2020-03-17 01:06:42','2020-03-17 01:06:42',0,3,NULL,NULL),(1016,NULL,1,1,'2020-03-17 01:06:42','2020-03-17 01:06:42',0,4,NULL,NULL),(1017,NULL,1,1,'2020-03-17 01:06:42','2020-03-17 01:06:42',0,5,NULL,NULL),(1018,NULL,1,1,'2020-03-17 01:06:42','2020-03-17 01:06:42',0,6,NULL,NULL),(1019,NULL,1,1,'2020-03-17 01:06:42','2020-03-17 01:06:42',0,7,NULL,NULL),(1020,'Freezer',-1,4,'2020-03-17 01:18:23','2020-03-17 01:19:42',-1,NULL,NULL,NULL),(1021,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,9,NULL,NULL),(1022,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,25,NULL,NULL),(1023,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,12,NULL,NULL),(1024,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,27,NULL,NULL),(1025,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,13,NULL,NULL),(1026,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,10,NULL,NULL),(1027,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,11,NULL,NULL),(1028,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,14,NULL,NULL),(1029,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,15,NULL,NULL),(1030,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,16,NULL,NULL),(1031,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,17,NULL,NULL),(1032,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,19,NULL,NULL),(1033,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,21,NULL,NULL),(1034,NULL,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31',0,23,NULL,NULL),(1035,NULL,1,1,'2020-03-17 01:19:21','2020-03-17 01:19:21',0,1,NULL,NULL),(1036,NULL,1,1,'2020-03-17 01:19:21','2020-03-17 01:19:21',0,2,NULL,NULL),(1037,NULL,1,1,'2020-03-17 01:19:21','2020-03-17 01:19:21',0,3,NULL,NULL),(1038,NULL,1,1,'2020-03-17 01:19:21','2020-03-17 01:19:21',0,4,NULL,NULL),(1039,NULL,1,1,'2020-03-17 01:19:21','2020-03-17 01:19:21',0,5,NULL,NULL),(1040,NULL,1,1,'2020-03-17 01:19:21','2020-03-17 01:19:21',0,6,NULL,NULL),(1041,NULL,1,1,'2020-03-17 01:19:21','2020-03-17 01:19:21',0,7,NULL,NULL),(1042,'deleted',-1,4,'2020-03-17 01:21:50','2020-03-17 01:22:03',-1,NULL,NULL,NULL),(1043,NULL,1,1,'2020-03-17 01:21:55','2020-03-17 01:21:55',0,1,NULL,NULL),(1044,NULL,1,1,'2020-03-17 01:21:55','2020-03-17 01:21:55',0,2,NULL,NULL),(1045,NULL,1,1,'2020-03-17 01:21:55','2020-03-17 01:21:55',0,3,NULL,NULL),(1046,NULL,1,1,'2020-03-17 01:21:55','2020-03-17 01:21:55',0,4,NULL,NULL),(1047,NULL,1,1,'2020-03-17 01:21:55','2020-03-17 01:21:55',0,5,NULL,NULL),(1048,NULL,1,1,'2020-03-17 01:21:55','2020-03-17 01:21:55',0,6,NULL,NULL),(1049,NULL,1,1,'2020-03-17 01:21:55','2020-03-17 01:21:55',0,7,NULL,NULL),(1050,'Freezer',1,4,'2020-03-17 01:24:16','2020-03-17 01:24:31',0,NULL,NULL,NULL),(1051,NULL,1,1,'2020-03-17 01:24:20','2020-03-17 01:24:20',0,1,NULL,NULL),(1052,NULL,1,1,'2020-03-17 01:24:20','2020-03-17 01:24:20',0,2,NULL,NULL),(1053,NULL,1,1,'2020-03-17 01:24:20','2020-03-17 01:24:20',0,3,NULL,NULL),(1054,NULL,1,1,'2020-03-17 01:24:20','2020-03-17 01:24:20',0,4,NULL,NULL),(1055,NULL,1,1,'2020-03-17 01:24:20','2020-03-17 01:24:20',0,5,NULL,NULL),(1056,NULL,1,1,'2020-03-17 01:24:20','2020-03-17 01:24:20',0,6,NULL,NULL),(1057,NULL,1,1,'2020-03-17 01:24:20','2020-03-17 01:24:20',0,7,NULL,NULL),(1058,NULL,1,1,'2020-03-17 01:24:23','2020-03-17 01:24:23',0,9,NULL,NULL),(1059,NULL,1,1,'2020-03-17 01:24:23','2020-03-17 01:24:23',0,12,NULL,NULL),(1060,NULL,1,1,'2020-03-17 01:24:23','2020-03-17 01:24:23',0,13,NULL,NULL),(1061,NULL,1,1,'2020-03-17 01:24:23','2020-03-17 01:24:23',0,10,NULL,NULL),(1062,NULL,1,1,'2020-03-17 01:24:23','2020-03-17 01:24:23',0,11,NULL,NULL),(1063,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,14,NULL,NULL),(1064,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,15,NULL,NULL),(1065,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,16,NULL,NULL),(1066,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,17,NULL,NULL),(1067,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,19,NULL,NULL),(1068,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,21,NULL,NULL),(1069,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,23,NULL,NULL),(1070,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,25,NULL,NULL),(1071,NULL,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24',0,27,NULL,NULL),(1072,'deleted',-1,4,'2020-03-17 01:25:56','2020-03-17 01:26:18',-1,NULL,NULL,NULL),(1073,NULL,1,1,'2020-03-17 01:26:01','2020-03-17 01:26:01',0,1,NULL,NULL),(1074,NULL,1,1,'2020-03-17 01:26:01','2020-03-17 01:26:01',0,2,NULL,NULL),(1075,NULL,1,1,'2020-03-17 01:26:01','2020-03-17 01:26:01',0,3,NULL,NULL),(1076,NULL,1,1,'2020-03-17 01:26:01','2020-03-17 01:26:01',0,4,NULL,NULL),(1077,NULL,1,1,'2020-03-17 01:26:01','2020-03-17 01:26:01',0,5,NULL,NULL),(1078,NULL,1,1,'2020-03-17 01:26:01','2020-03-17 01:26:01',0,6,NULL,NULL),(1079,NULL,1,1,'2020-03-17 01:26:01','2020-03-17 01:26:01',0,7,NULL,NULL),(1080,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,9,NULL,NULL),(1081,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,12,NULL,NULL),(1082,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,13,NULL,NULL),(1083,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,10,NULL,NULL),(1084,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,11,NULL,NULL),(1085,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,14,NULL,NULL),(1086,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,15,NULL,NULL),(1087,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,16,NULL,NULL),(1088,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,17,NULL,NULL),(1089,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,19,NULL,NULL),(1090,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,21,NULL,NULL),(1091,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,23,NULL,NULL),(1092,NULL,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08',0,25,NULL,NULL),(1093,NULL,1,1,'2020-03-17 01:26:09','2020-03-17 01:26:09',0,27,NULL,NULL),(1094,'Freezer',1,4,'2020-03-17 01:26:31','2020-03-17 01:26:41',0,NULL,NULL,NULL),(1095,NULL,1,1,'2020-03-17 01:26:34','2020-03-17 01:26:34',0,1,NULL,NULL),(1096,NULL,1,1,'2020-03-17 01:26:34','2020-03-17 01:26:34',0,2,NULL,NULL),(1097,NULL,1,1,'2020-03-17 01:26:34','2020-03-17 01:26:34',0,3,NULL,NULL),(1098,NULL,1,1,'2020-03-17 01:26:34','2020-03-17 01:26:34',0,4,NULL,NULL),(1099,NULL,1,1,'2020-03-17 01:26:34','2020-03-17 01:26:34',0,5,NULL,NULL),(1100,NULL,1,1,'2020-03-17 01:26:34','2020-03-17 01:26:34',0,6,NULL,NULL),(1101,NULL,1,1,'2020-03-17 01:26:34','2020-03-17 01:26:34',0,7,NULL,NULL),(1102,'deleted',-1,4,'2020-03-17 01:26:57','2020-03-17 01:27:27',-1,NULL,NULL,NULL),(1103,NULL,1,1,'2020-03-17 01:27:15','2020-03-17 01:27:15',0,1,NULL,NULL),(1104,NULL,1,1,'2020-03-17 01:27:15','2020-03-17 01:27:15',0,2,NULL,NULL),(1105,NULL,1,1,'2020-03-17 01:27:15','2020-03-17 01:27:15',0,3,NULL,NULL),(1106,NULL,1,1,'2020-03-17 01:27:15','2020-03-17 01:27:15',0,4,NULL,NULL),(1107,NULL,1,1,'2020-03-17 01:27:15','2020-03-17 01:27:15',0,5,NULL,NULL),(1108,NULL,1,1,'2020-03-17 01:27:15','2020-03-17 01:27:15',0,6,NULL,NULL),(1109,NULL,1,1,'2020-03-17 01:27:15','2020-03-17 01:27:15',0,7,NULL,NULL),(1110,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,14,NULL,NULL),(1111,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,15,NULL,NULL),(1112,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,16,NULL,NULL),(1113,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,17,NULL,NULL),(1114,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,19,NULL,NULL),(1115,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,21,NULL,NULL),(1116,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,23,NULL,NULL),(1117,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,9,NULL,NULL),(1118,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,25,NULL,NULL),(1119,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,12,NULL,NULL),(1120,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,27,NULL,NULL),(1121,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,13,NULL,NULL),(1122,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,10,NULL,NULL),(1123,NULL,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19',0,11,NULL,NULL),(1124,'deleted',-1,4,'2020-03-17 01:28:53','2020-03-17 01:29:07',-1,NULL,NULL,NULL),(1125,NULL,1,1,'2020-03-17 01:28:57','2020-03-17 01:28:57',0,1,NULL,NULL),(1126,NULL,1,1,'2020-03-17 01:28:57','2020-03-17 01:28:57',0,2,NULL,NULL),(1127,NULL,1,1,'2020-03-17 01:28:57','2020-03-17 01:28:57',0,3,NULL,NULL),(1128,NULL,1,1,'2020-03-17 01:28:57','2020-03-17 01:28:57',0,4,NULL,NULL),(1129,NULL,1,1,'2020-03-17 01:28:57','2020-03-17 01:28:57',0,5,NULL,NULL),(1130,NULL,1,1,'2020-03-17 01:28:57','2020-03-17 01:28:57',0,6,NULL,NULL),(1131,NULL,1,1,'2020-03-17 01:28:57','2020-03-17 01:28:57',0,7,NULL,NULL),(1132,'Freezer',-1,4,'2020-03-17 01:29:54','2020-03-17 01:31:08',-1,NULL,NULL,NULL),(1133,NULL,1,1,'2020-03-17 01:30:38','2020-03-17 01:30:38',0,1,NULL,NULL),(1134,NULL,1,1,'2020-03-17 01:30:38','2020-03-17 01:30:38',0,2,NULL,NULL),(1135,NULL,1,1,'2020-03-17 01:30:38','2020-03-17 01:30:38',0,3,NULL,NULL),(1136,NULL,1,1,'2020-03-17 01:30:38','2020-03-17 01:30:38',0,4,NULL,NULL),(1137,NULL,1,1,'2020-03-17 01:30:38','2020-03-17 01:30:38',0,5,NULL,NULL),(1138,NULL,1,1,'2020-03-17 01:30:38','2020-03-17 01:30:38',0,6,NULL,NULL),(1139,NULL,1,1,'2020-03-17 01:30:38','2020-03-17 01:30:38',0,7,NULL,NULL),(1140,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,14,NULL,NULL),(1141,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,15,NULL,NULL),(1142,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,16,NULL,NULL),(1143,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,17,NULL,NULL),(1144,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,19,NULL,NULL),(1145,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,21,NULL,NULL),(1146,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,23,NULL,NULL),(1147,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,9,NULL,NULL),(1148,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,25,NULL,NULL),(1149,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,12,NULL,NULL),(1150,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,27,NULL,NULL),(1151,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,13,NULL,NULL),(1152,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,10,NULL,NULL),(1153,NULL,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52',0,11,NULL,NULL),(1154,'deleted',-1,4,'2020-03-17 01:45:42','2020-03-17 01:45:52',-1,NULL,NULL,NULL),(1155,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,9,NULL,NULL),(1156,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,12,NULL,NULL),(1157,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,13,NULL,NULL),(1158,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,10,NULL,NULL),(1159,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,11,NULL,NULL),(1160,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,14,NULL,NULL),(1161,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,15,NULL,NULL),(1162,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,16,NULL,NULL),(1163,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,17,NULL,NULL),(1164,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,19,NULL,NULL),(1165,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,21,NULL,NULL),(1166,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,23,NULL,NULL),(1167,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,25,NULL,NULL),(1168,NULL,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44',0,27,NULL,NULL),(1169,'Freezer',1,4,'2020-03-17 01:46:05','2020-03-17 01:46:46',0,NULL,NULL,NULL),(1170,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,9,NULL,NULL),(1171,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,12,NULL,NULL),(1172,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,13,NULL,NULL),(1173,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,10,NULL,NULL),(1174,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,11,NULL,NULL),(1175,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,14,NULL,NULL),(1176,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,15,NULL,NULL),(1177,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,16,NULL,NULL),(1178,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,17,NULL,NULL),(1179,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,19,NULL,NULL),(1180,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,21,NULL,NULL),(1181,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,23,NULL,NULL),(1182,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,25,NULL,NULL),(1183,NULL,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30',0,27,NULL,NULL),(1184,NULL,1,1,'2020-03-17 01:46:35','2020-03-17 01:46:35',0,1,NULL,NULL),(1185,NULL,1,1,'2020-03-17 01:46:35','2020-03-17 01:46:35',0,2,NULL,NULL),(1186,NULL,1,1,'2020-03-17 01:46:35','2020-03-17 01:46:35',0,3,NULL,NULL),(1187,NULL,1,1,'2020-03-17 01:46:35','2020-03-17 01:46:35',0,4,NULL,NULL),(1188,NULL,1,1,'2020-03-17 01:46:35','2020-03-17 01:46:35',0,5,NULL,NULL),(1189,NULL,1,1,'2020-03-17 01:46:35','2020-03-17 01:46:35',0,6,NULL,NULL),(1190,NULL,1,1,'2020-03-17 01:46:35','2020-03-17 01:46:35',0,7,NULL,NULL),(1191,'deleted',-1,4,'2020-03-17 01:47:50','2020-03-17 01:48:10',-1,NULL,NULL,NULL),(1192,NULL,1,1,'2020-03-17 01:47:52','2020-03-17 01:47:52',0,1,NULL,NULL),(1193,NULL,1,1,'2020-03-17 01:47:52','2020-03-17 01:47:52',0,2,NULL,NULL),(1194,NULL,1,1,'2020-03-17 01:47:52','2020-03-17 01:47:52',0,3,NULL,NULL),(1195,NULL,1,1,'2020-03-17 01:47:52','2020-03-17 01:47:52',0,4,NULL,NULL),(1196,NULL,1,1,'2020-03-17 01:47:52','2020-03-17 01:47:52',0,5,NULL,NULL),(1197,NULL,1,1,'2020-03-17 01:47:52','2020-03-17 01:47:52',0,6,NULL,NULL),(1198,NULL,1,1,'2020-03-17 01:47:52','2020-03-17 01:47:52',0,7,NULL,NULL),(1199,'deleted',-1,4,'2020-03-17 01:50:41','2020-03-17 01:51:10',-1,NULL,NULL,NULL),(1200,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,9,NULL,NULL),(1201,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,25,NULL,NULL),(1202,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,12,NULL,NULL),(1203,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,27,NULL,NULL),(1204,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,13,NULL,NULL),(1205,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,10,NULL,NULL),(1206,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,11,NULL,NULL),(1207,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,14,NULL,NULL),(1208,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,15,NULL,NULL),(1209,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,16,NULL,NULL),(1210,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,17,NULL,NULL),(1211,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,19,NULL,NULL),(1212,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,21,NULL,NULL),(1213,NULL,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01',0,23,NULL,NULL),(1214,'Freezer',-1,4,'2020-03-17 01:51:28','2020-03-17 01:51:49',-1,NULL,NULL,NULL),(1215,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,9,NULL,NULL),(1216,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,25,NULL,NULL),(1217,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,12,NULL,NULL),(1218,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,27,NULL,NULL),(1219,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,13,NULL,NULL),(1220,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,10,NULL,NULL),(1221,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,11,NULL,NULL),(1222,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,14,NULL,NULL),(1223,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,15,NULL,NULL),(1224,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,16,NULL,NULL),(1225,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,17,NULL,NULL),(1226,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,19,NULL,NULL),(1227,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,21,NULL,NULL),(1228,NULL,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37',0,23,NULL,NULL),(1229,NULL,1,1,'2020-03-17 01:51:41','2020-03-17 01:51:41',0,1,NULL,NULL),(1230,NULL,1,1,'2020-03-17 01:51:41','2020-03-17 01:51:41',0,2,NULL,NULL),(1231,NULL,1,1,'2020-03-17 01:51:41','2020-03-17 01:51:41',0,3,NULL,NULL),(1232,NULL,1,1,'2020-03-17 01:51:41','2020-03-17 01:51:41',0,4,NULL,NULL),(1233,NULL,1,1,'2020-03-17 01:51:41','2020-03-17 01:51:41',0,5,NULL,NULL),(1234,NULL,1,1,'2020-03-17 01:51:41','2020-03-17 01:51:41',0,6,NULL,NULL),(1235,NULL,1,1,'2020-03-17 01:51:41','2020-03-17 01:51:41',0,7,NULL,NULL),(1236,'Freezer',-1,4,'2020-03-17 01:53:33','2020-03-17 01:53:43',-1,NULL,NULL,NULL),(1237,NULL,1,1,'2020-03-17 01:53:36','2020-03-17 01:53:36',0,1,NULL,NULL),(1238,NULL,1,1,'2020-03-17 01:53:36','2020-03-17 01:53:36',0,2,NULL,NULL),(1239,NULL,1,1,'2020-03-17 01:53:36','2020-03-17 01:53:36',0,3,NULL,NULL),(1240,NULL,1,1,'2020-03-17 01:53:36','2020-03-17 01:53:36',0,4,NULL,NULL),(1241,NULL,1,1,'2020-03-17 01:53:36','2020-03-17 01:53:36',0,5,NULL,NULL),(1242,NULL,1,1,'2020-03-17 01:53:36','2020-03-17 01:53:36',0,6,NULL,NULL),(1243,NULL,1,1,'2020-03-17 01:53:36','2020-03-17 01:53:36',0,7,NULL,NULL),(1244,'deleted',-1,4,'2020-03-17 01:53:52','2020-03-17 01:54:02',-1,NULL,NULL,NULL),(1245,NULL,1,1,'2020-03-17 01:53:54','2020-03-17 01:53:54',0,1,NULL,NULL),(1246,NULL,1,1,'2020-03-17 01:53:54','2020-03-17 01:53:54',0,2,NULL,NULL),(1247,NULL,1,1,'2020-03-17 01:53:54','2020-03-17 01:53:54',0,3,NULL,NULL),(1248,NULL,1,1,'2020-03-17 01:53:54','2020-03-17 01:53:54',0,4,NULL,NULL),(1249,NULL,1,1,'2020-03-17 01:53:54','2020-03-17 01:53:54',0,5,NULL,NULL),(1250,NULL,1,1,'2020-03-17 01:53:54','2020-03-17 01:53:54',0,6,NULL,NULL),(1251,NULL,1,1,'2020-03-17 01:53:54','2020-03-17 01:53:54',0,7,NULL,NULL),(1252,'Freezer',1,4,'2020-03-17 01:56:22','2020-03-17 01:56:32',0,NULL,NULL,NULL),(1253,NULL,1,1,'2020-03-17 01:56:25','2020-03-17 01:56:25',0,1,NULL,NULL),(1254,NULL,1,1,'2020-03-17 01:56:25','2020-03-17 01:56:25',0,2,NULL,NULL),(1255,NULL,1,1,'2020-03-17 01:56:25','2020-03-17 01:56:25',0,3,NULL,NULL),(1256,NULL,1,1,'2020-03-17 01:56:25','2020-03-17 01:56:25',0,4,NULL,NULL),(1257,NULL,1,1,'2020-03-17 01:56:25','2020-03-17 01:56:25',0,5,NULL,NULL),(1258,NULL,1,1,'2020-03-17 01:56:25','2020-03-17 01:56:25',0,6,NULL,NULL),(1259,NULL,1,1,'2020-03-17 01:56:25','2020-03-17 01:56:25',0,7,NULL,NULL),(1260,'Freezer',1,4,'2020-03-17 01:57:41','2020-03-17 01:57:49',0,NULL,NULL,NULL),(1261,NULL,1,1,'2020-03-17 01:57:43','2020-03-17 01:57:43',0,9,NULL,NULL),(1262,NULL,1,1,'2020-03-17 01:57:43','2020-03-17 01:57:43',0,12,NULL,NULL),(1263,NULL,1,1,'2020-03-17 01:57:43','2020-03-17 01:57:43',0,13,NULL,NULL),(1264,NULL,1,1,'2020-03-17 01:57:43','2020-03-17 01:57:43',0,10,NULL,NULL),(1265,NULL,1,1,'2020-03-17 01:57:43','2020-03-17 01:57:43',0,11,NULL,NULL),(1266,NULL,1,1,'2020-03-17 01:57:43','2020-03-17 01:57:43',0,14,NULL,NULL),(1267,NULL,1,1,'2020-03-17 01:57:43','2020-03-17 01:57:44',0,15,NULL,NULL),(1268,NULL,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44',0,16,NULL,NULL),(1269,NULL,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44',0,17,NULL,NULL),(1270,NULL,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44',0,19,NULL,NULL),(1271,NULL,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44',0,21,NULL,NULL),(1272,NULL,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44',0,23,NULL,NULL),(1273,NULL,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44',0,25,NULL,NULL),(1274,NULL,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44',0,27,NULL,NULL),(1275,'deleted',-1,4,'2020-03-17 01:58:49','2020-03-17 01:59:07',-1,NULL,NULL,NULL),(1276,NULL,1,1,'2020-03-17 01:58:52','2020-03-17 01:58:52',0,1,NULL,NULL),(1277,NULL,1,1,'2020-03-17 01:58:52','2020-03-17 01:58:52',0,2,NULL,NULL),(1278,NULL,1,1,'2020-03-17 01:58:52','2020-03-17 01:58:52',0,3,NULL,NULL),(1279,NULL,1,1,'2020-03-17 01:58:52','2020-03-17 01:58:52',0,4,NULL,NULL),(1280,NULL,1,1,'2020-03-17 01:58:52','2020-03-17 01:58:52',0,5,NULL,NULL),(1281,NULL,1,1,'2020-03-17 01:58:52','2020-03-17 01:58:52',0,6,NULL,NULL),(1282,NULL,1,1,'2020-03-17 01:58:52','2020-03-17 01:58:52',0,7,NULL,NULL),(1283,'deleted',-1,4,'2020-03-17 01:59:33','2020-03-17 01:59:43',-1,NULL,NULL,NULL),(1284,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,9,NULL,NULL),(1285,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,25,NULL,NULL),(1286,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,12,NULL,NULL),(1287,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,27,NULL,NULL),(1288,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,13,NULL,NULL),(1289,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,10,NULL,NULL),(1290,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,11,NULL,NULL),(1291,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,14,NULL,NULL),(1292,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,15,NULL,NULL),(1293,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,16,NULL,NULL),(1294,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,17,NULL,NULL),(1295,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,19,NULL,NULL),(1296,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,21,NULL,NULL),(1297,NULL,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36',0,23,NULL,NULL),(1298,'Freezer',-1,4,'2020-03-17 01:59:50','2020-03-17 02:00:06',-1,NULL,NULL,NULL),(1299,NULL,1,1,'2020-03-17 01:59:55','2020-03-17 01:59:55',0,1,NULL,NULL),(1300,NULL,1,1,'2020-03-17 01:59:55','2020-03-17 01:59:55',0,2,NULL,NULL),(1301,NULL,1,1,'2020-03-17 01:59:55','2020-03-17 01:59:55',0,3,NULL,NULL),(1302,NULL,1,1,'2020-03-17 01:59:55','2020-03-17 01:59:55',0,4,NULL,NULL),(1303,NULL,1,1,'2020-03-17 01:59:55','2020-03-17 01:59:55',0,5,NULL,NULL),(1304,NULL,1,1,'2020-03-17 01:59:55','2020-03-17 01:59:55',0,6,NULL,NULL),(1305,NULL,1,1,'2020-03-17 01:59:55','2020-03-17 01:59:55',0,7,NULL,NULL),(1306,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,9,NULL,NULL),(1307,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,25,NULL,NULL),(1308,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,12,NULL,NULL),(1309,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,27,NULL,NULL),(1310,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,13,NULL,NULL),(1311,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,10,NULL,NULL),(1312,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,11,NULL,NULL),(1313,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,14,NULL,NULL),(1314,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,15,NULL,NULL),(1315,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,16,NULL,NULL),(1316,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,17,NULL,NULL),(1317,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,19,NULL,NULL),(1318,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,21,NULL,NULL),(1319,NULL,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58',0,23,NULL,NULL);
/*!40000 ALTER TABLE `items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `job_associations`
--

DROP TABLE IF EXISTS `job_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `job_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `job_id` int(11) DEFAULT NULL,
  `operation_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=224 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `job_associations`
--

LOCK TABLES `job_associations` WRITE;
/*!40000 ALTER TABLE `job_associations` DISABLE KEYS */;
INSERT INTO `job_associations` VALUES (1,1,1,'2020-03-11 16:30:28','2020-03-11 16:30:28'),(2,2,1,'2020-03-11 16:32:10','2020-03-11 16:32:10'),(3,3,1,'2020-03-11 17:23:56','2020-03-11 17:23:56'),(4,4,1,'2020-03-11 17:26:42','2020-03-11 17:26:42'),(5,5,1,'2020-03-11 17:27:49','2020-03-11 17:27:49'),(6,6,1,'2020-03-11 17:29:57','2020-03-11 17:29:57'),(7,7,1,'2020-03-11 17:30:53','2020-03-11 17:30:53'),(8,8,1,'2020-03-11 17:32:12','2020-03-11 17:32:12'),(9,9,1,'2020-03-11 17:35:29','2020-03-11 17:35:29'),(10,10,2,'2020-03-11 17:35:58','2020-03-11 17:35:58'),(11,11,2,'2020-03-11 17:36:55','2020-03-11 17:36:55'),(12,12,1,'2020-03-11 17:37:15','2020-03-11 17:37:15'),(13,12,2,'2020-03-11 17:37:15','2020-03-11 17:37:15'),(14,13,1,'2020-03-11 17:48:03','2020-03-11 17:48:03'),(15,14,1,'2020-03-11 20:48:04','2020-03-11 20:48:04'),(16,15,1,'2020-03-11 20:49:37','2020-03-11 20:49:37'),(17,16,3,'2020-03-11 21:07:19','2020-03-11 21:07:19'),(18,17,1,'2020-03-11 21:08:20','2020-03-11 21:08:20'),(19,17,3,'2020-03-11 21:08:20','2020-03-11 21:08:20'),(20,18,1,'2020-03-11 21:12:14','2020-03-11 21:12:14'),(21,19,1,'2020-03-11 21:25:31','2020-03-11 21:25:31'),(22,20,1,'2020-03-11 21:31:16','2020-03-11 21:31:16'),(23,20,2,'2020-03-11 21:31:16','2020-03-11 21:31:16'),(24,20,3,'2020-03-11 21:31:16','2020-03-11 21:31:16'),(25,21,1,'2020-03-11 21:32:30','2020-03-11 21:32:30'),(26,22,1,'2020-03-11 21:53:43','2020-03-11 21:53:43'),(27,23,1,'2020-03-11 21:56:30','2020-03-11 21:56:30'),(28,24,2,'2020-03-11 22:00:00','2020-03-11 22:00:00'),(29,25,3,'2020-03-11 22:00:25','2020-03-11 22:00:25'),(30,26,1,'2020-03-11 22:00:55','2020-03-11 22:00:55'),(31,26,2,'2020-03-11 22:00:55','2020-03-11 22:00:55'),(32,26,3,'2020-03-11 22:00:55','2020-03-11 22:00:55'),(33,27,1,'2020-03-11 22:06:38','2020-03-11 22:06:38'),(34,28,1,'2020-03-11 22:09:25','2020-03-11 22:09:25'),(35,29,1,'2020-03-11 22:10:49','2020-03-11 22:10:49'),(36,30,1,'2020-03-11 22:11:47','2020-03-11 22:11:47'),(37,31,4,'2020-03-12 22:21:34','2020-03-12 22:21:34'),(38,32,4,'2020-03-12 22:26:56','2020-03-12 22:26:56'),(39,33,4,'2020-03-12 22:28:09','2020-03-12 22:28:09'),(40,34,4,'2020-03-12 22:28:52','2020-03-12 22:28:52'),(46,40,4,'2020-03-12 22:32:12','2020-03-12 22:32:12'),(47,41,4,'2020-03-12 22:33:03','2020-03-12 22:33:03'),(48,42,4,'2020-03-12 22:34:10','2020-03-12 22:34:10'),(49,43,11,'2020-03-12 22:36:45','2020-03-12 22:36:45'),(50,44,11,'2020-03-12 22:37:17','2020-03-12 22:37:17'),(51,45,11,'2020-03-12 22:38:21','2020-03-12 22:38:21'),(52,46,11,'2020-03-12 22:45:14','2020-03-12 22:45:14'),(53,47,11,'2020-03-12 22:45:33','2020-03-12 22:45:33'),(54,48,11,'2020-03-12 22:45:53','2020-03-12 22:45:53'),(55,49,11,'2020-03-12 22:55:24','2020-03-12 22:55:24'),(56,50,11,'2020-03-12 22:56:03','2020-03-12 22:56:03'),(57,51,11,'2020-03-12 22:56:29','2020-03-12 22:56:29'),(58,52,12,'2020-03-12 22:57:44','2020-03-12 22:57:44'),(59,53,13,'2020-03-12 23:00:30','2020-03-12 23:00:30'),(60,53,14,'2020-03-12 23:00:30','2020-03-12 23:00:30'),(61,54,13,'2020-03-12 23:16:45','2020-03-12 23:16:45'),(62,55,13,'2020-03-13 15:36:43','2020-03-13 15:36:43'),(63,56,13,'2020-03-13 15:37:53','2020-03-13 15:37:53'),(64,57,13,'2020-03-13 15:39:10','2020-03-13 15:39:10'),(65,58,13,'2020-03-13 15:40:10','2020-03-13 15:40:10'),(66,59,13,'2020-03-13 15:41:28','2020-03-13 15:41:28'),(67,60,13,'2020-03-13 15:42:17','2020-03-13 15:42:17'),(68,61,13,'2020-03-13 15:43:30','2020-03-13 15:43:30'),(69,62,13,'2020-03-13 17:39:15','2020-03-13 17:39:15'),(70,63,13,'2020-03-13 17:42:40','2020-03-13 17:42:40'),(71,64,13,'2020-03-13 17:48:04','2020-03-13 17:48:04'),(72,65,13,'2020-03-13 18:04:09','2020-03-13 18:04:09'),(73,66,13,'2020-03-13 18:04:58','2020-03-13 18:04:58'),(74,67,13,'2020-03-13 18:07:44','2020-03-13 18:07:44'),(75,68,13,'2020-03-13 18:10:39','2020-03-13 18:10:39'),(76,69,13,'2020-03-13 18:11:39','2020-03-13 18:11:39'),(77,70,13,'2020-03-13 18:11:57','2020-03-13 18:11:57'),(78,71,13,'2020-03-13 18:13:49','2020-03-13 18:13:49'),(79,72,13,'2020-03-13 18:15:54','2020-03-13 18:15:54'),(80,73,4,'2020-03-13 18:16:35','2020-03-13 18:16:35'),(81,74,11,'2020-03-13 18:20:29','2020-03-13 18:20:29'),(82,74,12,'2020-03-13 18:20:29','2020-03-13 18:20:29'),(83,74,13,'2020-03-13 18:20:29','2020-03-13 18:20:29'),(84,74,14,'2020-03-13 18:20:29','2020-03-13 18:20:29'),(85,75,4,'2020-03-13 18:21:50','2020-03-13 18:21:50'),(86,76,11,'2020-03-13 18:22:25','2020-03-13 18:22:25'),(87,77,12,'2020-03-13 18:23:46','2020-03-13 18:23:46'),(88,78,13,'2020-03-13 18:25:36','2020-03-13 18:25:36'),(89,79,14,'2020-03-13 18:26:50','2020-03-13 18:26:50'),(90,80,4,'2020-03-13 18:27:26','2020-03-13 18:27:26'),(91,81,11,'2020-03-13 18:28:43','2020-03-13 18:28:43'),(92,82,12,'2020-03-13 18:29:22','2020-03-13 18:29:22'),(93,83,13,'2020-03-13 18:30:00','2020-03-13 18:30:00'),(94,84,14,'2020-03-13 18:47:07','2020-03-13 18:47:07'),(95,85,4,'2020-03-13 18:48:52','2020-03-13 18:48:52'),(96,86,11,'2020-03-13 18:52:14','2020-03-13 18:52:14'),(97,87,12,'2020-03-13 18:58:07','2020-03-13 18:58:07'),(98,88,12,'2020-03-13 18:59:46','2020-03-13 18:59:46'),(99,89,14,'2020-03-13 19:10:36','2020-03-13 19:10:36'),(100,90,12,'2020-03-13 19:11:39','2020-03-13 19:11:39'),(101,91,12,'2020-03-13 19:13:08','2020-03-13 19:13:08'),(102,92,12,'2020-03-13 19:17:51','2020-03-13 19:17:51'),(103,93,12,'2020-03-13 19:18:53','2020-03-13 19:18:53'),(104,94,11,'2020-03-13 19:20:53','2020-03-13 19:20:53'),(105,95,11,'2020-03-13 19:22:12','2020-03-13 19:22:12'),(106,96,11,'2020-03-13 19:23:22','2020-03-13 19:23:22'),(107,97,12,'2020-03-13 19:23:44','2020-03-13 19:23:44'),(108,98,11,'2020-03-13 19:24:27','2020-03-13 19:24:27'),(109,98,13,'2020-03-13 19:24:27','2020-03-13 19:24:27'),(110,99,1,'2020-03-13 19:32:43','2020-03-13 19:32:43'),(111,100,11,'2020-03-13 19:34:44','2020-03-13 19:34:44'),(112,101,11,'2020-03-13 19:45:26','2020-03-13 19:45:26'),(113,102,1,'2020-03-13 19:46:49','2020-03-13 19:46:49'),(114,103,1,'2020-03-13 19:49:39','2020-03-13 19:49:39'),(115,104,11,'2020-03-13 19:50:12','2020-03-13 19:50:12'),(116,105,1,'2020-03-13 19:50:42','2020-03-13 19:50:42'),(117,106,1,'2020-03-13 20:04:04','2020-03-13 20:04:04'),(118,107,11,'2020-03-13 20:17:56','2020-03-13 20:17:56'),(119,108,11,'2020-03-13 20:18:27','2020-03-13 20:18:27'),(120,109,11,'2020-03-13 20:20:20','2020-03-13 20:20:20'),(121,110,11,'2020-03-13 20:21:05','2020-03-13 20:21:05'),(122,111,18,'2020-03-13 20:33:38','2020-03-13 20:33:38'),(123,112,16,'2020-03-13 20:33:58','2020-03-13 20:33:58'),(124,113,17,'2020-03-13 20:34:18','2020-03-13 20:34:18'),(125,114,17,'2020-03-13 20:35:16','2020-03-13 20:35:16'),(126,115,21,'2020-03-13 20:39:29','2020-03-13 20:39:29'),(127,116,24,'2020-03-13 20:39:46','2020-03-13 20:39:46'),(128,117,22,'2020-03-13 20:40:19','2020-03-13 20:40:19'),(129,118,25,'2020-03-13 20:40:45','2020-03-13 20:40:45'),(130,119,29,'2020-03-13 21:45:58','2020-03-13 21:45:58'),(131,120,28,'2020-03-13 21:46:16','2020-03-13 21:46:16'),(132,121,26,'2020-03-13 21:46:35','2020-03-13 21:46:35'),(133,122,27,'2020-03-13 21:46:56','2020-03-13 21:46:56'),(134,123,27,'2020-03-13 21:48:06','2020-03-13 21:48:06'),(135,124,27,'2020-03-13 21:48:41','2020-03-13 21:48:41'),(136,125,27,'2020-03-13 21:51:35','2020-03-13 21:51:35'),(137,125,30,'2020-03-13 21:51:35','2020-03-13 21:51:35'),(138,126,32,'2020-03-13 21:53:03','2020-03-13 21:53:03'),(139,126,38,'2020-03-13 21:53:03','2020-03-13 21:53:03'),(140,127,31,'2020-03-13 21:53:37','2020-03-13 21:53:37'),(141,128,37,'2020-03-13 21:53:55','2020-03-13 21:53:55'),(142,129,33,'2020-03-13 21:54:17','2020-03-13 21:54:17'),(143,129,35,'2020-03-13 21:54:17','2020-03-13 21:54:17'),(144,130,34,'2020-03-13 21:54:49','2020-03-13 21:54:49'),(145,130,36,'2020-03-13 21:54:49','2020-03-13 21:54:49'),(146,131,34,'2020-03-13 21:56:58','2020-03-13 21:56:58'),(147,131,36,'2020-03-13 21:56:58','2020-03-13 21:56:58'),(148,132,34,'2020-03-13 21:58:20','2020-03-13 21:58:20'),(149,132,36,'2020-03-13 21:58:20','2020-03-13 21:58:20'),(150,133,42,'2020-03-13 21:59:18','2020-03-13 21:59:18'),(151,134,44,'2020-03-13 21:59:49','2020-03-13 21:59:49'),(152,135,41,'2020-03-13 22:00:07','2020-03-13 22:00:07'),(153,136,43,'2020-03-13 22:00:28','2020-03-13 22:00:28'),(154,137,39,'2020-03-13 22:00:49','2020-03-13 22:00:49'),(155,138,45,'2020-03-13 22:01:19','2020-03-13 22:01:19'),(156,139,40,'2020-03-13 22:02:00','2020-03-13 22:02:00'),(157,139,46,'2020-03-13 22:02:00','2020-03-13 22:02:00'),(158,140,40,'2020-03-13 22:03:40','2020-03-13 22:03:40'),(159,140,46,'2020-03-13 22:03:40','2020-03-13 22:03:40'),(160,141,40,'2020-03-13 22:05:32','2020-03-13 22:05:32'),(161,141,46,'2020-03-13 22:05:32','2020-03-13 22:05:32'),(162,142,40,'2020-03-13 22:06:16','2020-03-13 22:06:16'),(163,142,46,'2020-03-13 22:06:16','2020-03-13 22:06:16'),(164,143,47,'2020-03-17 00:47:46','2020-03-17 00:47:46'),(165,143,55,'2020-03-17 00:47:46','2020-03-17 00:47:46'),(166,144,49,'2020-03-17 00:48:34','2020-03-17 00:48:34'),(167,144,54,'2020-03-17 00:48:34','2020-03-17 00:48:34'),(168,145,51,'2020-03-17 00:52:14','2020-03-17 00:52:14'),(169,145,52,'2020-03-17 00:52:14','2020-03-17 00:52:14'),(170,146,50,'2020-03-17 00:53:00','2020-03-17 00:53:00'),(171,147,51,'2020-03-17 00:53:38','2020-03-17 00:53:38'),(172,147,52,'2020-03-17 00:53:38','2020-03-17 00:53:38'),(173,148,53,'2020-03-17 00:54:19','2020-03-17 00:54:19'),(174,149,51,'2020-03-17 00:57:13','2020-03-17 00:57:13'),(175,149,52,'2020-03-17 00:57:13','2020-03-17 00:57:13'),(176,150,51,'2020-03-17 01:05:25','2020-03-17 01:05:25'),(177,150,52,'2020-03-17 01:05:25','2020-03-17 01:05:25'),(178,151,51,'2020-03-17 01:06:20','2020-03-17 01:06:20'),(179,151,52,'2020-03-17 01:06:20','2020-03-17 01:06:20'),(180,152,27,'2020-03-17 01:17:15','2020-03-17 01:17:15'),(181,152,30,'2020-03-17 01:17:15','2020-03-17 01:17:15'),(182,153,51,'2020-03-17 01:17:50','2020-03-17 01:17:50'),(183,153,52,'2020-03-17 01:17:50','2020-03-17 01:17:50'),(184,154,59,'2020-03-17 01:21:48','2020-03-17 01:21:48'),(185,155,58,'2020-03-17 01:22:22','2020-03-17 01:22:22'),(186,155,62,'2020-03-17 01:22:22','2020-03-17 01:22:22'),(187,156,58,'2020-03-17 01:24:14','2020-03-17 01:24:14'),(188,156,65,'2020-03-17 01:24:14','2020-03-17 01:24:14'),(189,157,63,'2020-03-17 01:25:53','2020-03-17 01:25:53'),(190,157,64,'2020-03-17 01:25:53','2020-03-17 01:25:53'),(191,158,62,'2020-03-17 01:26:30','2020-03-17 01:26:30'),(192,159,57,'2020-03-17 01:26:52','2020-03-17 01:26:52'),(193,159,66,'2020-03-17 01:26:52','2020-03-17 01:26:52'),(194,160,60,'2020-03-17 01:28:04','2020-03-17 01:28:04'),(195,160,67,'2020-03-17 01:28:04','2020-03-17 01:28:04'),(196,161,61,'2020-03-17 01:28:43','2020-03-17 01:28:43'),(197,162,60,'2020-03-17 01:29:41','2020-03-17 01:29:41'),(198,162,67,'2020-03-17 01:29:41','2020-03-17 01:29:41'),(199,163,56,'2020-03-17 01:39:21','2020-03-17 01:39:21'),(200,163,60,'2020-03-17 01:39:21','2020-03-17 01:39:21'),(201,164,68,'2020-03-17 01:45:38','2020-03-17 01:45:38'),(202,165,69,'2020-03-17 01:46:00','2020-03-17 01:46:00'),(203,165,74,'2020-03-17 01:46:00','2020-03-17 01:46:00'),(204,166,75,'2020-03-17 01:47:48','2020-03-17 01:47:48'),(205,167,71,'2020-03-17 01:49:28','2020-03-17 01:49:28'),(206,167,72,'2020-03-17 01:49:28','2020-03-17 01:49:28'),(207,168,70,'2020-03-17 01:50:26','2020-03-17 01:50:26'),(208,169,71,'2020-03-17 01:51:26','2020-03-17 01:51:26'),(209,169,72,'2020-03-17 01:51:26','2020-03-17 01:51:26'),(210,170,72,'2020-03-17 01:53:30','2020-03-17 01:53:30'),(211,171,73,'2020-03-17 01:53:50','2020-03-17 01:53:50'),(212,172,78,'2020-03-17 01:56:20','2020-03-17 01:56:20'),(213,173,76,'2020-03-17 01:56:42','2020-03-17 01:56:42'),(214,174,76,'2020-03-17 01:57:02','2020-03-17 01:57:02'),(215,175,81,'2020-03-17 01:57:37','2020-03-17 01:57:37'),(216,176,76,'2020-03-17 01:58:28','2020-03-17 01:58:28'),(217,176,83,'2020-03-17 01:58:28','2020-03-17 01:58:28'),(218,177,77,'2020-03-17 01:58:48','2020-03-17 01:58:48'),(219,178,76,'2020-03-17 01:59:14','2020-03-17 01:59:14'),(220,178,83,'2020-03-17 01:59:14','2020-03-17 01:59:14'),(221,179,82,'2020-03-17 01:59:31','2020-03-17 01:59:31'),(222,180,76,'2020-03-17 01:59:48','2020-03-17 01:59:48'),(223,180,83,'2020-03-17 01:59:48','2020-03-17 01:59:48');
/*!40000 ALTER TABLE `job_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `jobs`
--

DROP TABLE IF EXISTS `jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `jobs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `arguments` text COLLATE utf8_unicode_ci,
  `state` longtext COLLATE utf8_unicode_ci,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `path` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `pc` int(11) DEFAULT NULL,
  `group_id` int(11) DEFAULT NULL,
  `submitted_by` int(11) DEFAULT NULL,
  `desired_start_time` datetime DEFAULT NULL,
  `latest_start_time` datetime DEFAULT NULL,
  `metacol_id` int(11) DEFAULT NULL,
  `successor_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=181 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `jobs`
--

LOCK TABLES `jobs` WRITE;
/*!40000 ALTER TABLE `jobs` DISABLE KEYS */;
INSERT INTO `jobs` VALUES (1,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T09:30:28.931-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T09:30:42.162-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583944242.154}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:11) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(11)\'>11</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T09:30:52.995-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583944252.98}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T09:30:39.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 16:30:28','2020-03-11 16:30:53','operation.rb',-2,235,1,'2020-03-11 16:30:28','2020-03-11 17:30:28',NULL,NULL),(2,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T09:32:10.444-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T09:32:14.208-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583944334.202}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:20) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(20)\'>20</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T09:32:21.255-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583944341.248}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T09:32:12.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 16:32:10','2020-03-11 16:32:21','operation.rb',-2,235,1,'2020-03-11 16:32:10','2020-03-11 17:32:10',NULL,NULL),(3,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:23:56.719-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:26:00.542-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947560.512}},{\"operation\":\"error\",\"message\":\"undefined method `get_sample_well_location\' for #<ExecutionNamespaceB065MizDi33Vhq4kYhXrwI0LWFTfuq9LNg1dHtvEMk::Protocol:0x0000559c9e949770>\\nDid you mean?  get_alpha_num_location\",\"backtrace\":[\"Collection_Management/CollectionTransfer:22:in `block in transfer_to_working_plate\'\",\"Collection_Management/CollectionTransfer:20:in `each\'\",\"Collection_Management/CollectionTransfer:20:in `transfer_to_working_plate\'\",\"Collection_Management/CollectionTransfer:61:in `block in transfer_from_array_collections\'\",\"Collection_Management/CollectionTransfer:59:in `each\'\",\"Collection_Management/CollectionTransfer:59:in `transfer_from_array_collections\'\",\"(eval):50:in `block in main\'\",\"(eval):43:in `each\'\",\"(eval):43:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:26:00.692-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-11 17:23:56','2020-03-11 17:26:00','operation.rb',-2,235,1,'2020-03-11 17:23:56','2020-03-11 18:23:56',NULL,NULL),(4,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:26:42.112-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:26:46.428-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947606.391}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:38) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(38)\'>38</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:26:51.664-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947611.654}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T10:26:44.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:26:42','2020-03-11 17:26:51','operation.rb',-2,235,1,'2020-03-11 17:26:42','2020-03-11 18:26:42',NULL,NULL),(5,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:27:49.133-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:27:53.557-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947673.544}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:48) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(48)\'>48</a>):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:28:12.537-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947692.504}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T10:27:51.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:27:49','2020-03-11 17:28:12','operation.rb',-2,235,1,'2020-03-11 17:27:49','2020-03-11 18:27:49',NULL,NULL),(6,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:29:57.832-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:30:02.351-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947802.329}},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Array)</span>\"},{\"table\":[[0,0],[0,1]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:30:09.894-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947809.863}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:57) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(57)\'>57</a>):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:30:43.430-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947843.395}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T10:30:00.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:29:57','2020-03-11 17:30:43','operation.rb',-2,235,1,'2020-03-11 17:29:57','2020-03-11 18:29:57',NULL,NULL),(7,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:30:53.621-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:30:58.082-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947858.065}},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Array)</span>\"},{\"table\":[[2,0]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:31:57.820-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947917.803}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:66) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(66)\'>66</a>):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:32:01.417-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947921.395}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T10:30:56.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:30:53','2020-03-11 17:32:01','operation.rb',-2,235,1,'2020-03-11 17:30:53','2020-03-11 18:30:53',NULL,NULL),(8,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:32:12.010-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:32:17.257-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947937.217}},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Array)</span>\"},{\"table\":[[2,0]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:32:19.235-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947939.227}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:75) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(75)\'>75</a>):\"},{\"table\":[[{\"content\":\"A1, A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:32:27.415-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583947947.397}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T10:32:15.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:32:12','2020-03-11 17:32:27','operation.rb',-2,235,1,'2020-03-11 17:32:12','2020-03-11 18:32:12',NULL,NULL),(9,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:35:29.453-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:35:34.713-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948134.687}},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Array)</span>\"},{\"table\":[[2,0]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:35:41.478-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948141.445}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:86) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(86)\'>86</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:35:53.473-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948153.461}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T10:35:32.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:35:29','2020-03-11 17:35:53','operation.rb',-2,235,1,'2020-03-11 17:35:29','2020-03-11 18:35:29',NULL,NULL),(10,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:35:58.871-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:36:02.964-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948162.94}},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Array)</span>\"},{\"table\":[[2,0]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:36:04.894-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948164.866}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:95) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(95)\'>95</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:36:35.325-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948195.298}},{\"operation\":\"complete\",\"rval\":[{\"id\":2,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T10:33:15.000-07:00\",\"updated_at\":\"2020-03-11T10:36:01.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:35:58','2020-03-11 17:36:35','operation.rb',-2,235,1,'2020-03-11 17:35:58','2020-03-11 18:35:58',NULL,NULL),(11,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:36:55.949-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:37:00.045-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948220.007}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:105) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(105)\'>105</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:37:05.152-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948225.103}},{\"operation\":\"complete\",\"rval\":[{\"id\":2,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T10:33:15.000-07:00\",\"updated_at\":\"2020-03-11T10:36:58.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:36:55','2020-03-11 17:37:05','operation.rb',-2,235,1,'2020-03-11 17:36:55','2020-03-11 18:36:55',NULL,NULL),(12,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:37:15.350-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:37:21.641-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948241.63}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:115) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(115)\'>115</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:37:25.251-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948245.235}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:115) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(115)\'>115</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:37:52.540-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948272.527}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T10:37:19.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0},{\"id\":2,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T10:33:15.000-07:00\",\"updated_at\":\"2020-03-11T10:37:19.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 17:37:15','2020-03-11 17:37:52','operation.rb',-2,235,1,'2020-03-11 17:37:15','2020-03-11 18:37:15',NULL,NULL),(13,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T10:48:03.308-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:48:08.708-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583948888.677}},{\"operation\":\"error\",\"message\":\"When the third argument to Collection.set is an item, it should be associated with a sample.\",\"backtrace\":[\"/aquarium/app/models/collection.rb:491:in `to_sample_id\'\",\"/aquarium/app/models/collection.rb:503:in `to_sample_id\'\",\"/aquarium/app/models/collection.rb:460:in `find\'\",\"Collection_Management/CollectionTransfer:21:in `block in transfer_to_working_plate\'\",\"Collection_Management/CollectionTransfer:20:in `each\'\",\"Collection_Management/CollectionTransfer:20:in `transfer_to_working_plate\'\",\"Collection_Management/CollectionTransfer:61:in `block in transfer_from_array_collections\'\",\"Collection_Management/CollectionTransfer:59:in `each\'\",\"Collection_Management/CollectionTransfer:59:in `transfer_from_array_collections\'\",\"(eval):50:in `block in main\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-11T10:48:08.854-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-11 17:48:03','2020-03-11 17:48:08','operation.rb',-2,235,1,'2020-03-11 17:48:03','2020-03-11 18:48:03',NULL,NULL),(14,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T13:48:04.755-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T13:48:09.409-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583959689.37}},{\"operation\":\"error\",\"message\":\"When the third argument to Collection.set is an item, it should be associated with a sample.\",\"backtrace\":[\"/aquarium/app/models/collection.rb:491:in `to_sample_id\'\",\"/aquarium/app/models/collection.rb:503:in `to_sample_id\'\",\"/aquarium/app/models/collection.rb:460:in `find\'\",\"Collection_Management/CollectionTransfer:21:in `block in transfer_to_working_plate\'\",\"Collection_Management/CollectionTransfer:20:in `each\'\",\"Collection_Management/CollectionTransfer:20:in `transfer_to_working_plate\'\",\"Collection_Management/CollectionTransfer:61:in `block in transfer_from_array_collections\'\",\"Collection_Management/CollectionTransfer:59:in `each\'\",\"Collection_Management/CollectionTransfer:59:in `transfer_from_array_collections\'\",\"(eval):50:in `block in main\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-11T13:48:09.561-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-11 20:48:04','2020-03-11 20:48:09','operation.rb',-2,235,1,'2020-03-11 20:48:04','2020-03-11 21:48:04',NULL,NULL),(15,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T13:49:37.434-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T13:49:44.604-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583959784.563}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:151) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(151)\'>151</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T13:49:48.401-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583959788.389}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T13:49:42.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 20:49:37','2020-03-11 20:49:48','operation.rb',-2,235,1,'2020-03-11 20:49:37','2020-03-11 21:49:37',NULL,NULL),(16,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:07:19.447-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:07:26.197-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583960846.177}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:198) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(198)\'>198</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:07:39.278-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583960859.24}},{\"operation\":\"complete\",\"rval\":[{\"id\":3,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T13:58:20.000-07:00\",\"updated_at\":\"2020-03-11T14:07:23.000-07:00\",\"x\":272.0,\"y\":64.0,\"parent_id\":0}]}]','2020-03-11 21:07:19','2020-03-11 21:07:39','operation.rb',-2,235,1,'2020-03-11 21:07:19','2020-03-11 22:07:19',NULL,NULL),(17,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:08:20.085-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:09:35.793-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583960975.759}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:214) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(214)\'>214</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:09:42.131-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583960982.09}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:214) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(214)\'>214</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:09:56.409-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583960996.386}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T14:08:45.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0},{\"id\":3,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T13:58:20.000-07:00\",\"updated_at\":\"2020-03-11T14:08:45.000-07:00\",\"x\":272.0,\"y\":64.0,\"parent_id\":0}]}]','2020-03-11 21:08:20','2020-03-11 21:09:56','operation.rb',-2,235,1,'2020-03-11 21:08:20','2020-03-11 22:08:20',NULL,NULL),(18,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:12:14.827-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:12:23.640-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583961143.621}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:238) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(238)\'>238</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:12:27.218-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583961147.194}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:12:29.373-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583961149.345}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T14:12:18.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 21:12:14','2020-03-11 21:12:29','operation.rb',-2,235,1,'2020-03-11 21:12:14','2020-03-11 22:12:14',NULL,NULL),(19,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:25:31.368-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:25:36.762-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583961936.729}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:247) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(247)\'>247</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:25:40.826-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583961940.787}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:25:45.253-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583961945.243}},{\"operation\":\"complete\",\"rval\":[{\"id\":1,\"operation_type_id\":2,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-11T09:30:09.000-07:00\",\"updated_at\":\"2020-03-11T14:25:34.000-07:00\",\"x\":312.0,\"y\":152.0,\"parent_id\":0}]}]','2020-03-11 21:25:31','2020-03-11 21:25:45','operation.rb',-2,235,1,'2020-03-11 21:25:31','2020-03-11 22:25:31',NULL,NULL),(20,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:31:16.099-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:31:22.109-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962282.091}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:256) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(256)\'>256</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:31:26.581-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962286.558}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:256) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(256)\'>256</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:31:30.512-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962290.484}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:256) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(256)\'>256</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:31:34.396-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962294.364}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:31:40.844-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962300.805}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:31:45.385-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962305.373}},{\"operation\":\"error\",\"message\":\"undefined method `each\' for #<Collection:0x0000559c9ea49fa8>\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"(eval):69:in `take_qc_measurments\'\",\"(eval):57:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:31:45.443-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-11 21:31:16','2020-03-11 21:31:45','operation.rb',-2,235,1,'2020-03-11 21:31:16','2020-03-11 22:31:16',NULL,NULL),(21,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:32:30.494-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:32:35.564-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962355.532}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:289) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(289)\'>289</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:32:39.113-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962359.076}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:32:40.459-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962360.419}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:32:41.931-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583962361.891}},{\"operation\":\"error\",\"message\":\"undefined method `each\' for #<Collection:0x0000559ca0c879a8>\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"(eval):69:in `take_qc_measurments\'\",\"(eval):57:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:32:41.958-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-11 21:32:30','2020-03-11 21:32:41','operation.rb',-2,235,1,'2020-03-11 21:32:30','2020-03-11 22:32:30',NULL,NULL),(22,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:53:43.757-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:53:48.528-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583963628.513}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:298) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(298)\'>298</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:53:52.163-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583963632.144}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:53:54.448-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583963634.425}},{\"operation\":\"error\",\"message\":\"undefined local variable or method `input_rcx\' for #<Krill::ShowBlock:0x0000559c9e9481b8>\",\"backtrace\":[\"/aquarium/lib/krill/show_block.rb:305:in `method_missing\'\",\"(eval):83:in `block (3 levels) in take_qc_measurments\'\",\"(eval):81:in `each\'\",\"(eval):81:in `block (2 levels) in take_qc_measurments\'\",\"(eval):78:in `each\'\",\"(eval):78:in `block in take_qc_measurments\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"(eval):72:in `take_qc_measurments\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:53:54.550-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-11 21:53:43','2020-03-11 21:53:54','operation.rb',-2,235,1,'2020-03-11 21:53:43','2020-03-11 22:53:43',NULL,NULL),(23,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T14:56:30.864-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:56:35.365-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583963795.331}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:307) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(307)\'>307</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:56:39.110-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583963799.072}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:56:41.284-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583963801.24}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"yoink\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T14:56:45.848-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583963805.833}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1583963805.833}}]','2020-03-11 21:56:30','2020-03-11 21:56:45','operation.rb',-2,235,1,'2020-03-11 21:56:30','2020-03-11 22:56:30',NULL,NULL),(24,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T15:00:00.897-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:05.168-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964005.133}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:316) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(316)\'>316</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:10.463-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964010.422}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:12.289-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964012.281}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"57\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"57\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"56\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"53\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"67\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"79\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:16.192-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964016.178}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1583964016.178}}]','2020-03-11 22:00:00','2020-03-11 22:00:16','operation.rb',-2,235,1,'2020-03-11 22:00:00','2020-03-11 23:00:00',NULL,NULL),(25,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T15:00:25.680-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:29.751-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964029.721}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:326) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(326)\'>326</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:33.682-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964033.643}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:35.145-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964035.111}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"67\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"82\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"99\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"71\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"97\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"96\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"94\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"70\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"65\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"50\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"69\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"96\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"57\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"98\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"99\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:00:38.090-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964038.053}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1583964038.053}}]','2020-03-11 22:00:25','2020-03-11 22:00:38','operation.rb',-2,235,1,'2020-03-11 22:00:25','2020-03-11 23:00:25',NULL,NULL),(26,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T15:00:55.823-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:01:00.802-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964060.771}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:342) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(342)\'>342</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:01:04.006-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964063.972}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:342) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(342)\'>342</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:01:06.999-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964066.963}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:342) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(342)\'>342</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:01:10.823-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964070.781}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:01:12.822-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964072.812}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"82\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"54\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"97\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"58\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"63\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"82\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"54\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"97\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"58\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"63\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"59\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"90\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"73\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"58\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"97\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"86\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"60\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"82\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"89\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"90\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"99\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"78\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"97\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"60\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:01:27.097-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964087.062}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1583964087.062}}]','2020-03-11 22:00:55','2020-03-11 22:01:27','operation.rb',-2,235,1,'2020-03-11 22:00:55','2020-03-11 23:00:55',NULL,NULL),(27,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T15:06:38.587-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:06:44.537-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964404.525}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:375) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(375)\'>375</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:06:48.722-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964408.705}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:06:50.663-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964410.643}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"96\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"87\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"78\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"67\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"63\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"90\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"72\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:06:53.655-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964413.633}},{\"operation\":\"display\",\"content\":[{\"title\":\"Toss Working Plate\"},{\"note\":\"Throw away working plate ID: 375\"}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:06:57.260-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964417.233}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1583964417.233}}]','2020-03-11 22:06:38','2020-03-11 22:06:57','operation.rb',-2,235,1,'2020-03-11 22:06:38','2020-03-11 23:06:38',NULL,NULL),(28,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T15:09:25.339-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `name\' for #<Collection:0x0000559ca01610b0>\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"(eval):42:in `block in main\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"(eval):40:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:09:28.807-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-11 22:09:25','2020-03-11 22:09:28','operation.rb',-2,235,1,'2020-03-11 22:09:25','2020-03-11 23:09:25',NULL,NULL),(29,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T15:10:49.824-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a 96 Well Sample Plate and lable ID: 385\"}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:10:55.550-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964655.524}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:11:28.932-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964688.904}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:385) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(385)\'>385</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:11:32.331-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964692.3}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:11:33.414-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964693.38}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"59\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"54\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"57\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"51\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"55\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"78\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"94\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"77\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:11:36.028-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964695.99}},{\"operation\":\"display\",\"content\":[{\"title\":\"Toss Working Plate\"},{\"note\":\"Throw away working plate ID: 385\"}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:11:38.172-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964698.132}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1583964698.132}}]','2020-03-11 22:10:49','2020-03-11 22:11:38','operation.rb',-2,235,1,'2020-03-11 22:10:49','2020-03-11 23:10:49',NULL,NULL),(30,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-11T15:11:47.241-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>394</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:11:52.586-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964712.565}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:12:10.099-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964730.057}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:394) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(394)\'>394</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:12:30.790-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964750.76}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:12:32.819-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964752.788}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"70\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"69\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"64\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"80\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"89\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"75\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:12:39.490-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964759.448}},{\"operation\":\"display\",\"content\":[{\"title\":\"Toss Working Plate\"},{\"note\":\"Throw away working plate ID: 394\"}]},{\"operation\":\"next\",\"time\":\"2020-03-11T15:12:41.910-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1583964761.9}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1583964761.9}}]','2020-03-11 22:11:47','2020-03-11 22:12:41','operation.rb',-2,235,1,'2020-03-11 22:11:47','2020-03-11 23:11:47',NULL,NULL),(31,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:21:34.534-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespaceR8Heathx7fqJWe6rngGpuRIpcSXq1pJl3IuzJ0bbXgQ::Protocol::INPUT_ARRAY\",\"backtrace\":[\"(eval):45:in `block in validate_inputs\'\",\"(eval):44:in `each\'\",\"(eval):44:in `validate_inputs\'\",\"(eval):11:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:21:37.655-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:21:34','2020-03-12 22:21:37','operation.rb',-2,235,1,'2020-03-12 22:21:34','2020-03-12 23:21:34',NULL,NULL),(32,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:26:56.698-07:00\"},{\"operation\":\"error\",\"message\":\"There are no samples for this job.\",\"backtrace\":[\"(eval):87:in `validate_inputs\'\",\"(eval):35:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:26:59.902-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:26:56','2020-03-12 22:26:59','operation.rb',-2,235,1,'2020-03-12 22:26:56','2020-03-12 23:26:56',NULL,NULL),(33,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:28:09.500-07:00\"},{\"operation\":\"error\",\"message\":\"There are no samples for this job.\",\"backtrace\":[\"(eval):87:in `validate_inputs\'\",\"(eval):35:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:28:12.391-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:28:09','2020-03-12 22:28:12','operation.rb',-2,235,1,'2020-03-12 22:28:09','2020-03-12 23:28:09',NULL,NULL),(34,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:28:52.517-07:00\"},{\"operation\":\"error\",\"message\":\"undefined local variable or method `output_array\' for #<Krill::ShowBlock:0x0000564613cfc100>\",\"backtrace\":[\"/aquarium/lib/krill/show_block.rb:305:in `method_missing\'\",\"(eval):46:in `block (2 levels) in main\'\",\"(eval):43:in `each\'\",\"(eval):43:in `block in main\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"(eval):41:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:28:55.093-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:28:52','2020-03-12 22:28:55','operation.rb',-2,235,1,'2020-03-12 22:28:52','2020-03-12 23:28:52',NULL,NULL),(40,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:32:12.036-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"4\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:32:18.026-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584052338.02}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584052338.02}}]','2020-03-12 22:32:12','2020-03-12 22:32:18','operation.rb',-2,235,1,'2020-03-12 22:32:12','2020-03-12 23:32:12',NULL,NULL),(41,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:33:03.262-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 4\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:33:09.025-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584052389.018}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584052389.018}}]','2020-03-12 22:33:03','2020-03-12 22:33:09','operation.rb',-2,235,1,'2020-03-12 22:33:03','2020-03-12 23:33:03',NULL,NULL),(42,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:34:10.158-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 4\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:34:15.258-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584052455.251}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584052455.251}}]','2020-03-12 22:34:10','2020-03-12 22:34:15','operation.rb',-2,235,1,'2020-03-12 22:34:10','2020-03-12 23:34:10',NULL,NULL),(43,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:36:45.733-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 11\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(2)\'>2</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(2)\'>2</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(2)\'>2</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(2)\'>2</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:36:50.957-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584052610.951}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584052610.951}}]','2020-03-12 22:36:45','2020-03-12 22:36:50','operation.rb',-2,235,1,'2020-03-12 22:36:45','2020-03-12 23:36:45',NULL,NULL),(44,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:37:17.819-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `each\' for #<FieldValue:0x0000564614801ca8>\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"(eval):48:in `block (2 levels) in main\'\",\"(eval):45:in `each\'\",\"(eval):45:in `block in main\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"(eval):43:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:37:20.444-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:37:17','2020-03-12 22:37:20','operation.rb',-2,235,1,'2020-03-12 22:37:17','2020-03-12 23:37:17',NULL,NULL),(45,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:38:21.851-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 11\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(441)\'>441</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(442)\'>442</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(443)\'>443</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(444)\'>444</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:45:03.731-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053103.724}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584053103.724}}]','2020-03-12 22:38:21','2020-03-12 22:45:03','operation.rb',-2,235,1,'2020-03-12 22:38:21','2020-03-12 23:38:21',NULL,NULL),(46,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:45:14.320-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `set\' for #<Array:0x0000564613e22980>\\nDid you mean?  send\",\"backtrace\":[\"(eval):43:in `block (2 levels) in main\'\",\"(eval):42:in `each\'\",\"(eval):42:in `block in main\'\",\"(eval):40:in `each\'\",\"(eval):40:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:45:17.663-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:45:14','2020-03-12 22:45:17','operation.rb',-2,235,1,'2020-03-12 22:45:14','2020-03-12 23:45:14',NULL,NULL),(47,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:45:33.080-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 11\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(447)\'>447</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(448)\'>448</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(449)\'>449</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(450)\'>450</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:45:45.054-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053145.048}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584053145.048}}]','2020-03-12 22:45:33','2020-03-12 22:45:45','operation.rb',-2,235,1,'2020-03-12 22:45:33','2020-03-12 23:45:33',NULL,NULL),(48,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:45:53.671-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 11\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(451)\'>451</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(451)\'>451</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(451)\'>451</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(451)\'>451</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:47:45.917-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053265.889}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584053265.889}}]','2020-03-12 22:45:53','2020-03-12 22:47:45','operation.rb',-2,235,1,'2020-03-12 22:45:53','2020-03-12 23:45:53',NULL,NULL),(49,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:55:24.273-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>452</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:55:29.449-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053729.443}},{\"operation\":\"error\",\"message\":\"undefined local variable or method `samples\' for #<ExecutionNamespacemCDk45f8BVIow5KLbeZr5xIPNEQ8NHOWLHF5ndgCc::Protocol:0x00005646148ca2c0>\",\"backtrace\":[\"(eval):48:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:55:29.467-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:55:24','2020-03-12 22:55:29','operation.rb',-2,235,1,'2020-03-12 22:55:24','2020-03-12 23:55:24',NULL,NULL),(50,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:56:03.555-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>453</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:56:07.328-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053767.322}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:56:09.288-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053769.28}},{\"operation\":\"error\",\"message\":\"undefined local variable or method `out_array\' for #<ExecutionNamespacezVFxGRaYT804eBBgvUIDaZekYEUt26dOfUAYSh9e7M::Protocol:0x00005646124e9928>\\nDid you mean?  output_fv_array\",\"backtrace\":[\"(eval):80:in `make_output_plate\'\",\"(eval):58:in `block in main\'\",\"(eval):52:in `each\'\",\"(eval):52:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:56:09.374-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-12 22:56:03','2020-03-12 22:56:09','operation.rb',-2,235,1,'2020-03-12 22:56:03','2020-03-12 23:56:03',NULL,NULL),(51,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:56:29.715-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>458</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:56:33.316-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053793.309}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:56:34.327-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053794.319}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:458) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(458)\'>458</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:56:40.457-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053800.451}},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 11\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(458)\'>458</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(458)\'>458</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(458)\'>458</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(458)\'>458</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:57:07.702-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053827.695}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584053827.695}}]','2020-03-12 22:56:29','2020-03-12 22:57:07','operation.rb',-2,235,1,'2020-03-12 22:56:29','2020-03-12 23:56:29',NULL,NULL),(52,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T15:57:44.559-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>463</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:57:47.409-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053867.401}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:57:48.741-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053868.736}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:463) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(463)\'>463</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:57:58.141-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053878.132}},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 12\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(463)\'>463</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(463)\'>463</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(463)\'>463</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(463)\'>463</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(463)\'>463</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T15:58:27.673-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584053907.666}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584053907.666}}]','2020-03-12 22:57:44','2020-03-12 22:58:27','operation.rb',-2,235,1,'2020-03-12 22:57:44','2020-03-12 23:57:44',NULL,NULL),(53,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T16:00:30.702-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>469</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:00:36.404-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584054036.399}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:00:37.937-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584054037.932}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:469) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:00:42.198-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584054042.192}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:469) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:00:48.471-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584054048.464}},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 13\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"op id: 14\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(469)\'>469</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:01:01.173-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584054061.166}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584054061.166}}]','2020-03-12 23:00:30','2020-03-12 23:01:01','operation.rb',-2,235,1,'2020-03-12 23:00:30','2020-03-13 00:00:30',NULL,NULL),(54,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-12T16:16:45.494-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>479</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:17:37.938-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584055057.932}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:17:39.445-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584055059.44}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:479) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(479)\'>479</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-12T16:17:49.053-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584055069.045}},{\"operation\":\"display\",\"content\":[{\"title\":\"All of the collections\"},{\"note\":\"op id: 13\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(479)\'>479</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(479)\'>479</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(479)\'>479</a>\"},{\"note\":\"<a href=\'#\' onclick=\'open_item_ui(479)\'>479</a>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:32:54.576-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113574.565}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584113574.565}}]','2020-03-12 23:16:45','2020-03-13 15:32:54','operation.rb',-2,235,1,'2020-03-12 23:16:45','2020-03-13 00:16:45',NULL,NULL),(55,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T08:36:43.673-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>484</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:36:50.489-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113810.45}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:36:54.137-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113814.119}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:484) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(484)\'>484</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:36:57.974-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113817.959}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 484\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:37:02.081-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113822.063}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":484,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:37:05.526-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113825.503}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T08:36:46.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 15:36:43','2020-03-13 15:37:05','operation.rb',-2,235,1,'2020-03-13 15:36:43','2020-03-13 16:36:43',NULL,NULL),(56,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T08:37:53.619-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>489</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:37:57.344-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113877.331}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:37:58.368-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113878.353}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:489) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(489)\'>489</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:38:01.219-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113881.2}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 489\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:38:03.847-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113883.825}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":489,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:38:06.392-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113886.368}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T08:37:55.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 15:37:53','2020-03-13 15:38:06','operation.rb',-2,235,1,'2020-03-13 15:37:53','2020-03-13 16:37:53',NULL,NULL),(57,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T08:39:10.930-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>494</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:39:15.626-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113955.593}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:39:16.494-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113956.459}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:494) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(494)\'>494</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:39:19.460-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113959.42}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 494\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:39:22.132-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113962.09}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":494,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:39:25.599-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584113965.588}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T08:39:14.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 15:39:10','2020-03-13 15:39:25','operation.rb',-2,235,1,'2020-03-13 15:39:10','2020-03-13 16:39:10',NULL,NULL),(58,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T08:40:10.931-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>499</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:40:15.337-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114015.303}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:40:16.100-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114016.064}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:499) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(499)\'>499</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:40:19.223-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114019.185}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 499\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:40:26.431-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114026.419}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":499,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:40:28.858-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114028.843}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T08:40:14.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 15:40:10','2020-03-13 15:40:28','operation.rb',-2,235,1,'2020-03-13 15:40:10','2020-03-13 16:40:10',NULL,NULL),(59,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T08:41:28.931-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>504</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:41:34.583-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114094.56}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:41:36.032-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114096.009}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:504) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(504)\'>504</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:41:38.737-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114098.711}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 504\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:41:41.461-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114101.432}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":504,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:41:43.495-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114103.462}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T08:41:32.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 15:41:28','2020-03-13 15:41:43','operation.rb',-2,235,1,'2020-03-13 15:41:28','2020-03-13 16:41:28',NULL,NULL),(60,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T08:42:17.307-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>509</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:42:21.877-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114141.836}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:42:24.723-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114144.713}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:509) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(509)\'>509</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:42:27.946-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114147.933}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 509\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:42:30.649-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114150.632}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":509,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:42:32.719-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114152.699}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T08:42:19.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 15:42:17','2020-03-13 15:42:32','operation.rb',-2,235,1,'2020-03-13 15:42:17','2020-03-13 16:42:17',NULL,NULL),(61,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T08:43:30.213-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>514</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:43:35.080-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114215.058}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:43:35.779-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114215.755}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:514) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(514)\'>514</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:43:39.427-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114219.4}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:43:51.545-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114231.503}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 514\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:43:55.217-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114235.206}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":514,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T08:43:56.182-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584114236.171}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T08:43:33.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 15:43:30','2020-03-13 15:43:56','operation.rb',-2,235,1,'2020-03-13 15:43:30','2020-03-13 16:43:30',NULL,NULL),(62,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T10:39:15.078-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>519</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:39:28.736-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121168.712}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:39:29.832-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121169.806}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:519) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(519)\'>519</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:39:33.078-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121173.05}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:39:36.980-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121176.947}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 519\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:39:40.311-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121180.275}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":519,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:39:41.974-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121181.934}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T10:39:19.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 17:39:15','2020-03-13 17:39:41','operation.rb',-2,235,1,'2020-03-13 17:39:15','2020-03-13 18:39:15',NULL,NULL),(63,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T10:42:40.115-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>524</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:42:47.728-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121367.717}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:42:48.543-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121368.53}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:524) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(524)\'>524</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:42:52.532-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121372.515}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:42:54.460-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121374.44}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 524\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:42:57.884-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121377.863}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":524,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:42:59.082-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121379.056}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T10:42:46.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 17:42:40','2020-03-13 17:42:59','operation.rb',-2,235,1,'2020-03-13 17:42:40','2020-03-13 18:42:40',NULL,NULL),(64,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T10:48:04.099-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>529</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:48:18.161-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121698.15}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:48:20.340-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121700.325}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:529) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(529)\'>529</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:48:26.715-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121706.694}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:48:33.708-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121713.676}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 529\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:48:37.573-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121717.54}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":529,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T10:49:22.618-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584121762.6}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T10:48:11.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 17:48:04','2020-03-13 17:49:22','operation.rb',-2,235,1,'2020-03-13 17:48:04','2020-03-13 18:48:04',NULL,NULL),(65,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:04:09.189-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>534</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:04:13.490-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122653.481}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:04:14.332-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122654.323}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:534) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(534)\'>534</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:04:17.603-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122657.591}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:04:19.895-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122659.879}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 534\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:04:24.035-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122664.014}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":534,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:04:49.018-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:04:09','2020-03-13 18:04:49','operation.rb',-2,235,1,'2020-03-13 18:04:09','2020-03-13 19:04:09',NULL,NULL),(66,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:04:58.792-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>539</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:05:02.749-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122702.721}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:05:05.055-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122705.024}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:539) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(539)\'>539</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:05:09.496-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122709.458}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:05:11.186-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122711.147}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 539\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:05:14.407-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122714.394}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":539,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:06:24.922-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122784.899}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T11:05:01.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 18:04:58','2020-03-13 18:06:24','operation.rb',-2,235,1,'2020-03-13 18:04:58','2020-03-13 19:04:58',NULL,NULL),(67,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:07:44.465-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>544</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:07:49.307-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122869.293}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:07:50.477-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122870.46}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:544) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(544)\'>544</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:07:53.758-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122873.739}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Item(s)\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:07:55.289-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122875.266}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 544\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:07:58.980-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584122878.953}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":544,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:10:30.601-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:07:44','2020-03-13 18:10:30','operation.rb',-2,235,1,'2020-03-13 18:07:44','2020-03-13 19:07:44',NULL,NULL),(68,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:10:39.174-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>549</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:10:42.930-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123042.923}},{\"operation\":\"error\",\"message\":\"wrong number of arguments (given 3, expected 1..2)\",\"backtrace\":[\"(eval):50:in `[]\'\",\"(eval):50:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:10:42.948-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:10:39','2020-03-13 18:10:42','operation.rb',-2,235,1,'2020-03-13 18:10:39','2020-03-13 19:10:39',NULL,NULL),(69,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:11:39.722-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>550</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:11:43.095-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123103.088}},{\"operation\":\"error\",\"message\":\"wrong number of arguments (given 3, expected 1..2)\",\"backtrace\":[\"(eval):50:in `[]\'\",\"(eval):50:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:11:43.112-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:11:39','2020-03-13 18:11:43','operation.rb',-2,235,1,'2020-03-13 18:11:39','2020-03-13 19:11:39',NULL,NULL),(70,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:11:57.016-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>551</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:12:01.349-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123121.321}},{\"operation\":\"display\",\"content\":[{\"title\":\"yoyo\"},{\"table\":[[\"Stripwell\",\"well\",\"Input Item\"],[\"lol\",\"this\",\"wont_work\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:12:11.790-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123131.75}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:12:13.213-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123133.204}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:551) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(551)\'>551</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:12:17.752-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123137.739}},{\"operation\":\"error\",\"message\":\"undefined method `store_input_collections\' for #<ExecutionNamespacesnT4WcpAYSMlICnvBE9yhGzARcnQqWK_YAlDTR4JBaY::Protocol:0x000056461461c4b0>\",\"backtrace\":[\"(eval):72:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:12:17.790-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:11:57','2020-03-13 18:12:17','operation.rb',-2,235,1,'2020-03-13 18:11:57','2020-03-13 19:11:57',NULL,NULL),(71,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:13:49.730-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>556</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:13:52.754-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123232.735}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:13:53.920-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123233.899}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:556) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(556)\'>556</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:13:56.997-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123236.973}},{\"operation\":\"error\",\"message\":\"undefined method `store_input_collections\' for #<ExecutionNamespaceFkx7jrjYMcvey82nmKMPem35IhiVXuG2jjdNxNq2vY::Protocol:0x0000564613d492e8>\",\"backtrace\":[\"(eval):67:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:13:57.026-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:13:49','2020-03-13 18:13:57','operation.rb',-2,235,1,'2020-03-13 18:13:49','2020-03-13 19:13:49',NULL,NULL),(72,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:15:54.218-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>561</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:15:58.650-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123358.625}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:15:59.412-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123359.384}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:561) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(561)\'>561</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:16:02.752-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123362.722}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 561\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:16:05.715-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123365.68}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":561,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:16:07.354-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123367.319}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T11:15:56.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 18:15:54','2020-03-13 18:16:07','operation.rb',-2,235,1,'2020-03-13 18:15:54','2020-03-13 19:15:54',NULL,NULL),(73,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:16:35.173-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>566</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:17:32.871-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123452.841}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:17:33.738-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123453.706}},{\"operation\":\"error\",\"message\":\"undefined method `store_items\' for #<ExecutionNamespaceNP1G3vrFiiQZbxIdZIoJJD3ErC2khCo5aHM6DFV89M::Protocol:0x0000564613e45bd8>\",\"backtrace\":[\"(eval):67:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:17:33.775-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:16:35','2020-03-13 18:17:33','operation.rb',-2,235,1,'2020-03-13 18:16:35','2020-03-13 19:16:35',NULL,NULL),(74,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:20:29.317-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>567</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:20:32.692-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123632.661}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:20:33.545-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123633.514}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:567) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(567)\'>567</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:20:38.433-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123638.395}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:567) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(567)\'>567</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:20:51.604-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123651.584}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:567) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(567)\'>567</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:20:55.757-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123655.734}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:567) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(567)\'>567</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:20:59.198-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123659.168}},{\"operation\":\"error\",\"message\":\"undefined method `store_items\' for #<ExecutionNamespacenBPKTunIQ7CPMi_btqdKlZDNKZSCo64T1ZT6Ookots::Protocol:0x00005646141cb898>\",\"backtrace\":[\"(eval):62:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:20:59.247-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:20:29','2020-03-13 18:20:59','operation.rb',-2,235,1,'2020-03-13 18:20:29','2020-03-13 19:20:29',NULL,NULL),(75,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:21:50.495-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>586</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:21:54.029-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123714.009}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:21:55.880-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123715.858}},{\"operation\":\"error\",\"message\":\"Items are neither an Array nor an Item.  Check class type.\",\"backtrace\":[\"Collection_Management/CollectionActions:88:in `block in store_items\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:81:in `store_items\'\",\"(eval):62:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:21:55.913-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:21:50','2020-03-13 18:21:55','operation.rb',-2,235,1,'2020-03-13 18:21:50','2020-03-13 19:21:50',NULL,NULL),(76,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:22:25.329-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>587</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:22:30.111-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123750.082}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:22:31.182-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123751.152}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:587) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(587)\'>587</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:22:35.374-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123755.341}},{\"operation\":\"error\",\"message\":\"undefined method `item\' for #<Collection:0x0000564610c71120>\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"(eval):62:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:22:35.405-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:22:25','2020-03-13 18:22:35','operation.rb',-2,235,1,'2020-03-13 18:22:25','2020-03-13 19:22:25',NULL,NULL),(77,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:23:46.239-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>592</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:23:50.323-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123830.307}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:23:51.275-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123831.258}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:592) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(592)\'>592</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:23:54.362-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123834.341}},{\"operation\":\"error\",\"message\":\"undefined local variable or method `collection_array\' for #<ExecutionNamespacepHdCF2uOFF8g8oHSoD1bD5S7jyv0Ac4f4plAMrddXM::Protocol:0x00005646146f3bb8>\\nDid you mean?  collection_from\",\"backtrace\":[\"Collection_Management/CollectionActions:67:in `get_item_locations\'\",\"/aquarium/lib/krill/show_block.rb:303:in `method_missing\'\",\"Collection_Management/CollectionActions:84:in `block in store_items\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:81:in `store_items\'\",\"(eval):62:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:23:54.394-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:23:46','2020-03-13 18:23:54','operation.rb',-2,235,1,'2020-03-13 18:23:46','2020-03-13 19:23:46',NULL,NULL),(78,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:25:36.849-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>598</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:25:39.908-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123939.867}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:25:41.396-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123941.356}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:598) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(598)\'>598</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:25:44.118-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584123944.108}},{\"operation\":\"error\",\"message\":\"undefined method `name\' for #<Collection:0x0000564610c78790>\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"Collection_Management/CollectionActions:62:in `block in get_item_locations\'\",\"Collection_Management/CollectionActions:61:in `each\'\",\"Collection_Management/CollectionActions:61:in `get_item_locations\'\",\"/aquarium/lib/krill/show_block.rb:303:in `method_missing\'\",\"Collection_Management/CollectionActions:74:in `block in store_items\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:71:in `store_items\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:25:44.151-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:25:36','2020-03-13 18:25:44','operation.rb',-2,235,1,'2020-03-13 18:25:36','2020-03-13 19:25:36',NULL,NULL),(79,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:26:50.602-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>603</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:26:54.472-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124014.45}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:26:55.840-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124015.816}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:603) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(603)\'>603</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:26:58.295-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124018.269}},{\"operation\":\"error\",\"message\":\"wrong number of arguments (given 3, expected 1..2)\",\"backtrace\":[\"Collection_Management/CollectionActions:62:in `[]\'\",\"Collection_Management/CollectionActions:62:in `block in get_item_locations\'\",\"Collection_Management/CollectionActions:61:in `each\'\",\"Collection_Management/CollectionActions:61:in `get_item_locations\'\",\"/aquarium/lib/krill/show_block.rb:303:in `method_missing\'\",\"Collection_Management/CollectionActions:74:in `block in store_items\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:71:in `store_items\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:26:58.319-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:26:50','2020-03-13 18:26:58','operation.rb',-2,235,1,'2020-03-13 18:26:50','2020-03-13 19:26:50',NULL,NULL),(80,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:27:26.672-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>609</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:27:30.596-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124050.567}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:27:31.239-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124051.209}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[609,\"96 Well Sample Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:27:53.106-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124073.084}},{\"operation\":\"error\",\"message\":\"undefined method `store_fv_collections\' for #<Krill::ShowBlock:0x0000564614112c08>\",\"backtrace\":[\"/aquarium/lib/krill/show_block.rb:305:in `method_missing\'\",\"Collection_Management/CollectionActions:18:in `block (2 levels) in store_input_collections\'\",\"Collection_Management/CollectionActions:16:in `each\'\",\"Collection_Management/CollectionActions:16:in `block in store_input_collections\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:14:in `store_input_collections\'\",\"(eval):64:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:27:53.136-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:27:26','2020-03-13 18:27:53','operation.rb',-2,235,1,'2020-03-13 18:27:26','2020-03-13 19:27:26',NULL,NULL),(81,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:28:43.434-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>610</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:28:46.517-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124126.504}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:28:47.684-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124127.67}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:610) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(610)\'>610</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:28:50.727-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124130.71}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[610,\"96 Well Sample Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:28:53.098-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124133.078}},{\"operation\":\"error\",\"message\":\"undefined method `store_fv_collections\' for #<Krill::ShowBlock:0x0000564611c130b0>\",\"backtrace\":[\"/aquarium/lib/krill/show_block.rb:305:in `method_missing\'\",\"Collection_Management/CollectionActions:18:in `block (2 levels) in store_input_collections\'\",\"Collection_Management/CollectionActions:16:in `each\'\",\"Collection_Management/CollectionActions:16:in `block in store_input_collections\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:14:in `store_input_collections\'\",\"(eval):64:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:28:53.133-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:28:43','2020-03-13 18:28:53','operation.rb',-2,235,1,'2020-03-13 18:28:43','2020-03-13 19:28:43',NULL,NULL),(82,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:29:22.724-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>615</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:29:25.518-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124165.496}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:29:27.016-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124166.99}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:615) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(615)\'>615</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:29:29.697-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124169.669}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[615,\"96 Well Sample Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:29:30.953-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124170.925}},{\"operation\":\"error\",\"message\":\"wrong number of arguments (given 0, expected 1)\",\"backtrace\":[\"/aquarium/lib/krill/show_block.rb:117:in `table\'\",\"Collection_Management/CollectionActions:20:in `block (2 levels) in store_input_collections\'\",\"Collection_Management/CollectionActions:16:in `each\'\",\"Collection_Management/CollectionActions:16:in `block in store_input_collections\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:14:in `store_input_collections\'\",\"(eval):64:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:29:30.996-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:29:22','2020-03-13 18:29:31','operation.rb',-2,235,1,'2020-03-13 18:29:22','2020-03-13 19:29:22',NULL,NULL),(83,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:30:00.496-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>621</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:30:03.811-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124203.779}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:30:04.488-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124204.454}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:621) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(621)\'>621</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:30:07.428-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124207.392}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[621,\"96 Well Sample Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:30:08.465-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124208.427}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:30:17.349-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124217.333}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 621\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:30:20.974-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124220.955}},{\"operation\":\"display\",\"content\":[{\"title\":\"Return the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":621,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:30:40.015-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584124239.976}},{\"operation\":\"complete\",\"rval\":[{\"id\":13,\"operation_type_id\":3,\"status\":\"running\",\"user_id\":1,\"created_at\":\"2020-03-12T15:58:47.000-07:00\",\"updated_at\":\"2020-03-13T11:30:02.000-07:00\",\"x\":192.0,\"y\":192.0,\"parent_id\":0}]}]','2020-03-13 18:30:00','2020-03-13 18:30:40','operation.rb',-2,235,1,'2020-03-13 18:30:00','2020-03-13 19:30:00',NULL,NULL),(84,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:47:07.924-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>626</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:47:12.781-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125232.769}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:47:13.544-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125233.533}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:626) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(626)\'>626</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:47:16.514-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125236.5}},{\"operation\":\"error\",\"message\":\"wrong number of arguments (given 1, expected 2)\",\"backtrace\":[\"Collection_Management/CollectionActions:61:in `set_locations\'\",\"/aquarium/lib/krill/show_block.rb:303:in `method_missing\'\",\"Collection_Management/CollectionActions:89:in `block in store_items\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:86:in `store_items\'\",\"(eval):62:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:47:16.540-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:47:07','2020-03-13 18:47:16','operation.rb',-2,235,1,'2020-03-13 18:47:07','2020-03-13 19:47:07',NULL,NULL),(85,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:48:52.674-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>632</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:48:55.794-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125335.767}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:48:56.491-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125336.464}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[632,\"96 Well Sample Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:48:59.752-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125339.723}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:49:08.684-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125348.645}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 632\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:49:11.502-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125351.492}},{\"operation\":\"error\",\"message\":\"undefined method `location\' for nil:NilClass\",\"backtrace\":[\"/aquarium/lib/krill/operation_list.rb:194:in `block (2 levels) in store\'\",\"/aquarium/lib/krill/operation_list.rb:193:in `each\'\",\"/aquarium/lib/krill/operation_list.rb:193:in `block in store\'\",\"/aquarium/lib/krill/operation_list.rb:192:in `each\'\",\"/aquarium/lib/krill/operation_list.rb:192:in `each_with_index\'\",\"/aquarium/lib/krill/operation_list.rb:192:in `store\'\",\"(eval):70:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:49:11.545-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:48:52','2020-03-13 18:49:11','operation.rb',-2,235,1,'2020-03-13 18:48:52','2020-03-13 19:48:52',NULL,NULL),(86,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:52:14.834-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Integer)</span>\"},{\"note\":\"4\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:20.073-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125540.053}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>633</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:22.237-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125542.217}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:23.434-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125543.413}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:633) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(633)\'>633</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:26.331-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125546.304}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:28.528-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125548.5}},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (String)</span>\"},{\"note\":\"\\\"Should not have stored working plate yet\\\"\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:30.163-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125550.134}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 633\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:33.417-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125553.383}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:52:45.939-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125565.924}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584125565.924}}]','2020-03-13 18:52:14','2020-03-13 18:52:45','operation.rb',-2,235,1,'2020-03-13 18:52:14','2020-03-13 19:52:14',NULL,NULL),(87,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:58:07.648-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Integer)</span>\"},{\"note\":\"5\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:18.284-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125958.268}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>638</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:19.299-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125959.281}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:20.416-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125960.397}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:638) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(638)\'>638</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:23.510-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125963.487}},{\"operation\":\"error\",\"message\":\"undefined method `elseif\' for #<ExecutionNamespaceSuBJDyidBvoRVBQxcMVlv0AU4exUF9vIofSLEGECUE::Protocol:0x0000564613e8b020>\\nDid you mean?  elsif\",\"backtrace\":[\"Collection_Management/CollectionActions:49:in `block in table_of_object_locations\'\",\"Collection_Management/CollectionActions:46:in `each\'\",\"Collection_Management/CollectionActions:46:in `table_of_object_locations\'\",\"/aquarium/lib/krill/show_block.rb:303:in `method_missing\'\",\"Collection_Management/CollectionActions:19:in `block (2 levels) in store_input_collections\'\",\"Collection_Management/CollectionActions:17:in `each\'\",\"Collection_Management/CollectionActions:17:in `block in store_input_collections\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:23.550-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 18:58:07','2020-03-13 18:59:23','operation.rb',-2,235,1,'2020-03-13 18:58:07','2020-03-13 19:58:07',NULL,NULL),(88,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T11:59:46.818-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Integer)</span>\"},{\"note\":\"5\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:49.430-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125989.411}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>644</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:50.368-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125990.35}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:51.252-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125991.232}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:644) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(644)\'>644</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:54.935-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125994.911}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:58.323-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125998.294}},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (String)</span>\"},{\"note\":\"\\\"Should not have stored working plate yet\\\"\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T11:59:59.973-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584125999.942}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 644\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:00:02.817-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584126002.783}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[644,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:00:04.963-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584126004.927}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584126004.927}}]','2020-03-13 18:59:46','2020-03-13 19:00:04','operation.rb',-2,235,1,'2020-03-13 18:59:46','2020-03-13 19:59:46',NULL,NULL),(89,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:10:36.291-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"<span style=\\\"background-color:yellow\\\">INSPECTING  (Class)</span>\"},{\"note\":\"{}\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:10:51.176-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584126651.156}},{\"operation\":\"error\",\"message\":\"undefined method `<=\' for #<Array:0x0000564614637580>\\nDid you mean?  <=>\",\"backtrace\":[\"(eval):95:in `validate_inputs\'\",\"(eval):36:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:10:51.198-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:10:36','2020-03-13 19:10:51','operation.rb',-2,235,1,'2020-03-13 19:10:36','2020-03-13 20:10:36',NULL,NULL),(90,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:11:39.199-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Array\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:13:02.537-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:11:39','2020-03-13 19:13:02','operation.rb',-2,235,1,'2020-03-13 19:11:39','2020-03-13 20:11:39',NULL,NULL),(91,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:13:08.009-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Sample\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:13:19.497-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:13:08','2020-03-13 19:13:19','operation.rb',-2,235,1,'2020-03-13 19:13:08','2020-03-13 20:13:08',NULL,NULL),(92,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:17:51.272-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"<a href=\'/samples/4\' class=\'aquarium-item\' id=\'4\'>4</a>\"},{\"note\":\"Sample\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:18:45.889-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:17:51','2020-03-13 19:18:45','operation.rb',-2,235,1,'2020-03-13 19:17:51','2020-03-13 20:17:51',NULL,NULL),(93,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:18:53.587-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"4\"},{\"note\":\"Integer\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:19:15.703-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127155.687}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>650</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:19:17.019-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127157.002}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:19:17.911-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127157.893}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:650) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(650)\'>650</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:20:32.589-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:18:53','2020-03-13 19:20:32','operation.rb',-2,235,1,'2020-03-13 19:18:53','2020-03-13 20:18:53',NULL,NULL),(94,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:20:53.558-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"\"},{\"note\":\"NilClass\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:21:01.689-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127261.656}},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>656</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:21:05.653-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127265.614}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:21:06.424-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127266.386}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:656) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(656)\'>656</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:21:10.184-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127270.174}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:21:11.402-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127271.378}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 656\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:21:14.260-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127274.245}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[656,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:21:15.378-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127275.361}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584127275.361}}]','2020-03-13 19:20:53','2020-03-13 19:21:15','operation.rb',-2,235,1,'2020-03-13 19:20:53','2020-03-13 20:20:53',NULL,NULL),(95,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:22:12.657-07:00\"},{\"operation\":\"error\",\"message\":\"\",\"backtrace\":[\"(eval):91:in `validate_inputs\'\",\"(eval):36:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:22:17.450-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:22:12','2020-03-13 19:22:17','operation.rb',-2,235,1,'2020-03-13 19:22:12','2020-03-13 20:22:12',NULL,NULL),(96,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:23:22.149-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>661</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:23:26.445-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127406.417}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:23:27.149-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127407.12}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:661) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(661)\'>661</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:23:30.299-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127410.266}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:23:31.748-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127411.713}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 661\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:23:33.988-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127413.949}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[661,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:23:35.059-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584127415.022}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584127415.022}}]','2020-03-13 19:23:22','2020-03-13 19:23:35','operation.rb',-2,235,1,'2020-03-13 19:23:22','2020-03-13 20:23:22',NULL,NULL),(97,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:23:44.193-07:00\"},{\"operation\":\"error\",\"message\":\"Sample 4 has been included multiple times in this job\",\"backtrace\":[\"(eval):91:in `validate_inputs\'\",\"(eval):36:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:23:45.569-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:23:44','2020-03-13 19:23:45','operation.rb',-2,235,1,'2020-03-13 19:23:44','2020-03-13 20:23:44',NULL,NULL),(98,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:24:27.843-07:00\"},{\"operation\":\"error\",\"message\":\"Sample 1 has been included multiple times in this job\",\"backtrace\":[\"(eval):91:in `validate_inputs\'\",\"(eval):36:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:24:30.575-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:24:27','2020-03-13 19:24:30','operation.rb',-2,235,1,'2020-03-13 19:24:27','2020-03-13 20:24:27',NULL,NULL),(99,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T12:32:43.638-07:00\"},{\"operation\":\"error\",\"message\":\"wrong number of arguments (given 1, expected 0)\",\"backtrace\":[\"(eval):118:in `validate_inputs\'\",\"(eval):39:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:42:39.336-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:32:43','2020-03-13 19:42:39','operation.rb',-2,235,1,'2020-03-13 19:32:43','2020-03-13 20:32:43',NULL,NULL),(100,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:34:44.271-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespacezHURSM0I1pJ7GIiWeTPsSEdTrg0NcdxLJfek2o1Ko::WorkflowValidation::INPUT_ARRAY\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:16:in `block in validate_inputs\'\",\"RNA_Seq/WorkflowValidation:15:in `each\'\",\"RNA_Seq/WorkflowValidation:15:in `validate_inputs\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:38:05.944-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:34:44','2020-03-13 19:38:05','operation.rb',-2,235,1,'2020-03-13 19:34:44','2020-03-13 20:34:44',NULL,NULL),(101,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:45:26.352-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespacedz9nJd8Znp4bs3pZILphxwb3NwnwYjSaYjXHfq2rVQs::WorkflowValidation::MAX_INPUTS\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:25:in `validate_inputs\'\",\"(eval):38:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:45:28.635-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:45:26','2020-03-13 19:45:28','operation.rb',-2,235,1,'2020-03-13 19:45:26','2020-03-13 20:45:26',NULL,NULL),(102,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T12:46:49.971-07:00\"},{\"operation\":\"error\",\"message\":\"The number of Input Samples and Output Samples do not match\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:26:in `validate_inputs\'\",\"(eval):38:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:46:51.520-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:46:49','2020-03-13 19:46:51','operation.rb',-2,235,1,'2020-03-13 19:46:49','2020-03-13 20:46:49',NULL,NULL),(103,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T12:49:39.769-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespacew6l5wp1PYwiG_A0vG_buTW1dR5H4agL8xX2bscQ8ufk::WorkflowValidation::MAX_INPUTS\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:29:in `validate_inputs\'\",\"(eval):38:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:49:41.652-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 19:49:39','2020-03-13 19:49:41','operation.rb',-2,235,1,'2020-03-13 19:49:39','2020-03-13 20:49:39',NULL,NULL),(104,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T12:50:12.504-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>666</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:16.245-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129016.226}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:17.126-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129017.106}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:666) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(666)\'>666</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:20.213-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129020.191}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:21.592-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129021.567}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 666\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:24.394-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129024.366}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[666,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:25.555-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129025.526}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584129025.526}}]','2020-03-13 19:50:12','2020-03-13 19:50:25','operation.rb',-2,235,1,'2020-03-13 19:50:12','2020-03-13 20:50:12',NULL,NULL),(105,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T12:50:42.073-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>671</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:45.468-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129045.45}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:46.251-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129046.23}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:671) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(671)\'>671</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:49.939-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129049.916}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:51.325-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129051.3}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"80\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"68\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"66\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"60\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"52\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"66\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"52\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"72\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:50:54.236-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129054.208}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:51:00.278-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129060.243}},{\"operation\":\"display\",\"content\":[{\"title\":\"Toss Working Plate\"},{\"note\":\"Throw away working plate ID: 671\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T12:51:05.449-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129065.409}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584129065.409}}]','2020-03-13 19:50:42','2020-03-13 19:51:05','operation.rb',-2,235,1,'2020-03-13 19:50:42','2020-03-13 20:50:42',NULL,NULL),(106,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T13:04:04.195-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>680</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:04:28.741-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129868.707}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:04:29.652-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129869.616}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:680) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(680)\'>680</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:04:32.718-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129872.68}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:04:35.261-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129875.219}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"65\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"90\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"69\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"59\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"80\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"64\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"71\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:04:40.315-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129880.3}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[680,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:04:45.135-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584129885.116}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584129885.116}}]','2020-03-13 20:04:04','2020-03-13 20:04:45','operation.rb',-2,235,1,'2020-03-13 20:04:04','2020-03-13 21:04:04',NULL,NULL),(107,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T13:17:56.185-07:00\"},{\"operation\":\"error\",\"message\":\"wrong number of arguments (given 1, expected 2)\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:35:in `validate_concentrations\'\",\"(eval):39:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:17:58.477-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 20:17:56','2020-03-13 20:17:58','operation.rb',-2,235,1,'2020-03-13 20:17:56','2020-03-13 21:17:56',NULL,NULL),(108,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T13:18:27.770-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for #<Sample:0x0000564614488d88>\\nDid you mean?  gem\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"RNA_Seq/WorkflowValidation:38:in `block (2 levels) in validate_concentrations\'\",\"RNA_Seq/WorkflowValidation:37:in `each\'\",\"RNA_Seq/WorkflowValidation:37:in `block in validate_concentrations\'\",\"RNA_Seq/WorkflowValidation:36:in `each\'\",\"RNA_Seq/WorkflowValidation:36:in `validate_concentrations\'\",\"(eval):39:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:18:29.284-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 20:18:27','2020-03-13 20:18:29','operation.rb',-2,235,1,'2020-03-13 20:18:27','2020-03-13 21:18:27',NULL,NULL),(109,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T13:20:20.495-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for #<Sample:0x0000564612001690>\\nDid you mean?  gem\",\"backtrace\":[\"/usr/local/bundle/gems/activemodel-4.2.11.1/lib/active_model/attribute_methods.rb:433:in `method_missing\'\",\"RNA_Seq/WorkflowValidation:38:in `block (2 levels) in validate_concentrations\'\",\"RNA_Seq/WorkflowValidation:37:in `each\'\",\"RNA_Seq/WorkflowValidation:37:in `block in validate_concentrations\'\",\"RNA_Seq/WorkflowValidation:36:in `each\'\",\"RNA_Seq/WorkflowValidation:36:in `validate_concentrations\'\",\"(eval):39:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:20:22.270-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 20:20:20','2020-03-13 20:20:22','operation.rb',-2,235,1,'2020-03-13 20:20:20','2020-03-13 21:20:20',NULL,NULL),(110,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T13:21:05.306-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>689</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:21:11.447-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584130871.431}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:21:12.147-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584130872.131}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:689) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(689)\'>689</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:21:15.472-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584130875.452}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:21:18.067-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584130878.043}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 689\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:21:20.353-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584130880.327}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[689,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:21:21.729-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584130881.702}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584130881.702}}]','2020-03-13 20:21:05','2020-03-13 20:21:21','operation.rb',-2,235,1,'2020-03-13 20:21:05','2020-03-13 21:21:05',NULL,NULL),(111,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T13:33:38.665-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>694</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:33:43.229-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131623.21}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:33:43.924-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131623.904}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:694) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(694)\'>694</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:33:48.556-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131628.531}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:33:50.126-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131630.101}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"68\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"55\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"52\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:33:52.349-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131632.31}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[694,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:33:53.697-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131633.667}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584131633.667}}]','2020-03-13 20:33:38','2020-03-13 20:33:53','operation.rb',-2,235,1,'2020-03-13 20:33:38','2020-03-13 21:33:38',NULL,NULL),(112,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T13:33:58.665-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>698</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:34:02.522-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131642.482}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:34:03.466-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131643.423}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:698) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(698)\'>698</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:34:06.658-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131646.646}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:34:07.885-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131647.873}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 698\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:34:10.520-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131650.504}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[698,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:34:11.727-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131651.71}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584131651.71}}]','2020-03-13 20:33:58','2020-03-13 20:34:11','operation.rb',-2,235,1,'2020-03-13 20:33:58','2020-03-13 21:33:58',NULL,NULL),(113,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-13T13:34:18.164-07:00\"},{\"operation\":\"error\",\"message\":\"There are no samples for this job.\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:31:in `validate_inputs\'\",\"(eval):27:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:34:21.666-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 20:34:18','2020-03-13 20:34:21','operation.rb',-2,235,1,'2020-03-13 20:34:18','2020-03-13 21:34:18',NULL,NULL),(114,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-13T13:35:16.264-07:00\"},{\"operation\":\"error\",\"message\":\"There are no samples for this job.\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:31:in `validate_inputs\'\",\"(eval):27:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:35:19.144-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 20:35:16','2020-03-13 20:35:19','operation.rb',-2,235,1,'2020-03-13 20:35:16','2020-03-13 21:35:16',NULL,NULL),(115,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T13:39:29.221-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>702</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:32.956-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131972.915}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:33.754-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131973.745}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:702) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(702)\'>702</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:37.030-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131977.018}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:37.948-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131977.934}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"76\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"59\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"98\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:40.500-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131980.484}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[702,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:41.607-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131981.59}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584131981.59}}]','2020-03-13 20:39:29','2020-03-13 20:39:41','operation.rb',-2,235,1,'2020-03-13 20:39:29','2020-03-13 21:39:29',NULL,NULL);
INSERT INTO `jobs` VALUES (116,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T13:39:46.425-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>706</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:49.742-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131989.716}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:50.465-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131990.437}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:706) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(706)\'>706</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:53.826-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131993.795}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:54.676-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131994.643}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"56\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"76\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"80\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:57.435-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131997.399}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[706,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:39:58.486-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584131998.45}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584131998.45}}]','2020-03-13 20:39:46','2020-03-13 20:39:58','operation.rb',-2,235,1,'2020-03-13 20:39:46','2020-03-13 21:39:46',NULL,NULL),(117,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T13:40:19.248-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>710</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:22.810-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132022.781}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:24.177-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132024.145}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:710) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(710)\'>710</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:27.264-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132027.23}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:28.528-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132028.492}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 710\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:30.989-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132030.95}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[710,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:32.054-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132032.013}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584132032.013}}]','2020-03-13 20:40:19','2020-03-13 20:40:32','operation.rb',-2,235,1,'2020-03-13 20:40:19','2020-03-13 21:40:19',NULL,NULL),(118,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-13T13:40:45.471-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>714</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:48.911-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132048.885}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":710,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:40:50.990-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132050.961}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:710) to working \\n                                plate (ID:714) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 710):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(714)\'>714</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:41:07.514-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132067.502}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[710,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:41:19.709-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132079.681}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:41:25.758-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132085.724}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[714,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T13:41:27.610-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584132087.575}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584132087.575}}]','2020-03-13 20:40:45','2020-03-13 20:41:27','operation.rb',-2,235,1,'2020-03-13 20:40:45','2020-03-13 21:40:45',NULL,NULL),(119,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T14:45:58.068-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>722</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:01.011-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135961.002}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":718,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:01.866-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135961.854}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:718) to working \\n                                plate (ID:722) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 718):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(722)\'>722</a>):\"},{\"table\":[[{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:06.385-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135966.369}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[718,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:07.814-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135967.796}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"62\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"59\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"66\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:10.143-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135970.122}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[722,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:11.455-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135971.433}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584135971.433}}]','2020-03-13 21:45:58','2020-03-13 21:46:11','operation.rb',-2,235,1,'2020-03-13 21:45:58','2020-03-13 22:45:58',NULL,NULL),(120,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T14:46:16.970-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>726</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:19.895-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135979.864}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":718,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:21.063-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135981.031}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:718) to working \\n                                plate (ID:726) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 718):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(726)\'>726</a>):\"},{\"table\":[[{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:24.228-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135984.192}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[718,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:25.125-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135985.088}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 726\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:27.970-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135987.93}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[726,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:29.399-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135989.391}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584135989.391}}]','2020-03-13 21:46:16','2020-03-13 21:46:29','operation.rb',-2,235,1,'2020-03-13 21:46:16','2020-03-13 22:46:16',NULL,NULL),(121,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-13T14:46:35.551-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>730</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:38.594-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584135998.576}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":726,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:40.284-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136000.264}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:726) to working \\n                                plate (ID:730) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 726):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(730)\'>730</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:43.358-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136003.333}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[726,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:48.299-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136008.268}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:50.752-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136010.72}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[730,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:51.912-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136011.88}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136011.88}}]','2020-03-13 21:46:35','2020-03-13 21:46:51','operation.rb',-2,235,1,'2020-03-13 21:46:35','2020-03-13 22:46:35',NULL,NULL),(122,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T14:46:56.511-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespaceBSZCuhyTJz1OMXE_tKAPEWCscJNPDwNQDxaUBCtor4w::Protocol::CONC_RANGE\",\"backtrace\":[\"(eval):38:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:46:58.024-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 21:46:56','2020-03-13 21:46:58','operation.rb',-2,235,1,'2020-03-13 21:46:56','2020-03-13 22:46:56',NULL,NULL),(123,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T14:48:06.570-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":726,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:48:10.259-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136090.239}},{\"operation\":\"error\",\"message\":\"undefined local variable or method `multi_plates\' for #<ExecutionNamespaceQR0rhdYSqMV4eOwdU8ZX6cebVAHga9P0Q7iTTCns8::Protocol:0x000056461412cbd0>\\nDid you mean?  multi_plate\",\"backtrace\":[\"(eval):52:in `block in main\'\",\"(eval):47:in `each\'\",\"(eval):47:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:48:10.355-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 21:48:06','2020-03-13 21:48:10','operation.rb',-2,235,1,'2020-03-13 21:48:06','2020-03-13 22:48:06',NULL,NULL),(124,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T14:48:41.251-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":726,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:48:43.863-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136123.838}},{\"operation\":\"display\",\"content\":[{\"title\":\"Rename Label Plate\"},{\"note\":\"Relabel plate 726 with 738\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:49:12.312-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136152.288}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 738\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:49:15.173-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136155.147}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[738,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:49:16.759-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136156.731}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136156.731}}]','2020-03-13 21:48:41','2020-03-13 21:49:16','operation.rb',-2,235,1,'2020-03-13 21:48:41','2020-03-13 22:48:41',NULL,NULL),(125,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T14:51:35.469-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for nil:NilClass\\nDid you mean?  gem\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:47:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:51:37.130-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 21:51:35','2020-03-13 21:51:37','operation.rb',-2,235,1,'2020-03-13 21:51:35','2020-03-13 22:51:35',NULL,NULL),(126,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T14:53:03.917-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>742</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:06.759-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136386.742}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":718,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:07.761-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136387.743}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:742) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(742)\'>742</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:13.628-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136393.604}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:718) to working \\n                                plate (ID:742) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 718):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(742)\'>742</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:17.434-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136397.404}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:742) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(742)\'>742</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:21.318-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136401.282}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[718,\"Total RNA 96 Well Plate\",\"Bench\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:23.886-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136403.85}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"60\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"63\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"64\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"93\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"53\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"87\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:27.023-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136406.982}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[742,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:29.167-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136409.158}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136409.158}}]','2020-03-13 21:53:03','2020-03-13 21:53:29','operation.rb',-2,235,1,'2020-03-13 21:53:03','2020-03-13 22:53:03',NULL,NULL),(127,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T14:53:37.193-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>749</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:40.629-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136420.609}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:41.477-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136421.456}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:749) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(749)\'>749</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:44.300-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136424.274}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:45.892-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136425.864}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 749\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:48.302-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136428.271}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[749,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:49.355-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136429.323}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136429.323}}]','2020-03-13 21:53:37','2020-03-13 21:53:49','operation.rb',-2,235,1,'2020-03-13 21:53:37','2020-03-13 22:53:37',NULL,NULL),(128,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T14:53:55.249-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>753</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:59.110-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136439.102}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":718,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:53:59.922-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136439.913}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:718) to working \\n                                plate (ID:753) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 718):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(753)\'>753</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:02.802-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136442.79}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:753) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(753)\'>753</a>):\"},{\"table\":[[{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:06.878-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136446.86}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[718,\"Total RNA 96 Well Plate\",\"Bench\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:08.054-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136448.036}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 753\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:10.941-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136450.919}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[753,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:12.658-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136452.633}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136452.633}}]','2020-03-13 21:53:55','2020-03-13 21:54:12','operation.rb',-2,235,1,'2020-03-13 21:53:55','2020-03-13 22:53:55',NULL,NULL),(129,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-13T14:54:17.329-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>757</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:20.536-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136460.505}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":749,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":753,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:21.702-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136461.668}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:749) to working \\n                                plate (ID:757) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 749):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(757)\'>757</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:26.825-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136466.785}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:753) to working \\n                                plate (ID:757) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 753):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(757)\'>757</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:31.872-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136471.86}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[749,\"96 Well Sample Plate\",\"Freezer\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[753,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:33.982-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136473.967}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:36.760-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136476.742}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[757,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:39.844-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136479.822}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136479.822}}]','2020-03-13 21:54:17','2020-03-13 21:54:39','operation.rb',-2,235,1,'2020-03-13 21:54:17','2020-03-13 22:54:17',NULL,NULL),(130,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T14:54:49.161-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":749,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":753,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:52.334-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136492.3}},{\"operation\":\"display\",\"content\":[{\"title\":\"Rename Plate\"},{\"note\":\"Relabel plate 749 with 764\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:54:56.399-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136496.359}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 764\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:55:00.193-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136500.184}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[764,\"96 Well Sample Plate\",\"Freezer\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[764,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:56:30.645-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136590.634}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136590.634}}]','2020-03-13 21:54:49','2020-03-13 21:56:30','operation.rb',-2,235,1,'2020-03-13 21:54:49','2020-03-13 22:54:49',NULL,NULL),(131,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T14:56:58.071-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":749,\"location\":\"deleted\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":753,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:57:21.767-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136641.733}},{\"operation\":\"display\",\"content\":[{\"title\":\"Rename Plate\"},{\"note\":\"Relabel plate 749 with 771\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:57:22.959-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136642.924}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 771\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:57:26.378-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136646.34}},{\"operation\":\"error\",\"message\":\"undefined method `collection\' for #<Array:0x00005646103820c8>\\nDid you mean?  collect\\n               collect!\",\"backtrace\":[\"Collection_Management/CollectionActions:48:in `block in table_of_object_locations\'\",\"Collection_Management/CollectionActions:47:in `each\'\",\"Collection_Management/CollectionActions:47:in `table_of_object_locations\'\",\"/aquarium/lib/krill/show_block.rb:303:in `method_missing\'\",\"Collection_Management/CollectionActions:34:in `block in store_output_collections\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionActions:28:in `store_output_collections\'\",\"(eval):65:in `main\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:57:26.439-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 21:56:58','2020-03-13 21:57:26','operation.rb',-2,235,1,'2020-03-13 21:56:58','2020-03-13 22:56:58',NULL,NULL),(132,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T14:58:20.532-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":749,\"location\":\"deleted\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":753,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:58:23.641-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136703.605}},{\"operation\":\"display\",\"content\":[{\"title\":\"Rename Plate\"},{\"note\":\"Relabel plate 749 with 778\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:58:24.583-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136704.546}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 778\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:58:26.786-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136706.745}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[778,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:58:27.765-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136707.724}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136707.724}}]','2020-03-13 21:58:20','2020-03-13 21:58:27','operation.rb',-2,235,1,'2020-03-13 21:58:20','2020-03-13 22:58:20',NULL,NULL),(133,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T14:59:18.302-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>785</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:20.770-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136760.738}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":718,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:21.417-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136761.384}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:718) to working \\n                                plate (ID:785) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 718):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(785)\'>785</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:24.561-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136764.522}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:785) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(785)\'>785</a>):\"},{\"table\":[[{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:27.086-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136767.045}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[718,\"Total RNA 96 Well Plate\",\"Bench\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:38.866-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136778.844}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"51\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"70\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"81\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:41.740-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136781.718}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[785,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:44.092-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136784.066}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136784.066}}]','2020-03-13 21:59:18','2020-03-13 21:59:44','operation.rb',-2,235,1,'2020-03-13 21:59:18','2020-03-13 22:59:18',NULL,NULL),(134,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-13T14:59:49.112-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>789</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:52.446-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136792.412}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:53.720-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136793.683}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:789) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(789)\'>789</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:56.488-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136796.449}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:57.475-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136797.434}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"93\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"58\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"96\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T14:59:59.791-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136799.782}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[789,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:00.798-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136800.786}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136800.786}}]','2020-03-13 21:59:49','2020-03-13 22:00:00','operation.rb',-2,235,1,'2020-03-13 21:59:49','2020-03-13 22:59:49',NULL,NULL),(135,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T15:00:07.358-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>793</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:10.031-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136810.01}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":718,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:10.987-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136810.966}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:718) to working \\n                                plate (ID:793) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 718):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(793)\'>793</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"C3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:14.268-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136814.242}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:793) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(793)\'>793</a>):\"},{\"table\":[[{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:16.899-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136816.87}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[718,\"Total RNA 96 Well Plate\",\"Bench\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:18.211-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136818.182}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 793\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:20.845-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136820.811}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[793,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:22.167-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136822.133}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136822.133}}]','2020-03-13 22:00:07','2020-03-13 22:00:22','operation.rb',-2,235,1,'2020-03-13 22:00:07','2020-03-13 23:00:07',NULL,NULL),(136,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-13T15:00:28.098-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>797</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:31.235-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136831.223}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:32.562-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136832.55}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:797) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(797)\'>797</a>):\"},{\"table\":[[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:37.793-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136837.773}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:39.254-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136839.234}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 797\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:41.591-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136841.568}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[797,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:43.173-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136843.148}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136843.148}}]','2020-03-13 22:00:28','2020-03-13 22:00:43','operation.rb',-2,235,1,'2020-03-13 22:00:28','2020-03-13 23:00:28',NULL,NULL),(137,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-13T15:00:49.537-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>801</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:53.514-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136853.478}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":793,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:00:54.304-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136854.265}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:793) to working \\n                                plate (ID:801) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 793):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(801)\'>801</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:09.171-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136869.15}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[793,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:10.387-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136870.364}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:12.607-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136872.583}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[801,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:14.162-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136874.137}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136874.137}}]','2020-03-13 22:00:49','2020-03-13 22:01:14','operation.rb',-2,235,1,'2020-03-13 22:00:49','2020-03-13 23:00:49',NULL,NULL),(138,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-13T15:01:19.185-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>805</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:23.653-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136883.616}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":797,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:24.816-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136884.778}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:797) to working \\n                                plate (ID:805) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 797):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(805)\'>805</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:40.341-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136900.32}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[797,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:42.008-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136901.985}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:44.353-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136904.327}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[805,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:01:45.735-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136905.708}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584136905.708}}]','2020-03-13 22:01:19','2020-03-13 22:01:45','operation.rb',-2,235,1,'2020-03-13 22:01:19','2020-03-13 23:01:19',NULL,NULL),(139,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T15:02:00.144-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":793,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":797,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:02:05.726-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584136925.71}},{\"operation\":\"display\",\"content\":[{\"title\":\"Rename Plate\"},{\"note\":\"Relabel plate 793 with 809\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:03:32.693-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 22:02:00','2020-03-13 22:03:32','operation.rb',-2,235,1,'2020-03-13 22:02:00','2020-03-13 23:02:00',NULL,NULL),(140,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T15:03:40.975-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":793,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":797,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:03:44.269-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584137024.242}},{\"operation\":\"display\",\"content\":[{\"title\":\"Rename Plate\"},{\"note\":\"Relabel plate 793 with 816\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:05:21.507-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 22:03:40','2020-03-13 22:05:21','operation.rb',-2,235,1,'2020-03-13 22:03:40','2020-03-13 23:03:40',NULL,NULL),(141,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T15:05:32.592-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":793,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":797,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:05:36.076-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584137136.059}},{\"operation\":\"display\",\"content\":[{\"title\":\"Rename Plate\"},{\"note\":\"Relabel plate 793 with 823\"}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:05:37.125-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584137137.107}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 823\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:06:09.091-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 22:05:32','2020-03-13 22:06:09','operation.rb',-2,235,1,'2020-03-13 22:05:32','2020-03-13 23:05:32',NULL,NULL),(142,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-13T15:06:16.779-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespaceaYMjDIrntmA0qAIs_WJMO6aarb5MizJCQHySdqyA::CollectionTransfer::C_TYPE\",\"backtrace\":[\"Collection_Management/CollectionTransfer:90:in `block in get_new_plate\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionTransfer:88:in `get_new_plate\'\",\"(eval):43:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-13T15:06:18.319-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-13 22:06:16','2020-03-13 22:06:18','operation.rb',-2,235,1,'2020-03-13 22:06:16','2020-03-13 23:06:16',NULL,NULL),(143,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-16T17:47:46.605-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>928</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:47:50.747-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406070.737}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:47:52.174-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406072.165}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:928) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(928)\'>928</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:03.372-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406083.34}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:928) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(928)\'>928</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:08.856-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406088.827}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:18.584-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406098.542}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"95\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"66\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"71\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"88\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"71\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"71\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"70\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"99\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"54\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"60\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"51\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"55\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"95\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"59\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"67\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"97\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:22.539-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406102.528}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[928,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:23.985-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406103.97}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584406103.97}}]','2020-03-17 00:47:46','2020-03-17 00:48:24','operation.rb',-2,235,1,'2020-03-17 00:47:46','2020-03-17 01:47:46',NULL,NULL),(144,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-16T17:48:34.389-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>950</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:40.666-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406120.635}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:41.479-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406121.449}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:950) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(950)\'>950</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:45.018-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406124.984}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:950) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(950)\'>950</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:48.207-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406128.168}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:50.561-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406130.517}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 950\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:53.948-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406133.935}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[950,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:48:58.027-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406138.011}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584406138.011}}]','2020-03-17 00:48:34','2020-03-17 00:48:58','operation.rb',-2,235,1,'2020-03-17 00:48:34','2020-03-17 01:48:34',NULL,NULL),(145,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T17:52:14.538-07:00\"},{\"operation\":\"error\",\"message\":\"Item 950 doesn\'t have a valid C-DNA QC\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:48:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:52:15.842-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 00:52:14','2020-03-17 00:52:15','operation.rb',-2,235,1,'2020-03-17 00:52:14','2020-03-17 01:52:14',NULL,NULL),(146,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T17:53:00.582-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>972</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:53:04.768-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406384.744}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":950,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:53:05.921-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406385.897}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:950) to working \\n                                plate (ID:972) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 950):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(972)\'>972</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:53:09.191-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406389.162}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[950,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:53:22.516-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406402.505}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:53:31.112-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406411.091}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[972,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:53:33.316-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406413.294}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584406413.294}}]','2020-03-17 00:53:00','2020-03-17 00:53:33','operation.rb',-2,235,1,'2020-03-17 00:53:00','2020-03-17 01:53:00',NULL,NULL),(147,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T17:53:38.213-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespaceJkAgy79OsMJDdO_57R_KLkoVNu8SjikZiQJhVYgEo::CollectionTransfer::C_TYPE\",\"backtrace\":[\"Collection_Management/CollectionTransfer:90:in `block in get_new_plate\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionTransfer:88:in `get_new_plate\'\",\"(eval):43:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:53:40.264-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 00:53:38','2020-03-17 00:53:40','operation.rb',-2,235,1,'2020-03-17 00:53:38','2020-03-17 01:53:38',NULL,NULL),(148,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T17:54:19.615-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>988</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:54:29.819-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406469.801}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":950,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:54:44.632-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406484.597}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:950) to working \\n                                plate (ID:988) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 950):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(988)\'>988</a>):\"},{\"table\":[[{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:54:53.250-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406493.239}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[950,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:55:07.116-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406507.088}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:55:11.399-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406511.366}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[988,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:56:08.075-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584406568.045}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584406568.045}}]','2020-03-17 00:54:19','2020-03-17 00:56:08','operation.rb',-2,235,1,'2020-03-17 00:54:19','2020-03-17 01:54:19',NULL,NULL),(149,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T17:57:13.663-07:00\"},{\"operation\":\"error\",\"message\":\"uninitialized constant ExecutionNamespacemzVTWnfQrfJdBD_cwQceePKJO337iAywlORnVBmteE::CollectionTransfer::C_TYPE\",\"backtrace\":[\"Collection_Management/CollectionTransfer:90:in `block in get_new_plate\'\",\"/aquarium/lib/krill/show_block.rb:294:in `instance_eval\'\",\"/aquarium/lib/krill/show_block.rb:294:in `run\'\",\"/aquarium/lib/krill/base.rb:19:in `show\'\",\"Collection_Management/CollectionTransfer:88:in `get_new_plate\'\",\"(eval):43:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T17:57:18.059-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 00:57:13','2020-03-17 00:57:18','operation.rb',-2,235,1,'2020-03-17 00:57:13','2020-03-17 01:57:13',NULL,NULL),(150,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:05:25.834-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b><a href=\'/object_types/4\' class=\'aquarium-item\' id=\'4\'>4</a></b> and lable ID: <b>997</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:05:50.913-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:05:25','2020-03-17 01:05:50','operation.rb',-2,235,1,'2020-03-17 01:05:25','2020-03-17 02:05:25',NULL,NULL),(151,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:06:20.138-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>998</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:06:37.390-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407197.363}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":950,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:06:38.584-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407198.554}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:950) to working \\n                                plate (ID:998) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 950):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(998)\'>998</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:06:42.293-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407202.26}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:950) to working \\n                                plate (ID:998) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 950):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(998)\'>998</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:06:45.788-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407205.749}},{\"operation\":\"error\",\"message\":\"undefined local variable or method `multi_plates\' for #<ExecutionNamespaceDYvMY9xHybKquOGpzT7AtzzkPnlutunYDUD0Hkz1ofg::Protocol:0x00005570c2b61678>\\nDid you mean?  multi_plate\",\"backtrace\":[\"(eval):60:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:06:45.823-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:06:20','2020-03-17 01:06:45','operation.rb',-2,235,1,'2020-03-17 01:06:20','2020-03-17 02:06:20',NULL,NULL),(152,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:17:15.195-07:00\"},{\"operation\":\"error\",\"message\":\"undefined method `get\' for nil:NilClass\\nDid you mean?  gem\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:47:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:17:16.874-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:17:15','2020-03-17 01:17:16','operation.rb',-2,235,1,'2020-03-17 01:17:15','2020-03-17 02:17:15',NULL,NULL),(153,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:17:50.553-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1020</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:18:29.765-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407909.743}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":950,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:18:31.242-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407911.219}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:950) to working \\n                                plate (ID:1020) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 950):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1020)\'>1020</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:19:21.135-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407961.124}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:950) to working \\n                                plate (ID:1020) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 950):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1020)\'>1020</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:19:35.716-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407975.689}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1020,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:19:37.420-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407977.391}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 1020\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:19:42.200-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407982.164}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1020,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:19:47.476-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584407987.436}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584407987.436}}]','2020-03-17 01:17:50','2020-03-17 01:19:47','operation.rb',-2,235,1,'2020-03-17 01:17:50','2020-03-17 02:17:50',NULL,NULL),(154,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-16T18:21:48.043-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1042</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:21:53.036-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408113.024}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:21:54.983-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408114.967}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:1042) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1042)\'>1042</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:21:58.369-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408118.351}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:22:00.816-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408120.795}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"64\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"57\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"63\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"82\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"90\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"73\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:22:03.767-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408123.742}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1042,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:22:05.380-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408125.354}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584408125.354}}]','2020-03-17 01:21:48','2020-03-17 01:22:05','operation.rb',-2,235,1,'2020-03-17 01:21:48','2020-03-17 02:21:48',NULL,NULL),(155,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-16T18:22:22.209-07:00\"},{\"operation\":\"error\",\"message\":\"Sample 1 has been included multiple times in this job\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:27:in `validate_inputs\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:22:24.582-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:22:22','2020-03-17 01:22:24','operation.rb',-2,235,1,'2020-03-17 01:22:22','2020-03-17 02:22:22',NULL,NULL),(156,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-16T18:24:14.710-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1050</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:24:19.546-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408259.538}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:24:20.487-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408260.477}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:1050) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1050)\'>1050</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:24:23.861-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408263.847}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:1050) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1050)\'>1050</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:24:27.038-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408267.02}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:24:28.732-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408268.712}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 1050\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:24:31.358-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408271.336}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1050,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:24:33.208-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408273.183}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584408273.183}}]','2020-03-17 01:24:14','2020-03-17 01:24:33','operation.rb',-2,235,1,'2020-03-17 01:24:14','2020-03-17 02:24:14',NULL,NULL),(157,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-16T18:25:53.593-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1072</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:25:58.762-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408358.743}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:01.822-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408361.799}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:1072) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1072)\'>1072</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:08.813-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408368.782}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:1072) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1072)\'>1072</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:12.614-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408372.578}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:14.792-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408374.755}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"79\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"83\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"91\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"87\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"67\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"52\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"51\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"76\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"83\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"96\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"53\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"86\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"99\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"87\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"84\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"100\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"66\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"73\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"78\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"54\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"96\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:18.257-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408378.25}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1072,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:20.494-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408380.483}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584408380.483}}]','2020-03-17 01:25:53','2020-03-17 01:26:20','operation.rb',-2,235,1,'2020-03-17 01:25:53','2020-03-17 02:25:53',NULL,NULL),(158,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-16T18:26:30.144-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1094</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:33.182-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408393.158}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:34.637-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408394.611}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:1094) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1094)\'>1094</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:37.748-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408397.72}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:38.916-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408398.882}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 1094\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:41.488-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408401.454}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1094,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:26:43.220-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408403.184}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584408403.184}}]','2020-03-17 01:26:30','2020-03-17 01:26:43','operation.rb',-2,235,1,'2020-03-17 01:26:30','2020-03-17 02:26:30',NULL,NULL),(159,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T18:26:52.791-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1102</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:27:14.390-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408434.353}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1050,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:27:15.394-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408435.355}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1050) to working \\n                                plate (ID:1102) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1050):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1102)\'>1102</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:27:19.206-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408439.196}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1050) to working \\n                                plate (ID:1102) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1050):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1102)\'>1102</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:27:22.910-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408442.896}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1050,\"96 Well Sample Plate\",\"Freezer\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1050,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:27:24.626-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408444.61}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:27:27.206-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408447.188}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1102,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:27:28.858-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408448.838}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584408448.838}}]','2020-03-17 01:26:52','2020-03-17 01:27:28','operation.rb',-2,235,1,'2020-03-17 01:26:52','2020-03-17 02:26:52',NULL,NULL),(160,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:28:04.952-07:00\"},{\"operation\":\"error\",\"message\":\"Item 1094 doesn\'t have a valid C-DNA QC\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:48:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:28:06.681-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:28:04','2020-03-17 01:28:06','operation.rb',-2,235,1,'2020-03-17 01:28:04','2020-03-17 02:28:04',NULL,NULL),(161,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T18:28:43.586-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1124</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:28:56.808-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408536.79}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1094,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:28:57.571-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408537.553}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1094) to working \\n                                plate (ID:1124) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1094):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1124)\'>1124</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:29:01.174-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408541.152}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1094,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:29:03.643-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408543.617}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:29:07.846-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408547.816}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1124,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:29:27.946-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408567.926}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584408567.926}}]','2020-03-17 01:28:43','2020-03-17 01:29:27','operation.rb',-2,235,1,'2020-03-17 01:28:43','2020-03-17 02:28:43',NULL,NULL),(162,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:29:41.647-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1132</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:30:23.032-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408623.018}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1094,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":1050,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:30:38.653-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408638.622}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1094) to working \\n                                plate (ID:1132) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1094):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1132)\'>1132</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:30:52.151-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408652.138}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1050) to working \\n                                plate (ID:1132) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1050):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1132)\'>1132</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:31:01.085-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408661.062}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1132,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:31:04.393-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408664.367}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 1132\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:31:08.295-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408668.263}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1132,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:31:09.644-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584408669.611}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584408669.611}}]','2020-03-17 01:29:41','2020-03-17 01:31:09','operation.rb',-2,235,1,'2020-03-17 01:29:41','2020-03-17 02:29:41',NULL,NULL),(163,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:39:21.862-07:00\"},{\"operation\":\"error\",\"message\":\"Sample 1 has been included multiple times in this job\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:27:in `validate_inputs\'\",\"(eval):35:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:39:24.071-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:39:21','2020-03-17 01:39:24','operation.rb',-2,235,1,'2020-03-17 01:39:21','2020-03-17 02:39:21',NULL,NULL),(164,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-16T18:45:38.697-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1154</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:45:43.681-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409543.631}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:45:44.488-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409544.436}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:1154) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1154)\'>1154</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:45:48.404-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409548.385}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:45:49.896-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409549.885}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"82\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"89\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"93\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"67\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"74\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"96\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"51\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"55\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"100\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"73\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"80\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"63\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"92\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"89\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:45:52.613-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409552.597}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1154,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:45:54.014-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409553.996}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584409553.996}}]','2020-03-17 01:45:38','2020-03-17 01:45:54','operation.rb',-2,235,1,'2020-03-17 01:45:38','2020-03-17 02:45:38',NULL,NULL),(165,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-16T18:46:00.040-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1169</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:46:13.713-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409573.67}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:46:30.329-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409590.304}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:1169) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1169)\'>1169</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:46:35.737-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409595.708}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:1169) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1169)\'>1169</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:46:39.790-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409599.756}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:46:42.882-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409602.845}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 1169\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:46:46.146-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409606.103}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1169,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:46:47.518-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409607.51}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584409607.51}}]','2020-03-17 01:46:00','2020-03-17 01:46:47','operation.rb',-2,235,1,'2020-03-17 01:46:00','2020-03-17 02:46:00',NULL,NULL),(166,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":2},\"time\":\"2020-03-16T18:47:48.268-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Lable Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1191</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:47:51.907-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409671.895}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:47:52.724-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409672.711}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:1191) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1191)\'>1191</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:47:55.777-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409675.76}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:48:02.535-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409682.509}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will be given a random concentration from 50 to 100 ng/ul\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"67\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"76\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"78\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"98\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"70\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"53\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"99\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:48:10.763-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409690.728}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1191,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:48:12.828-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409692.792}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584409692.792}}]','2020-03-17 01:47:48','2020-03-17 01:48:12','operation.rb',-2,235,1,'2020-03-17 01:47:48','2020-03-17 02:47:48',NULL,NULL),(167,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:49:28.391-07:00\"},{\"operation\":\"error\",\"message\":\"Item 1169 doesn\'t have a valid C-DNA QC\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:48:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:49:29.898-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:49:28','2020-03-17 01:49:29','operation.rb',-2,235,1,'2020-03-17 01:49:28','2020-03-17 02:49:28',NULL,NULL),(168,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T18:50:26.424-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1199</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:50:56.076-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409856.059}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1169,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:01.626-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409861.601}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1169) to working \\n                                plate (ID:1199) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1169):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1199)\'>1199</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:05.724-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409865.694}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1169,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:07.361-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409867.329}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:10.620-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409870.584}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1199,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:12.486-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409872.448}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584409872.448}}]','2020-03-17 01:50:26','2020-03-17 01:51:12','operation.rb',-2,235,1,'2020-03-17 01:50:26','2020-03-17 02:50:26',NULL,NULL),(169,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:51:26.968-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1214</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:36.453-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409896.424}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1169,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:37.553-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409897.521}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1169) to working \\n                                plate (ID:1214) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1169):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1214)\'>1214</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:41.455-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409901.418}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1169) to working \\n                                plate (ID:1214) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1169):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1214)\'>1214</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:44.648-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409904.608}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1214,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:46.302-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409906.26}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 1214\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:49.636-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409909.625}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1214,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:51:50.981-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584409910.968}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584409910.968}}]','2020-03-17 01:51:26','2020-03-17 01:51:51','operation.rb',-2,235,1,'2020-03-17 01:51:26','2020-03-17 02:51:26',NULL,NULL),(170,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:53:30.947-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1236</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:35.251-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410015.223}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1169,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:35.963-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410015.931}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1169) to working \\n                                plate (ID:1236) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1169):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1236)\'>1236</a>):\"},{\"table\":[[{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:39.158-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410019.124}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1236,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:40.098-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410020.063}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 1236\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:43.468-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410023.429}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1236,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:45.193-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410025.152}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584410025.152}}]','2020-03-17 01:53:30','2020-03-17 01:53:45','operation.rb',-2,235,1,'2020-03-17 01:53:30','2020-03-17 02:53:30',NULL,NULL),(171,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T18:53:50.583-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1244</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:53.446-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410033.431}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1169,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:54.600-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410034.584}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1169) to working \\n                                plate (ID:1244) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1169):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1244)\'>1244</a>):\"},{\"table\":[[{\"content\":\"B3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:58.745-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410038.724}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1169,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:53:59.670-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410039.648}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:54:01.993-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410041.967}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1244,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:54:02.832-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410042.806}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584410042.806}}]','2020-03-17 01:53:50','2020-03-17 01:54:02','operation.rb',-2,235,1,'2020-03-17 01:53:50','2020-03-17 02:53:50',NULL,NULL),(172,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-16T18:56:20.754-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1252</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:56:24.309-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410184.293}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":2,\"location\":\"Freezer\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:56:25.015-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410184.996}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:2) to working \\n                                plate (ID:1252) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 2):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1252)\'>1252</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:56:28.053-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410188.033}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[2,\"Total RNA 96 Well Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:56:29.869-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410189.846}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 1252\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:56:32.756-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410192.73}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1252,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:56:33.631-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410193.598}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584410193.598}}]','2020-03-17 01:56:20','2020-03-17 01:56:33','operation.rb',-2,235,1,'2020-03-17 01:56:20','2020-03-17 02:56:20',NULL,NULL),(173,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:56:42.135-07:00\"},{\"operation\":\"error\",\"message\":\"Item 1252 doesn\'t have a valid C-DNA QC\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:48:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:56:43.517-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:56:42','2020-03-17 01:56:43','operation.rb',-2,235,1,'2020-03-17 01:56:42','2020-03-17 02:56:42',NULL,NULL),(174,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:57:02.228-07:00\"},{\"operation\":\"error\",\"message\":\"Item 1252 doesn\'t have a valid C-DNA QC\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:48:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:57:03.793-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:57:02','2020-03-17 01:57:03','operation.rb',-2,235,1,'2020-03-17 01:57:02','2020-03-17 02:57:02',NULL,NULL),(175,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":3},\"time\":\"2020-03-16T18:57:37.712-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1260</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:57:42.613-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410262.575}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":160,\"location\":\"Bench\",\"name\":\"Total RNA 96 Well Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:57:43.825-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410263.788}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:160) to working \\n                                plate (ID:1260) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 160):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1260)\'>1260</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"E1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"G1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"H1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"C2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"D2\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"E2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"F2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:57:46.652-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410266.645}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[160,\"Total RNA 96 Well Plate\",\"Bench\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:57:47.420-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410267.411}},{\"operation\":\"display\",\"content\":[{\"title\":\"Run RNA-Prep\"},{\"note\":\"Run typical RNA-Prep Protocol with plate 1260\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:57:49.529-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410269.516}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1260,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:57:50.334-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410270.322}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584410270.322}}]','2020-03-17 01:57:37','2020-03-17 01:57:50','operation.rb',-2,235,1,'2020-03-17 01:57:37','2020-03-17 02:57:37',NULL,NULL),(176,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:58:28.303-07:00\"},{\"operation\":\"error\",\"message\":\"Item 1252 doesn\'t have a valid C-DNA QC\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:48:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:58:30.362-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:58:28','2020-03-17 01:58:30','operation.rb',-2,235,1,'2020-03-17 01:58:28','2020-03-17 02:58:28',NULL,NULL),(177,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T18:58:48.392-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1275</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:58:51.343-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410331.33}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1252,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:58:52.068-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410332.055}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1252) to working \\n                                plate (ID:1275) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1252):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1275)\'>1275</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:58:55.641-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410335.623}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1252,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:58:57.001-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410336.981}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:07.286-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410347.255}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1275,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:08.734-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410348.697}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584410348.697}}]','2020-03-17 01:58:48','2020-03-17 01:59:08','operation.rb',-2,235,1,'2020-03-17 01:58:48','2020-03-17 02:58:48',NULL,NULL),(178,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:59:14.145-07:00\"},{\"operation\":\"error\",\"message\":\"Item 1260 doesn\'t have a valid C-DNA QC\",\"backtrace\":[\"RNA_Seq/WorkflowValidation:48:in `block (2 levels) in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:46:in `each\'\",\"RNA_Seq/WorkflowValidation:46:in `block in validate_cdna_qc\'\",\"RNA_Seq/WorkflowValidation:45:in `each\'\",\"RNA_Seq/WorkflowValidation:45:in `validate_cdna_qc\'\",\"(eval):37:in `main\'\",\"/aquarium/lib/krill/protocol_sandbox.rb:65:in `execute\'\",\"/aquarium/lib/krill/threaded_manager.rb:40:in `block in start_thread\'\"]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:15.854-07:00\",\"inputs\":{}},{\"operation\":\"aborted\",\"rval\":{}}]','2020-03-17 01:59:14','2020-03-17 01:59:15','operation.rb',-2,235,1,'2020-03-17 01:59:14','2020-03-17 02:59:14',NULL,NULL),(179,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":4},\"time\":\"2020-03-16T18:59:31.749-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1283</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:35.484-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410375.454}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1260,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:36.683-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410376.652}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1260) to working \\n                                plate (ID:1283) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1260):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1283)\'>1283</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:39.623-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410379.589}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1260,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:41.587-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410381.549}},{\"operation\":\"display\",\"content\":[{\"title\":\"Perform QC Measurements\"},{\"note\":\"Please Attach excel files\"},{\"note\":\"For testing purposes each sample will assume to pass\"},{\"note\":\"This will eventually come from a CSV file\"},{\"table\":[[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"Pass\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:43.929-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410383.889}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1283,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:44.810-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410384.77}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584410384.77}}]','2020-03-17 01:59:31','2020-03-17 01:59:44','operation.rb',-2,235,1,'2020-03-17 01:59:31','2020-03-17 02:59:31',NULL,NULL),(180,'1',NULL,'[{\"operation\":\"initialize\",\"arguments\":{\"operation_type_id\":5},\"time\":\"2020-03-16T18:59:48.080-07:00\"},{\"operation\":\"display\",\"content\":[{\"title\":\"Get and Label Working Plate\"},{\"note\":\"Get a <b>96 Well Sample Plate</b> and lable ID: <b>1298</b>\"}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:52.852-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410392.838}},{\"operation\":\"display\",\"content\":[{\"title\":\"Gather the Following Additional Item(s)\"},{\"take\":{\"id\":1252,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}},{\"take\":{\"id\":1260,\"location\":\"Freezer\",\"name\":\"96 Well Sample Plate\"}}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:55.154-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410395.137}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1252) to working \\n                                plate (ID:1298) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1252):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1298)\'>1298</a>):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":8,\"class\":\"td-empty-slot\"},{\"content\":9,\"class\":\"td-empty-slot\"},{\"content\":10,\"class\":\"td-empty-slot\"},{\"content\":11,\"class\":\"td-empty-slot\"},{\"content\":12,\"class\":\"td-empty-slot\"}],[{\"content\":13,\"class\":\"td-empty-slot\"},{\"content\":14,\"class\":\"td-empty-slot\"},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T18:59:58.526-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410398.504}},{\"operation\":\"display\",\"content\":[{\"title\":\"Transfer from Stock Plate to Working Plate\"},{\"note\":\"Please transfer 20 ul from stock plate (ID:1260) to working \\n                                plate (ID:1298) per tables below\"},{\"note\":\"Separator\"},{\"note\":\"Stock Plate (ID: 1260):\"},{\"table\":[[{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":15,\"class\":\"td-empty-slot\"},{\"content\":16,\"class\":\"td-empty-slot\"},{\"content\":17,\"class\":\"td-empty-slot\"},{\"content\":18,\"class\":\"td-empty-slot\"},{\"content\":19,\"class\":\"td-empty-slot\"},{\"content\":20,\"class\":\"td-empty-slot\"},{\"content\":21,\"class\":\"td-empty-slot\"},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]},{\"note\":\"Working Plate (ID: <a href=\'#\' onclick=\'open_item_ui(1298)\'>1298</a>):\"},{\"table\":[[{\"content\":1,\"class\":\"td-empty-slot\"},{\"content\":2,\"class\":\"td-empty-slot\"},{\"content\":3,\"class\":\"td-empty-slot\"},{\"content\":4,\"class\":\"td-empty-slot\"},{\"content\":5,\"class\":\"td-empty-slot\"},{\"content\":6,\"class\":\"td-empty-slot\"},{\"content\":7,\"class\":\"td-empty-slot\"},{\"content\":\"A1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B1\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"B2\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A3\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"A4\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A5\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A6\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A7\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A8\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A9\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A10\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A11\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"A12\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T19:00:02.452-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410402.425}},{\"operation\":\"display\",\"content\":[{\"title\":\"Trash the following items\"},{\"table\":[[\"Item\",\"Waste Container\"],[1298,\"Biohazard Waste\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T19:00:03.756-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410403.728}},{\"operation\":\"display\",\"content\":[{\"title\":\"Do the Normalization Pooling Steps\"},{\"note\":\"Run typical Normalization Pooling protocol with plate 1298\"},{\"table\":[[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true}],[{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":\"\",\"class\":\"td-filled-slot\",\"check\":true},{\"content\":22,\"class\":\"td-empty-slot\"},{\"content\":23,\"class\":\"td-empty-slot\"},{\"content\":24,\"class\":\"td-empty-slot\"}],[{\"content\":25,\"class\":\"td-empty-slot\"},{\"content\":26,\"class\":\"td-empty-slot\"},{\"content\":27,\"class\":\"td-empty-slot\"},{\"content\":28,\"class\":\"td-empty-slot\"},{\"content\":29,\"class\":\"td-empty-slot\"},{\"content\":30,\"class\":\"td-empty-slot\"},{\"content\":31,\"class\":\"td-empty-slot\"},{\"content\":32,\"class\":\"td-empty-slot\"},{\"content\":33,\"class\":\"td-empty-slot\"},{\"content\":34,\"class\":\"td-empty-slot\"},{\"content\":35,\"class\":\"td-empty-slot\"},{\"content\":36,\"class\":\"td-empty-slot\"}],[{\"content\":37,\"class\":\"td-empty-slot\"},{\"content\":38,\"class\":\"td-empty-slot\"},{\"content\":39,\"class\":\"td-empty-slot\"},{\"content\":40,\"class\":\"td-empty-slot\"},{\"content\":41,\"class\":\"td-empty-slot\"},{\"content\":42,\"class\":\"td-empty-slot\"},{\"content\":43,\"class\":\"td-empty-slot\"},{\"content\":44,\"class\":\"td-empty-slot\"},{\"content\":45,\"class\":\"td-empty-slot\"},{\"content\":46,\"class\":\"td-empty-slot\"},{\"content\":47,\"class\":\"td-empty-slot\"},{\"content\":48,\"class\":\"td-empty-slot\"}],[{\"content\":49,\"class\":\"td-empty-slot\"},{\"content\":50,\"class\":\"td-empty-slot\"},{\"content\":51,\"class\":\"td-empty-slot\"},{\"content\":52,\"class\":\"td-empty-slot\"},{\"content\":53,\"class\":\"td-empty-slot\"},{\"content\":54,\"class\":\"td-empty-slot\"},{\"content\":55,\"class\":\"td-empty-slot\"},{\"content\":56,\"class\":\"td-empty-slot\"},{\"content\":57,\"class\":\"td-empty-slot\"},{\"content\":58,\"class\":\"td-empty-slot\"},{\"content\":59,\"class\":\"td-empty-slot\"},{\"content\":60,\"class\":\"td-empty-slot\"}],[{\"content\":61,\"class\":\"td-empty-slot\"},{\"content\":62,\"class\":\"td-empty-slot\"},{\"content\":63,\"class\":\"td-empty-slot\"},{\"content\":64,\"class\":\"td-empty-slot\"},{\"content\":65,\"class\":\"td-empty-slot\"},{\"content\":66,\"class\":\"td-empty-slot\"},{\"content\":67,\"class\":\"td-empty-slot\"},{\"content\":68,\"class\":\"td-empty-slot\"},{\"content\":69,\"class\":\"td-empty-slot\"},{\"content\":70,\"class\":\"td-empty-slot\"},{\"content\":71,\"class\":\"td-empty-slot\"},{\"content\":72,\"class\":\"td-empty-slot\"}],[{\"content\":73,\"class\":\"td-empty-slot\"},{\"content\":74,\"class\":\"td-empty-slot\"},{\"content\":75,\"class\":\"td-empty-slot\"},{\"content\":76,\"class\":\"td-empty-slot\"},{\"content\":77,\"class\":\"td-empty-slot\"},{\"content\":78,\"class\":\"td-empty-slot\"},{\"content\":79,\"class\":\"td-empty-slot\"},{\"content\":80,\"class\":\"td-empty-slot\"},{\"content\":81,\"class\":\"td-empty-slot\"},{\"content\":82,\"class\":\"td-empty-slot\"},{\"content\":83,\"class\":\"td-empty-slot\"},{\"content\":84,\"class\":\"td-empty-slot\"}],[{\"content\":85,\"class\":\"td-empty-slot\"},{\"content\":86,\"class\":\"td-empty-slot\"},{\"content\":87,\"class\":\"td-empty-slot\"},{\"content\":88,\"class\":\"td-empty-slot\"},{\"content\":89,\"class\":\"td-empty-slot\"},{\"content\":90,\"class\":\"td-empty-slot\"},{\"content\":91,\"class\":\"td-empty-slot\"},{\"content\":92,\"class\":\"td-empty-slot\"},{\"content\":93,\"class\":\"td-empty-slot\"},{\"content\":94,\"class\":\"td-empty-slot\"},{\"content\":95,\"class\":\"td-empty-slot\"},{\"content\":96,\"class\":\"td-empty-slot\"}]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T19:00:06.370-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410406.338}},{\"operation\":\"display\",\"content\":[{\"title\":\"Put Away the Following Items\"},{\"table\":[[\"ID\",\"Collection Type\",\"Location\"],[1298,\"96 Well Sample Plate\",\"Freezer\"]]}]},{\"operation\":\"next\",\"time\":\"2020-03-16T19:00:08.274-07:00\",\"inputs\":{\"table_inputs\":[],\"timestamp\":1584410408.241}},{\"operation\":\"complete\",\"rval\":{\"table_inputs\":[],\"timestamp\":1584410408.241}}]','2020-03-17 01:59:48','2020-03-17 02:00:08','operation.rb',-2,235,1,'2020-03-17 01:59:48','2020-03-17 02:59:48',NULL,NULL);
/*!40000 ALTER TABLE `jobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `libraries`
--

DROP TABLE IF EXISTS `libraries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `libraries` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `category` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `libraries`
--

LOCK TABLES `libraries` WRITE;
/*!40000 ALTER TABLE `libraries` DISABLE KEYS */;
INSERT INTO `libraries` VALUES (1,'Debug','Standard Libs','2020-01-24 16:50:00','2020-01-24 16:50:00'),(2,'AssociationManagement','Standard Libs','2020-03-11 15:57:53','2020-03-11 15:57:53'),(3,'CollectionDisplay','Collection_Management','2020-03-11 15:57:53','2020-03-11 17:07:50'),(4,'PlanParams','Standard Libs','2020-03-11 15:57:53','2020-03-11 15:57:53'),(5,'Units','Standard Libs','2020-03-11 15:57:53','2020-03-11 15:57:53'),(6,'CollectionTransfer','Collection_Management','2020-03-11 16:37:49','2020-03-11 17:05:06'),(7,'SampleManagement','Collection_Management','2020-03-11 17:05:09','2020-03-11 17:05:20'),(8,'CollectionActions','Collection_Management','2020-03-13 15:46:28','2020-03-13 17:40:57'),(9,'WorkflowValidation','RNA_Seq','2020-03-13 19:24:54','2020-03-13 19:29:27'),(10,'CommonInputOutputNames','Standard Libs','2020-03-13 19:39:53','2020-03-13 19:39:53'),(11,'KeywordLib','RNA_Seq','2020-03-13 20:08:05','2020-03-13 20:09:09');
/*!40000 ALTER TABLE `libraries` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `locators`
--

DROP TABLE IF EXISTS `locators`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `locators` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `wizard_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `number` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `locators`
--

LOCK TABLES `locators` WRITE;
/*!40000 ALTER TABLE `locators` DISABLE KEYS */;
/*!40000 ALTER TABLE `locators` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `logs`
--

DROP TABLE IF EXISTS `logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `job_id` int(11) DEFAULT NULL,
  `user_id` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `entry_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `data` text COLLATE utf8_unicode_ci,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `logs`
--

LOCK TABLES `logs` WRITE;
/*!40000 ALTER TABLE `logs` DISABLE KEYS */;
/*!40000 ALTER TABLE `logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `memberships`
--

DROP TABLE IF EXISTS `memberships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `memberships` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `group_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=543 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `memberships`
--

LOCK TABLES `memberships` WRITE;
/*!40000 ALTER TABLE `memberships` DISABLE KEYS */;
INSERT INTO `memberships` VALUES (541,1,1,'2017-10-02 16:21:25','2017-10-02 16:21:25'),(542,1,235,'2017-10-02 17:50:59','2017-10-02 17:50:59');
/*!40000 ALTER TABLE `memberships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `object_types`
--

DROP TABLE IF EXISTS `object_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `object_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `min` int(11) DEFAULT NULL,
  `max` int(11) DEFAULT NULL,
  `handler` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `safety` text COLLATE utf8_unicode_ci,
  `cleanup` text COLLATE utf8_unicode_ci,
  `data` text COLLATE utf8_unicode_ci,
  `vendor` text COLLATE utf8_unicode_ci,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `unit` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `cost` float DEFAULT NULL,
  `release_method` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `release_description` text COLLATE utf8_unicode_ci,
  `sample_type_id` int(11) DEFAULT NULL,
  `image` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `prefix` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `rows` int(11) DEFAULT NULL,
  `columns` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `object_types`
--

LOCK TABLES `object_types` WRITE;
/*!40000 ALTER TABLE `object_types` DISABLE KEYS */;
INSERT INTO `object_types` VALUES (1,'__Part','Part of a collection',0,1,'sample_container','No safety information','No cleanup information','No data','No vendor information','2018-12-21 17:59:09','2018-12-21 17:59:09','part',0.01,'return','',NULL,'','',NULL,NULL),(2,'Orphan','Part of a collection',0,1,'part','No safety information','No cleanup information','No data','No vendor information','2018-12-21 17:59:09','2018-12-21 17:59:09','part',0.01,'return','',NULL,'','',NULL,NULL),(3,'Total RNA 96 Well Plate','96 Well plate of total RNA from customer',0,1000000,'collection','No safety information','No cleanup information','No data','No vendor information','2020-03-11 15:57:53','2020-03-11 16:16:05','plate',0.01,'return','',1,'','M80C',8,12),(4,'96 Well Sample Plate','96 well sample plate',0,1000,'collection','No safety information','No cleanup information','No data','No vendor information','2020-03-11 16:18:21','2020-03-11 16:31:15','plate',0.01,'return','',NULL,'','',8,12);
/*!40000 ALTER TABLE `object_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `operation_types`
--

DROP TABLE IF EXISTS `operation_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `operation_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `category` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `deployed` tinyint(1) DEFAULT NULL,
  `on_the_fly` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_operation_types_on_category_and_name` (`category`,`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `operation_types`
--

LOCK TABLES `operation_types` WRITE;
/*!40000 ALTER TABLE `operation_types` DISABLE KEYS */;
INSERT INTO `operation_types` VALUES (1,'Direct Purchase','Misc.',1,1,'2020-01-24 16:50:00','2020-01-24 16:50:00'),(2,'RNA_QC','RNA_Seq',1,0,'2020-03-11 15:57:53','2020-03-11 16:28:34'),(3,'RNA_Prep','RNA_Seq',1,NULL,'2020-03-11 22:15:34','2020-03-11 22:15:34'),(4,'C_DNA_QC','RNA_Seq',1,NULL,'2020-03-13 20:24:05','2020-03-13 20:25:48'),(5,'Normalization Pooling','RNA_Seq',1,NULL,'2020-03-13 21:00:59','2020-03-13 21:41:57');
/*!40000 ALTER TABLE `operation_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `operations`
--

DROP TABLE IF EXISTS `operations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `operations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `operation_type_id` int(11) DEFAULT NULL,
  `status` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `x` float DEFAULT NULL,
  `y` float DEFAULT NULL,
  `parent_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_operations_on_operation_type_id` (`operation_type_id`),
  KEY `index_operations_on_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `operations`
--

LOCK TABLES `operations` WRITE;
/*!40000 ALTER TABLE `operations` DISABLE KEYS */;
INSERT INTO `operations` VALUES (1,2,'done',1,'2020-03-11 16:30:09','2020-03-13 20:04:45',312,152,0),(2,2,'done',1,'2020-03-11 17:33:15','2020-03-11 22:01:27',312,152,0),(3,2,'done',1,'2020-03-11 20:58:20','2020-03-11 22:01:27',272,64,0),(4,3,'error',1,'2020-03-11 22:19:28','2020-03-13 18:49:11',128,128,0),(11,3,'done',1,'2020-03-12 22:36:14','2020-03-13 20:21:21',192,192,0),(12,3,'error',1,'2020-03-12 22:57:17','2020-03-13 19:23:45',192,192,0),(13,3,'error',1,'2020-03-12 22:58:47','2020-03-13 19:24:30',192,192,0),(14,3,'error',1,'2020-03-12 22:58:58','2020-03-13 19:10:51',192,192,0),(16,3,'done',1,'2020-03-13 20:32:48','2020-03-13 20:34:11',208,312,0),(17,4,'error',1,'2020-03-13 20:32:48','2020-03-13 20:35:19',208,248,0),(18,2,'done',1,'2020-03-13 20:32:48','2020-03-13 20:33:53',384,312,0),(19,3,'error',1,'2020-03-13 20:37:00','2020-03-13 20:37:45',208,312,0),(20,4,'error',1,'2020-03-13 20:37:00','2020-03-16 20:01:11',208,248,0),(21,2,'done',1,'2020-03-13 20:37:00','2020-03-13 20:39:41',384,312,0),(22,3,'done',1,'2020-03-13 20:37:18','2020-03-13 20:40:32',208,312,0),(24,2,'done',1,'2020-03-13 20:37:18','2020-03-13 20:39:58',384,312,0),(25,4,'done',1,'2020-03-13 20:39:05','2020-03-13 21:50:54',424,232,0),(26,4,'done',1,'2020-03-13 21:44:52','2020-03-13 21:46:51',464,184,0),(27,5,'error',1,'2020-03-13 21:44:52','2020-03-17 01:17:16',296,184,0),(28,3,'done',1,'2020-03-13 21:44:52','2020-03-13 21:46:29',304,320,0),(29,2,'done',1,'2020-03-13 21:44:52','2020-03-13 21:46:11',480,320,0),(30,5,'error',1,'2020-03-13 21:50:54','2020-03-17 01:17:16',200,200,0),(31,3,'done',1,'2020-03-13 21:52:12','2020-03-13 21:53:49',208,312,0),(32,2,'done',1,'2020-03-13 21:52:12','2020-03-13 21:53:29',384,312,0),(33,4,'done',1,'2020-03-13 21:52:12','2020-03-13 21:54:39',424,232,0),(34,5,'done',1,'2020-03-13 21:52:13','2020-03-13 21:58:27',200,200,0),(35,4,'done',1,'2020-03-13 21:52:22','2020-03-13 21:54:39',464,184,0),(36,5,'done',1,'2020-03-13 21:52:22','2020-03-13 21:58:27',296,184,0),(37,3,'done',1,'2020-03-13 21:52:22','2020-03-13 21:54:12',304,320,0),(38,2,'done',1,'2020-03-13 21:52:22','2020-03-13 21:53:29',480,320,0),(39,4,'done',1,'2020-03-13 21:58:56','2020-03-13 22:01:14',464,184,0),(40,5,'error',1,'2020-03-13 21:58:56','2020-03-17 01:19:59',296,184,0),(41,3,'done',1,'2020-03-13 21:58:56','2020-03-13 22:00:22',304,320,0),(42,2,'done',1,'2020-03-13 21:58:56','2020-03-13 21:59:44',480,320,0),(43,3,'done',1,'2020-03-13 21:59:07','2020-03-13 22:00:43',208,312,0),(44,2,'done',1,'2020-03-13 21:59:07','2020-03-13 22:00:00',384,312,0),(45,4,'done',1,'2020-03-13 21:59:07','2020-03-13 22:01:45',424,232,0),(46,5,'error',1,'2020-03-13 21:59:07','2020-03-17 01:20:05',200,200,0),(47,2,'done',1,'2020-03-17 00:31:53','2020-03-17 00:48:24',384,272,0),(49,3,'done',1,'2020-03-17 00:31:53','2020-03-17 00:48:58',160,288,0),(50,4,'done',1,'2020-03-17 00:31:53','2020-03-17 00:53:33',384,168,0),(51,5,'done',1,'2020-03-17 00:31:53','2020-03-17 01:19:47',160,168,0),(52,5,'done',1,'2020-03-17 00:46:14','2020-03-17 01:19:47',80,88,0),(53,4,'done',1,'2020-03-17 00:46:14','2020-03-17 00:56:08',264,88,0),(54,3,'done',1,'2020-03-17 00:46:14','2020-03-17 00:48:58',80,168,0),(55,2,'done',1,'2020-03-17 00:46:14','2020-03-17 00:48:24',464,160,0),(56,5,'error',1,'2020-03-17 01:20:19','2020-03-17 01:39:24',80,88,0),(57,4,'done',1,'2020-03-17 01:20:19','2020-03-17 01:27:28',264,88,0),(58,3,'done',1,'2020-03-17 01:20:19','2020-03-17 01:24:33',80,168,0),(59,2,'done',1,'2020-03-17 01:20:19','2020-03-17 01:22:05',464,160,0),(60,5,'error',1,'2020-03-17 01:20:30','2020-03-17 01:39:24',80,88,0),(61,4,'done',1,'2020-03-17 01:20:30','2020-03-17 01:29:27',264,88,0),(62,3,'done',1,'2020-03-17 01:20:30','2020-03-17 01:26:43',80,168,0),(63,2,'done',1,'2020-03-17 01:20:30','2020-03-17 01:26:20',464,160,0),(64,2,'done',1,'2020-03-17 01:23:30','2020-03-17 01:26:20',384,272,0),(65,3,'done',1,'2020-03-17 01:23:30','2020-03-17 01:24:33',160,288,0),(66,4,'done',1,'2020-03-17 01:23:30','2020-03-17 01:27:28',384,168,0),(67,5,'done',1,'2020-03-17 01:23:30','2020-03-17 01:31:09',160,168,0),(68,2,'done',1,'2020-03-17 01:43:47','2020-03-17 01:45:54',384,272,0),(69,3,'done',1,'2020-03-17 01:43:47','2020-03-17 01:46:47',160,288,0),(70,4,'done',1,'2020-03-17 01:43:47','2020-03-17 01:51:12',384,168,0),(71,5,'done',1,'2020-03-17 01:43:47','2020-03-17 01:51:51',160,168,0),(72,5,'done',1,'2020-03-17 01:43:53','2020-03-17 01:53:45',80,88,0),(73,4,'done',1,'2020-03-17 01:43:53','2020-03-17 01:54:02',264,88,0),(74,3,'done',1,'2020-03-17 01:43:53','2020-03-17 01:46:47',80,168,0),(75,2,'done',1,'2020-03-17 01:43:53','2020-03-17 01:48:12',464,160,0),(76,5,'done',1,'2020-03-17 01:56:06','2020-03-17 02:00:08',80,88,0),(77,4,'done',1,'2020-03-17 01:56:07','2020-03-17 01:59:08',264,88,0),(78,3,'done',1,'2020-03-17 01:56:07','2020-03-17 01:56:33',80,168,0),(79,2,'pending',1,'2020-03-17 01:56:07','2020-03-17 01:56:13',464,160,0),(80,2,'pending',1,'2020-03-17 01:57:24','2020-03-17 01:57:29',384,272,0),(81,3,'done',1,'2020-03-17 01:57:24','2020-03-17 01:57:50',160,288,0),(82,4,'done',1,'2020-03-17 01:57:24','2020-03-17 01:59:44',384,168,0),(83,5,'done',1,'2020-03-17 01:57:24','2020-03-17 02:00:08',160,168,0);
/*!40000 ALTER TABLE `operations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `parameters`
--

DROP TABLE IF EXISTS `parameters`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `parameters` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `key` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `value` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `parameters`
--

LOCK TABLES `parameters` WRITE;
/*!40000 ALTER TABLE `parameters` DISABLE KEYS */;
INSERT INTO `parameters` VALUES (1,'email','joe@nasa.org','2018-10-31 22:44:56','2018-10-31 22:44:56',NULL,1),(2,'phone','8675309','2018-10-31 22:44:56','2018-10-31 22:44:56',NULL,1),(3,'biofab',NULL,'2018-10-31 22:44:56','2018-10-31 22:44:56',NULL,1),(4,'aquarium',NULL,'2018-10-31 22:44:56','2018-10-31 22:44:56',NULL,1),(5,'Make new samples private',NULL,'2018-10-31 22:44:56','2018-10-31 22:44:56',NULL,1),(6,'Lab Name',NULL,'2018-10-31 22:44:57','2018-10-31 22:44:57',NULL,1),(7,'email','joe@nasa.org','2018-10-31 22:45:00','2018-10-31 22:45:00',NULL,1),(8,'phone','8675309','2018-10-31 22:45:00','2018-10-31 22:45:00',NULL,1),(9,'biofab','true','2018-10-31 22:45:00','2018-10-31 22:45:00',NULL,1),(10,'aquarium','true','2018-10-31 22:45:00','2018-10-31 22:45:02',NULL,1),(11,'Make new samples private',NULL,'2018-10-31 22:45:00','2018-10-31 22:45:00',NULL,1),(12,'Lab Name',NULL,'2018-10-31 22:45:00','2018-10-31 22:45:00',NULL,1),(13,'lab_agreement','true','2020-03-11 15:49:07','2020-03-11 15:49:07',NULL,1),(14,'labor rate','0.0','2020-03-11 16:30:20','2020-03-11 16:30:20','Edit me',NULL),(15,'markup rate','0.0','2020-03-11 16:30:20','2020-03-11 16:30:20','Edit me',NULL);
/*!40000 ALTER TABLE `parameters` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `part_associations`
--

DROP TABLE IF EXISTS `part_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `part_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `part_id` int(11) DEFAULT NULL,
  `collection_id` int(11) DEFAULT NULL,
  `row` int(11) DEFAULT NULL,
  `column` int(11) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_part_associations_on_collection_id_and_row_and_column` (`collection_id`,`row`,`column`)
) ENGINE=InnoDB AUTO_INCREMENT=1133 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `part_associations`
--

LOCK TABLES `part_associations` WRITE;
/*!40000 ALTER TABLE `part_associations` DISABLE KEYS */;
INSERT INTO `part_associations` VALUES (1,3,2,0,0,'2020-03-11 16:19:32','2020-03-11 16:19:32'),(2,4,2,1,0,'2020-03-11 16:19:41','2020-03-11 16:19:41'),(3,5,2,2,0,'2020-03-11 16:20:18','2020-03-11 16:20:18'),(4,6,2,3,0,'2020-03-11 16:20:26','2020-03-11 16:20:26'),(5,7,2,4,0,'2020-03-11 16:20:35','2020-03-11 16:20:35'),(6,8,2,5,0,'2020-03-11 16:20:56','2020-03-11 16:20:56'),(7,9,2,6,0,'2020-03-11 16:21:04','2020-03-11 16:21:04'),(8,10,2,7,0,'2020-03-11 16:21:15','2020-03-11 16:21:15'),(9,12,11,0,0,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(10,13,11,0,1,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(11,14,11,0,2,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(12,15,11,0,3,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(13,16,11,0,4,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(14,17,11,0,5,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(15,18,11,0,6,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(16,19,11,0,7,'2020-03-11 16:30:42','2020-03-11 16:30:42'),(17,21,20,0,0,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(18,22,20,0,1,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(19,23,20,0,2,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(20,24,20,0,3,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(21,25,20,0,4,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(22,26,20,0,5,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(23,27,20,0,6,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(24,28,20,0,7,'2020-03-11 16:32:14','2020-03-11 16:32:14'),(25,30,29,0,0,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(26,31,29,0,1,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(27,32,29,0,2,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(28,33,29,0,3,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(29,34,29,0,4,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(30,35,29,0,5,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(31,36,29,0,6,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(32,37,29,0,7,'2020-03-11 17:26:00','2020-03-11 17:26:00'),(33,39,38,0,0,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(34,40,38,0,1,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(35,41,38,0,2,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(36,42,38,0,3,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(37,43,38,0,4,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(38,44,38,0,5,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(39,45,38,0,6,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(40,46,38,0,7,'2020-03-11 17:26:46','2020-03-11 17:26:46'),(42,49,48,0,0,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(43,50,48,0,1,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(44,51,48,0,2,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(45,52,48,0,3,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(46,53,48,0,4,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(47,54,48,0,5,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(48,55,48,0,6,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(49,56,48,0,7,'2020-03-11 17:27:53','2020-03-11 17:27:53'),(50,58,57,0,0,'2020-03-11 17:30:09','2020-03-11 17:30:09'),(51,59,57,0,1,'2020-03-11 17:30:09','2020-03-11 17:30:09'),(52,60,57,0,2,'2020-03-11 17:30:09','2020-03-11 17:30:09'),(53,61,57,0,3,'2020-03-11 17:30:09','2020-03-11 17:30:09'),(54,62,57,0,4,'2020-03-11 17:30:09','2020-03-11 17:30:09'),(55,63,57,0,5,'2020-03-11 17:30:09','2020-03-11 17:30:09'),(56,64,57,0,6,'2020-03-11 17:30:10','2020-03-11 17:30:10'),(57,65,57,0,7,'2020-03-11 17:30:10','2020-03-11 17:30:10'),(58,67,66,0,0,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(59,68,66,0,1,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(60,69,66,0,2,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(61,70,66,0,3,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(62,71,66,0,4,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(63,72,66,0,5,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(64,73,66,0,6,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(65,74,66,0,7,'2020-03-11 17:31:57','2020-03-11 17:31:57'),(66,76,75,0,0,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(67,77,75,0,1,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(68,78,75,0,2,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(69,79,75,0,3,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(70,80,75,0,4,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(71,81,75,0,5,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(72,82,75,0,6,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(73,83,75,0,7,'2020-03-11 17:32:19','2020-03-11 17:32:19'),(75,85,2,0,1,'2020-03-11 17:34:47','2020-03-11 17:34:47'),(76,87,86,0,0,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(77,88,86,0,1,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(78,89,86,0,2,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(79,90,86,0,3,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(80,91,86,0,4,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(81,92,86,0,5,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(82,93,86,0,6,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(83,94,86,0,7,'2020-03-11 17:35:41','2020-03-11 17:35:41'),(84,96,95,0,0,'2020-03-11 17:36:04','2020-03-11 17:36:04'),(85,97,95,0,1,'2020-03-11 17:36:04','2020-03-11 17:36:04'),(86,98,95,0,2,'2020-03-11 17:36:04','2020-03-11 17:36:04'),(87,99,95,0,3,'2020-03-11 17:36:04','2020-03-11 17:36:04'),(88,100,95,0,4,'2020-03-11 17:36:04','2020-03-11 17:36:04'),(89,101,95,0,5,'2020-03-11 17:36:04','2020-03-11 17:36:04'),(90,102,95,0,6,'2020-03-11 17:36:05','2020-03-11 17:36:05'),(91,103,95,0,7,'2020-03-11 17:36:05','2020-03-11 17:36:05'),(92,104,95,0,8,'2020-03-11 17:36:05','2020-03-11 17:36:05'),(93,106,105,0,0,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(94,107,105,0,1,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(95,108,105,0,2,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(96,109,105,0,3,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(97,110,105,0,4,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(98,111,105,0,5,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(99,112,105,0,6,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(100,113,105,0,7,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(101,114,105,0,8,'2020-03-11 17:37:00','2020-03-11 17:37:00'),(102,116,115,0,0,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(103,117,115,0,1,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(104,118,115,0,2,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(105,119,115,0,3,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(106,120,115,0,4,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(107,121,115,0,5,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(108,122,115,0,6,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(109,123,115,0,7,'2020-03-11 17:37:21','2020-03-11 17:37:21'),(110,124,115,0,8,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(111,125,115,0,9,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(112,126,115,0,10,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(113,127,115,0,11,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(114,128,115,1,0,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(115,129,115,1,1,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(116,130,115,1,2,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(117,131,115,1,3,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(118,132,115,1,4,'2020-03-11 17:37:25','2020-03-11 17:37:25'),(119,134,133,0,0,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(120,135,133,0,1,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(121,136,133,0,2,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(122,137,133,0,3,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(123,138,133,0,4,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(124,139,133,0,5,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(125,140,133,0,6,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(126,141,133,0,7,'2020-03-11 17:48:08','2020-03-11 17:48:08'),(127,143,142,0,0,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(128,144,142,0,1,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(129,145,142,0,2,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(130,146,142,0,3,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(131,147,142,0,4,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(132,148,142,0,5,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(133,149,142,0,6,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(134,150,142,0,7,'2020-03-11 20:48:09','2020-03-11 20:48:09'),(135,152,151,0,0,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(136,153,151,0,1,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(137,154,151,0,2,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(138,155,151,0,3,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(139,156,151,0,4,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(140,157,151,0,5,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(141,158,151,0,6,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(142,159,151,0,7,'2020-03-11 20:49:44','2020-03-11 20:49:44'),(143,161,160,0,0,'2020-03-11 20:50:28','2020-03-11 20:50:28'),(148,166,160,5,0,'2020-03-11 20:51:20','2020-03-11 20:51:20'),(149,167,160,6,0,'2020-03-11 20:51:29','2020-03-11 20:51:29'),(150,168,160,7,0,'2020-03-11 20:51:36','2020-03-11 20:51:36'),(151,169,160,0,1,'2020-03-11 20:51:47','2020-03-11 20:51:47'),(169,187,160,1,0,'2020-03-11 20:59:12','2020-03-11 20:59:12'),(170,188,160,2,0,'2020-03-11 20:59:27','2020-03-11 20:59:27'),(171,189,160,3,0,'2020-03-11 21:02:38','2020-03-11 21:02:38'),(172,190,160,4,0,'2020-03-11 21:02:51','2020-03-11 21:02:51'),(173,191,160,1,1,'2020-03-11 21:03:19','2020-03-11 21:03:19'),(174,192,160,2,1,'2020-03-11 21:03:32','2020-03-11 21:03:32'),(175,193,160,3,1,'2020-03-11 21:03:50','2020-03-11 21:03:50'),(176,194,160,4,1,'2020-03-11 21:04:07','2020-03-11 21:04:07'),(177,195,160,5,1,'2020-03-11 21:04:22','2020-03-11 21:04:22'),(178,196,160,6,1,'2020-03-11 21:04:49','2020-03-11 21:04:49'),(179,197,160,7,1,'2020-03-11 21:05:00','2020-03-11 21:05:00'),(180,199,198,0,0,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(181,200,198,0,1,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(182,201,198,0,2,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(183,202,198,0,3,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(184,203,198,0,4,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(185,204,198,0,5,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(186,205,198,0,6,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(187,206,198,0,7,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(188,207,198,0,8,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(189,208,198,0,9,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(190,209,198,0,10,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(191,210,198,0,11,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(192,211,198,1,0,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(193,212,198,1,1,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(194,213,198,1,2,'2020-03-11 21:07:26','2020-03-11 21:07:26'),(195,215,214,0,0,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(196,216,214,0,1,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(197,217,214,0,2,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(198,218,214,0,3,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(199,219,214,0,4,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(200,220,214,0,5,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(201,221,214,0,6,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(202,222,214,0,7,'2020-03-11 21:09:35','2020-03-11 21:09:35'),(203,223,214,0,8,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(204,224,214,0,9,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(205,225,214,0,10,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(206,226,214,0,11,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(207,227,214,1,0,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(208,228,214,1,1,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(209,229,214,1,2,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(210,230,214,1,3,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(211,231,214,1,4,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(212,232,214,1,5,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(213,233,214,1,6,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(214,234,214,1,7,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(215,235,214,1,8,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(216,236,214,1,9,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(217,237,214,1,10,'2020-03-11 21:09:42','2020-03-11 21:09:42'),(218,239,238,0,0,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(219,240,238,0,1,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(220,241,238,0,2,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(221,242,238,0,3,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(222,243,238,0,4,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(223,244,238,0,5,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(224,245,238,0,6,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(225,246,238,0,7,'2020-03-11 21:12:23','2020-03-11 21:12:23'),(226,248,247,0,0,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(227,249,247,0,1,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(228,250,247,0,2,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(229,251,247,0,3,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(230,252,247,0,4,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(231,253,247,0,5,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(232,254,247,0,6,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(233,255,247,0,7,'2020-03-11 21:25:36','2020-03-11 21:25:36'),(234,257,256,0,0,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(235,258,256,0,1,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(236,259,256,0,2,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(237,260,256,0,3,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(238,261,256,0,4,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(239,262,256,0,5,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(240,263,256,0,6,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(241,264,256,0,7,'2020-03-11 21:31:22','2020-03-11 21:31:22'),(242,265,256,0,8,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(243,266,256,0,9,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(244,267,256,0,10,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(245,268,256,0,11,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(246,269,256,1,0,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(247,270,256,1,1,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(248,271,256,1,2,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(249,272,256,1,3,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(250,273,256,1,4,'2020-03-11 21:31:26','2020-03-11 21:31:26'),(251,274,256,1,5,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(252,275,256,1,6,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(253,276,256,1,7,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(254,277,256,1,8,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(255,278,256,1,9,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(256,279,256,1,10,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(257,280,256,1,11,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(258,281,256,2,0,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(259,282,256,2,1,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(260,283,256,2,2,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(261,284,256,2,3,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(262,285,256,2,4,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(263,286,256,2,5,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(264,287,256,2,6,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(265,288,256,2,7,'2020-03-11 21:31:30','2020-03-11 21:31:30'),(266,290,289,0,0,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(267,291,289,0,1,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(268,292,289,0,2,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(269,293,289,0,3,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(270,294,289,0,4,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(271,295,289,0,5,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(272,296,289,0,6,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(273,297,289,0,7,'2020-03-11 21:32:35','2020-03-11 21:32:35'),(274,299,298,0,0,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(275,300,298,0,1,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(276,301,298,0,2,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(277,302,298,0,3,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(278,303,298,0,4,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(279,304,298,0,5,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(280,305,298,0,6,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(281,306,298,0,7,'2020-03-11 21:53:48','2020-03-11 21:53:48'),(282,308,307,0,0,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(283,309,307,0,1,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(284,310,307,0,2,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(285,311,307,0,3,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(286,312,307,0,4,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(287,313,307,0,5,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(288,314,307,0,6,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(289,315,307,0,7,'2020-03-11 21:56:35','2020-03-11 21:56:35'),(290,317,316,0,0,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(291,318,316,0,1,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(292,319,316,0,2,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(293,320,316,0,3,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(294,321,316,0,4,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(295,322,316,0,5,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(296,323,316,0,6,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(297,324,316,0,7,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(298,325,316,0,8,'2020-03-11 22:00:05','2020-03-11 22:00:05'),(299,327,326,0,0,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(300,328,326,0,1,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(301,329,326,0,2,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(302,330,326,0,3,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(303,331,326,0,4,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(304,332,326,0,5,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(305,333,326,0,6,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(306,334,326,0,7,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(307,335,326,0,8,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(308,336,326,0,9,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(309,337,326,0,10,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(310,338,326,0,11,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(311,339,326,1,0,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(312,340,326,1,1,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(313,341,326,1,2,'2020-03-11 22:00:29','2020-03-11 22:00:29'),(314,343,342,0,0,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(315,344,342,0,1,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(316,345,342,0,2,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(317,346,342,0,3,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(318,347,342,0,4,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(319,348,342,0,5,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(320,349,342,0,6,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(321,350,342,0,7,'2020-03-11 22:01:00','2020-03-11 22:01:00'),(322,351,342,0,8,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(323,352,342,0,9,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(324,353,342,0,10,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(325,354,342,0,11,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(326,355,342,1,0,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(327,356,342,1,1,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(328,357,342,1,2,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(329,358,342,1,3,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(330,359,342,1,4,'2020-03-11 22:01:04','2020-03-11 22:01:04'),(331,360,342,1,5,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(332,361,342,1,6,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(333,362,342,1,7,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(334,363,342,1,8,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(335,364,342,1,9,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(336,365,342,1,10,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(337,366,342,1,11,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(338,367,342,2,0,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(339,368,342,2,1,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(340,369,342,2,2,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(341,370,342,2,3,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(342,371,342,2,4,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(343,372,342,2,5,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(344,373,342,2,6,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(345,374,342,2,7,'2020-03-11 22:01:07','2020-03-11 22:01:07'),(346,376,375,0,0,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(347,377,375,0,1,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(348,378,375,0,2,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(349,379,375,0,3,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(350,380,375,0,4,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(351,381,375,0,5,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(352,382,375,0,6,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(353,383,375,0,7,'2020-03-11 22:06:44','2020-03-11 22:06:44'),(354,386,385,0,0,'2020-03-11 22:11:28','2020-03-11 22:11:28'),(355,387,385,0,1,'2020-03-11 22:11:28','2020-03-11 22:11:28'),(356,388,385,0,2,'2020-03-11 22:11:29','2020-03-11 22:11:29'),(357,389,385,0,3,'2020-03-11 22:11:29','2020-03-11 22:11:29'),(358,390,385,0,4,'2020-03-11 22:11:29','2020-03-11 22:11:29'),(359,391,385,0,5,'2020-03-11 22:11:29','2020-03-11 22:11:29'),(360,392,385,0,6,'2020-03-11 22:11:29','2020-03-11 22:11:29'),(361,393,385,0,7,'2020-03-11 22:11:29','2020-03-11 22:11:29'),(362,395,394,0,0,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(363,396,394,0,1,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(364,397,394,0,2,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(365,398,394,0,3,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(366,399,394,0,4,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(367,400,394,0,5,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(368,401,394,0,6,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(369,402,394,0,7,'2020-03-11 22:12:10','2020-03-11 22:12:10'),(370,454,453,0,0,'2020-03-12 22:56:09','2020-03-12 22:56:09'),(371,455,453,0,1,'2020-03-12 22:56:09','2020-03-12 22:56:09'),(372,456,453,0,2,'2020-03-12 22:56:09','2020-03-12 22:56:09'),(373,457,453,0,3,'2020-03-12 22:56:09','2020-03-12 22:56:09'),(374,459,458,0,0,'2020-03-12 22:56:34','2020-03-12 22:56:34'),(375,460,458,0,1,'2020-03-12 22:56:34','2020-03-12 22:56:34'),(376,461,458,0,2,'2020-03-12 22:56:34','2020-03-12 22:56:34'),(377,462,458,0,3,'2020-03-12 22:56:34','2020-03-12 22:56:34'),(378,464,463,0,0,'2020-03-12 22:57:48','2020-03-12 22:57:48'),(379,465,463,0,1,'2020-03-12 22:57:48','2020-03-12 22:57:48'),(380,466,463,0,2,'2020-03-12 22:57:48','2020-03-12 22:57:48'),(381,467,463,0,3,'2020-03-12 22:57:48','2020-03-12 22:57:48'),(382,468,463,0,4,'2020-03-12 22:57:48','2020-03-12 22:57:48'),(383,470,469,0,0,'2020-03-12 23:00:37','2020-03-12 23:00:37'),(384,471,469,0,1,'2020-03-12 23:00:37','2020-03-12 23:00:37'),(385,472,469,0,2,'2020-03-12 23:00:37','2020-03-12 23:00:37'),(386,473,469,0,3,'2020-03-12 23:00:38','2020-03-12 23:00:38'),(387,474,469,0,4,'2020-03-12 23:00:42','2020-03-12 23:00:42'),(388,475,469,0,5,'2020-03-12 23:00:42','2020-03-12 23:00:42'),(389,476,469,0,6,'2020-03-12 23:00:42','2020-03-12 23:00:42'),(390,477,469,0,7,'2020-03-12 23:00:42','2020-03-12 23:00:42'),(391,478,469,0,8,'2020-03-12 23:00:42','2020-03-12 23:00:42'),(392,480,479,0,0,'2020-03-12 23:17:39','2020-03-12 23:17:39'),(393,481,479,0,1,'2020-03-12 23:17:39','2020-03-12 23:17:39'),(394,482,479,0,2,'2020-03-12 23:17:39','2020-03-12 23:17:39'),(395,483,479,0,3,'2020-03-12 23:17:39','2020-03-12 23:17:39'),(396,485,484,0,0,'2020-03-13 15:36:54','2020-03-13 15:36:54'),(397,486,484,0,1,'2020-03-13 15:36:54','2020-03-13 15:36:54'),(398,487,484,0,2,'2020-03-13 15:36:54','2020-03-13 15:36:54'),(399,488,484,0,3,'2020-03-13 15:36:54','2020-03-13 15:36:54'),(400,490,489,0,0,'2020-03-13 15:37:58','2020-03-13 15:37:58'),(401,491,489,0,1,'2020-03-13 15:37:58','2020-03-13 15:37:58'),(402,492,489,0,2,'2020-03-13 15:37:58','2020-03-13 15:37:58'),(403,493,489,0,3,'2020-03-13 15:37:58','2020-03-13 15:37:58'),(404,495,494,0,0,'2020-03-13 15:39:16','2020-03-13 15:39:16'),(405,496,494,0,1,'2020-03-13 15:39:16','2020-03-13 15:39:16'),(406,497,494,0,2,'2020-03-13 15:39:16','2020-03-13 15:39:16'),(407,498,494,0,3,'2020-03-13 15:39:16','2020-03-13 15:39:16'),(408,500,499,0,0,'2020-03-13 15:40:16','2020-03-13 15:40:16'),(409,501,499,0,1,'2020-03-13 15:40:16','2020-03-13 15:40:16'),(410,502,499,0,2,'2020-03-13 15:40:16','2020-03-13 15:40:16'),(411,503,499,0,3,'2020-03-13 15:40:16','2020-03-13 15:40:16'),(412,505,504,0,0,'2020-03-13 15:41:36','2020-03-13 15:41:36'),(413,506,504,0,1,'2020-03-13 15:41:36','2020-03-13 15:41:36'),(414,507,504,0,2,'2020-03-13 15:41:36','2020-03-13 15:41:36'),(415,508,504,0,3,'2020-03-13 15:41:36','2020-03-13 15:41:36'),(416,510,509,0,0,'2020-03-13 15:42:24','2020-03-13 15:42:24'),(417,511,509,0,1,'2020-03-13 15:42:24','2020-03-13 15:42:24'),(418,512,509,0,2,'2020-03-13 15:42:24','2020-03-13 15:42:24'),(419,513,509,0,3,'2020-03-13 15:42:24','2020-03-13 15:42:24'),(420,515,514,0,0,'2020-03-13 15:43:35','2020-03-13 15:43:35'),(421,516,514,0,1,'2020-03-13 15:43:35','2020-03-13 15:43:35'),(422,517,514,0,2,'2020-03-13 15:43:35','2020-03-13 15:43:35'),(423,518,514,0,3,'2020-03-13 15:43:35','2020-03-13 15:43:35'),(424,520,519,0,0,'2020-03-13 17:39:29','2020-03-13 17:39:29'),(425,521,519,0,1,'2020-03-13 17:39:29','2020-03-13 17:39:29'),(426,522,519,0,2,'2020-03-13 17:39:29','2020-03-13 17:39:29'),(427,523,519,0,3,'2020-03-13 17:39:29','2020-03-13 17:39:29'),(428,525,524,0,0,'2020-03-13 17:42:48','2020-03-13 17:42:48'),(429,526,524,0,1,'2020-03-13 17:42:48','2020-03-13 17:42:48'),(430,527,524,0,2,'2020-03-13 17:42:48','2020-03-13 17:42:48'),(431,528,524,0,3,'2020-03-13 17:42:48','2020-03-13 17:42:48'),(432,530,529,0,0,'2020-03-13 17:48:20','2020-03-13 17:48:20'),(433,531,529,0,1,'2020-03-13 17:48:20','2020-03-13 17:48:20'),(434,532,529,0,2,'2020-03-13 17:48:20','2020-03-13 17:48:20'),(435,533,529,0,3,'2020-03-13 17:48:20','2020-03-13 17:48:20'),(436,535,534,0,0,'2020-03-13 18:04:14','2020-03-13 18:04:14'),(437,536,534,0,1,'2020-03-13 18:04:14','2020-03-13 18:04:14'),(438,537,534,0,2,'2020-03-13 18:04:14','2020-03-13 18:04:14'),(439,538,534,0,3,'2020-03-13 18:04:14','2020-03-13 18:04:14'),(440,540,539,0,0,'2020-03-13 18:05:05','2020-03-13 18:05:05'),(441,541,539,0,1,'2020-03-13 18:05:05','2020-03-13 18:05:05'),(442,542,539,0,2,'2020-03-13 18:05:05','2020-03-13 18:05:05'),(443,543,539,0,3,'2020-03-13 18:05:05','2020-03-13 18:05:05'),(444,545,544,0,0,'2020-03-13 18:07:50','2020-03-13 18:07:50'),(445,546,544,0,1,'2020-03-13 18:07:50','2020-03-13 18:07:50'),(446,547,544,0,2,'2020-03-13 18:07:50','2020-03-13 18:07:50'),(447,548,544,0,3,'2020-03-13 18:07:50','2020-03-13 18:07:50'),(448,552,551,0,0,'2020-03-13 18:12:13','2020-03-13 18:12:13'),(449,553,551,0,1,'2020-03-13 18:12:13','2020-03-13 18:12:13'),(450,554,551,0,2,'2020-03-13 18:12:13','2020-03-13 18:12:13'),(451,555,551,0,3,'2020-03-13 18:12:13','2020-03-13 18:12:13'),(452,557,556,0,0,'2020-03-13 18:13:53','2020-03-13 18:13:53'),(453,558,556,0,1,'2020-03-13 18:13:53','2020-03-13 18:13:53'),(454,559,556,0,2,'2020-03-13 18:13:53','2020-03-13 18:13:53'),(455,560,556,0,3,'2020-03-13 18:13:53','2020-03-13 18:13:53'),(456,562,561,0,0,'2020-03-13 18:15:59','2020-03-13 18:15:59'),(457,563,561,0,1,'2020-03-13 18:15:59','2020-03-13 18:15:59'),(458,564,561,0,2,'2020-03-13 18:15:59','2020-03-13 18:15:59'),(459,565,561,0,3,'2020-03-13 18:15:59','2020-03-13 18:15:59'),(460,568,567,0,0,'2020-03-13 18:20:33','2020-03-13 18:20:33'),(461,569,567,0,1,'2020-03-13 18:20:33','2020-03-13 18:20:33'),(462,570,567,0,2,'2020-03-13 18:20:33','2020-03-13 18:20:33'),(463,571,567,0,3,'2020-03-13 18:20:33','2020-03-13 18:20:33'),(464,572,567,0,4,'2020-03-13 18:20:38','2020-03-13 18:20:38'),(465,573,567,0,5,'2020-03-13 18:20:38','2020-03-13 18:20:38'),(466,574,567,0,6,'2020-03-13 18:20:38','2020-03-13 18:20:38'),(467,575,567,0,7,'2020-03-13 18:20:38','2020-03-13 18:20:38'),(468,576,567,0,8,'2020-03-13 18:20:38','2020-03-13 18:20:38'),(469,577,567,0,9,'2020-03-13 18:20:51','2020-03-13 18:20:51'),(470,578,567,0,10,'2020-03-13 18:20:51','2020-03-13 18:20:51'),(471,579,567,0,11,'2020-03-13 18:20:51','2020-03-13 18:20:51'),(472,580,567,1,0,'2020-03-13 18:20:51','2020-03-13 18:20:51'),(473,581,567,1,1,'2020-03-13 18:20:55','2020-03-13 18:20:55'),(474,582,567,1,2,'2020-03-13 18:20:55','2020-03-13 18:20:55'),(475,583,567,1,3,'2020-03-13 18:20:55','2020-03-13 18:20:55'),(476,584,567,1,4,'2020-03-13 18:20:55','2020-03-13 18:20:55'),(477,585,567,1,5,'2020-03-13 18:20:55','2020-03-13 18:20:55'),(478,588,587,0,0,'2020-03-13 18:22:31','2020-03-13 18:22:31'),(479,589,587,0,1,'2020-03-13 18:22:31','2020-03-13 18:22:31'),(480,590,587,0,2,'2020-03-13 18:22:31','2020-03-13 18:22:31'),(481,591,587,0,3,'2020-03-13 18:22:31','2020-03-13 18:22:31'),(482,593,592,0,0,'2020-03-13 18:23:51','2020-03-13 18:23:51'),(483,594,592,0,1,'2020-03-13 18:23:51','2020-03-13 18:23:51'),(484,595,592,0,2,'2020-03-13 18:23:51','2020-03-13 18:23:51'),(485,596,592,0,3,'2020-03-13 18:23:51','2020-03-13 18:23:51'),(486,597,592,0,4,'2020-03-13 18:23:51','2020-03-13 18:23:51'),(487,599,598,0,0,'2020-03-13 18:25:41','2020-03-13 18:25:41'),(488,600,598,0,1,'2020-03-13 18:25:41','2020-03-13 18:25:41'),(489,601,598,0,2,'2020-03-13 18:25:41','2020-03-13 18:25:41'),(490,602,598,0,3,'2020-03-13 18:25:41','2020-03-13 18:25:41'),(491,604,603,0,0,'2020-03-13 18:26:55','2020-03-13 18:26:55'),(492,605,603,0,1,'2020-03-13 18:26:55','2020-03-13 18:26:55'),(493,606,603,0,2,'2020-03-13 18:26:55','2020-03-13 18:26:55'),(494,607,603,0,3,'2020-03-13 18:26:55','2020-03-13 18:26:55'),(495,608,603,0,4,'2020-03-13 18:26:55','2020-03-13 18:26:55'),(496,611,610,0,0,'2020-03-13 18:28:47','2020-03-13 18:28:47'),(497,612,610,0,1,'2020-03-13 18:28:47','2020-03-13 18:28:47'),(498,613,610,0,2,'2020-03-13 18:28:47','2020-03-13 18:28:47'),(499,614,610,0,3,'2020-03-13 18:28:47','2020-03-13 18:28:47'),(500,616,615,0,0,'2020-03-13 18:29:27','2020-03-13 18:29:27'),(501,617,615,0,1,'2020-03-13 18:29:27','2020-03-13 18:29:27'),(502,618,615,0,2,'2020-03-13 18:29:27','2020-03-13 18:29:27'),(503,619,615,0,3,'2020-03-13 18:29:27','2020-03-13 18:29:27'),(504,620,615,0,4,'2020-03-13 18:29:27','2020-03-13 18:29:27'),(505,622,621,0,0,'2020-03-13 18:30:04','2020-03-13 18:30:04'),(506,623,621,0,1,'2020-03-13 18:30:04','2020-03-13 18:30:04'),(507,624,621,0,2,'2020-03-13 18:30:04','2020-03-13 18:30:04'),(508,625,621,0,3,'2020-03-13 18:30:04','2020-03-13 18:30:04'),(509,627,626,0,0,'2020-03-13 18:47:13','2020-03-13 18:47:13'),(510,628,626,0,1,'2020-03-13 18:47:13','2020-03-13 18:47:13'),(511,629,626,0,2,'2020-03-13 18:47:13','2020-03-13 18:47:13'),(512,630,626,0,3,'2020-03-13 18:47:13','2020-03-13 18:47:13'),(513,631,626,0,4,'2020-03-13 18:47:13','2020-03-13 18:47:13'),(514,634,633,0,0,'2020-03-13 18:52:23','2020-03-13 18:52:23'),(515,635,633,0,1,'2020-03-13 18:52:23','2020-03-13 18:52:23'),(516,636,633,0,2,'2020-03-13 18:52:23','2020-03-13 18:52:23'),(517,637,633,0,3,'2020-03-13 18:52:23','2020-03-13 18:52:23'),(518,639,638,0,0,'2020-03-13 18:59:20','2020-03-13 18:59:20'),(519,640,638,0,1,'2020-03-13 18:59:20','2020-03-13 18:59:20'),(520,641,638,0,2,'2020-03-13 18:59:20','2020-03-13 18:59:20'),(521,642,638,0,3,'2020-03-13 18:59:20','2020-03-13 18:59:20'),(522,643,638,0,4,'2020-03-13 18:59:20','2020-03-13 18:59:20'),(523,645,644,0,0,'2020-03-13 18:59:51','2020-03-13 18:59:51'),(524,646,644,0,1,'2020-03-13 18:59:51','2020-03-13 18:59:51'),(525,647,644,0,2,'2020-03-13 18:59:51','2020-03-13 18:59:51'),(526,648,644,0,3,'2020-03-13 18:59:51','2020-03-13 18:59:51'),(527,649,644,0,4,'2020-03-13 18:59:51','2020-03-13 18:59:51'),(528,651,650,0,0,'2020-03-13 19:19:17','2020-03-13 19:19:17'),(529,652,650,0,1,'2020-03-13 19:19:17','2020-03-13 19:19:17'),(530,653,650,0,2,'2020-03-13 19:19:17','2020-03-13 19:19:17'),(531,654,650,0,3,'2020-03-13 19:19:17','2020-03-13 19:19:17'),(532,655,650,0,4,'2020-03-13 19:19:18','2020-03-13 19:19:18'),(533,657,656,0,0,'2020-03-13 19:21:06','2020-03-13 19:21:06'),(534,658,656,0,1,'2020-03-13 19:21:06','2020-03-13 19:21:06'),(535,659,656,0,2,'2020-03-13 19:21:06','2020-03-13 19:21:06'),(536,660,656,0,3,'2020-03-13 19:21:06','2020-03-13 19:21:06'),(537,662,661,0,0,'2020-03-13 19:23:27','2020-03-13 19:23:27'),(538,663,661,0,1,'2020-03-13 19:23:27','2020-03-13 19:23:27'),(539,664,661,0,2,'2020-03-13 19:23:27','2020-03-13 19:23:27'),(540,665,661,0,3,'2020-03-13 19:23:27','2020-03-13 19:23:27'),(541,667,666,0,0,'2020-03-13 19:50:17','2020-03-13 19:50:17'),(542,668,666,0,1,'2020-03-13 19:50:17','2020-03-13 19:50:17'),(543,669,666,0,2,'2020-03-13 19:50:17','2020-03-13 19:50:17'),(544,670,666,0,3,'2020-03-13 19:50:17','2020-03-13 19:50:17'),(545,672,671,0,0,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(546,673,671,0,1,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(547,674,671,0,2,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(548,675,671,0,3,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(549,676,671,0,4,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(550,677,671,0,5,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(551,678,671,0,6,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(552,679,671,0,7,'2020-03-13 19:50:46','2020-03-13 19:50:46'),(553,681,680,0,0,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(554,682,680,0,1,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(555,683,680,0,2,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(556,684,680,0,3,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(557,685,680,0,4,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(558,686,680,0,5,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(559,687,680,0,6,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(560,688,680,0,7,'2020-03-13 20:04:29','2020-03-13 20:04:29'),(561,690,689,0,0,'2020-03-13 20:21:12','2020-03-13 20:21:12'),(562,691,689,0,1,'2020-03-13 20:21:12','2020-03-13 20:21:12'),(563,692,689,0,2,'2020-03-13 20:21:12','2020-03-13 20:21:12'),(564,693,689,0,3,'2020-03-13 20:21:12','2020-03-13 20:21:12'),(565,695,694,0,0,'2020-03-13 20:33:43','2020-03-13 20:33:43'),(566,696,694,0,1,'2020-03-13 20:33:43','2020-03-13 20:33:43'),(567,697,694,0,2,'2020-03-13 20:33:43','2020-03-13 20:33:43'),(568,699,698,0,0,'2020-03-13 20:34:03','2020-03-13 20:34:03'),(569,700,698,0,1,'2020-03-13 20:34:03','2020-03-13 20:34:03'),(570,701,698,0,2,'2020-03-13 20:34:03','2020-03-13 20:34:03'),(571,703,702,0,0,'2020-03-13 20:39:33','2020-03-13 20:39:33'),(572,704,702,0,1,'2020-03-13 20:39:33','2020-03-13 20:39:33'),(573,705,702,0,2,'2020-03-13 20:39:33','2020-03-13 20:39:33'),(574,707,706,0,0,'2020-03-13 20:39:50','2020-03-13 20:39:50'),(575,708,706,0,1,'2020-03-13 20:39:50','2020-03-13 20:39:50'),(576,709,706,0,2,'2020-03-13 20:39:50','2020-03-13 20:39:50'),(577,711,710,0,0,'2020-03-13 20:40:24','2020-03-13 20:40:24'),(578,712,710,0,1,'2020-03-13 20:40:24','2020-03-13 20:40:24'),(579,713,710,0,2,'2020-03-13 20:40:24','2020-03-13 20:40:24'),(580,715,714,0,0,'2020-03-13 20:40:51','2020-03-13 20:40:51'),(581,716,714,0,1,'2020-03-13 20:40:51','2020-03-13 20:40:51'),(582,717,714,0,2,'2020-03-13 20:40:51','2020-03-13 20:40:51'),(583,719,718,2,2,'2020-03-13 21:45:11','2020-03-13 21:45:11'),(584,720,718,2,3,'2020-03-13 21:45:17','2020-03-13 21:45:17'),(585,721,718,6,5,'2020-03-13 21:45:26','2020-03-13 21:45:26'),(586,723,722,0,0,'2020-03-13 21:46:01','2020-03-13 21:46:01'),(587,724,722,0,1,'2020-03-13 21:46:01','2020-03-13 21:46:01'),(588,725,722,0,2,'2020-03-13 21:46:01','2020-03-13 21:46:01'),(589,727,726,0,0,'2020-03-13 21:46:21','2020-03-13 21:46:21'),(590,728,726,0,1,'2020-03-13 21:46:21','2020-03-13 21:46:21'),(591,729,726,0,2,'2020-03-13 21:46:21','2020-03-13 21:46:21'),(592,731,730,0,0,'2020-03-13 21:46:40','2020-03-13 21:46:40'),(593,732,730,0,1,'2020-03-13 21:46:40','2020-03-13 21:46:40'),(594,733,730,0,2,'2020-03-13 21:46:40','2020-03-13 21:46:40'),(595,735,734,0,0,'2020-03-13 21:48:10','2020-03-13 21:48:10'),(596,736,734,0,1,'2020-03-13 21:48:10','2020-03-13 21:48:10'),(597,737,734,0,2,'2020-03-13 21:48:10','2020-03-13 21:48:10'),(598,739,738,0,0,'2020-03-13 21:48:43','2020-03-13 21:48:43'),(599,740,738,0,1,'2020-03-13 21:48:43','2020-03-13 21:48:43'),(600,741,738,0,2,'2020-03-13 21:48:43','2020-03-13 21:48:43'),(601,743,742,0,0,'2020-03-13 21:53:07','2020-03-13 21:53:07'),(602,744,742,0,1,'2020-03-13 21:53:07','2020-03-13 21:53:07'),(603,745,742,0,2,'2020-03-13 21:53:07','2020-03-13 21:53:07'),(604,746,742,0,3,'2020-03-13 21:53:13','2020-03-13 21:53:13'),(605,747,742,0,4,'2020-03-13 21:53:13','2020-03-13 21:53:13'),(606,748,742,0,5,'2020-03-13 21:53:13','2020-03-13 21:53:13'),(607,750,749,0,0,'2020-03-13 21:53:41','2020-03-13 21:53:41'),(608,751,749,0,1,'2020-03-13 21:53:41','2020-03-13 21:53:41'),(609,752,749,0,2,'2020-03-13 21:53:41','2020-03-13 21:53:41'),(610,754,753,0,0,'2020-03-13 21:53:59','2020-03-13 21:53:59'),(611,755,753,0,1,'2020-03-13 21:53:59','2020-03-13 21:53:59'),(612,756,753,0,2,'2020-03-13 21:53:59','2020-03-13 21:53:59'),(613,758,757,0,0,'2020-03-13 21:54:21','2020-03-13 21:54:21'),(614,759,757,0,1,'2020-03-13 21:54:21','2020-03-13 21:54:21'),(615,760,757,0,2,'2020-03-13 21:54:21','2020-03-13 21:54:21'),(616,761,757,0,3,'2020-03-13 21:54:26','2020-03-13 21:54:26'),(617,762,757,0,4,'2020-03-13 21:54:26','2020-03-13 21:54:26'),(618,763,757,0,5,'2020-03-13 21:54:26','2020-03-13 21:54:26'),(619,765,764,0,0,'2020-03-13 21:54:52','2020-03-13 21:54:52'),(620,766,764,0,1,'2020-03-13 21:54:52','2020-03-13 21:54:52'),(621,767,764,0,2,'2020-03-13 21:54:52','2020-03-13 21:54:52'),(622,768,764,0,3,'2020-03-13 21:54:52','2020-03-13 21:54:52'),(623,769,764,0,4,'2020-03-13 21:54:52','2020-03-13 21:54:52'),(624,770,764,0,5,'2020-03-13 21:54:52','2020-03-13 21:54:52'),(625,772,771,0,0,'2020-03-13 21:57:21','2020-03-13 21:57:21'),(626,773,771,0,1,'2020-03-13 21:57:21','2020-03-13 21:57:21'),(627,774,771,0,2,'2020-03-13 21:57:21','2020-03-13 21:57:21'),(628,775,771,0,3,'2020-03-13 21:57:21','2020-03-13 21:57:21'),(629,776,771,0,4,'2020-03-13 21:57:21','2020-03-13 21:57:21'),(630,777,771,0,5,'2020-03-13 21:57:21','2020-03-13 21:57:21'),(631,779,778,0,0,'2020-03-13 21:58:23','2020-03-13 21:58:23'),(632,780,778,0,1,'2020-03-13 21:58:23','2020-03-13 21:58:23'),(633,781,778,0,2,'2020-03-13 21:58:23','2020-03-13 21:58:23'),(634,782,778,0,3,'2020-03-13 21:58:23','2020-03-13 21:58:23'),(635,783,778,0,4,'2020-03-13 21:58:23','2020-03-13 21:58:23'),(636,784,778,0,5,'2020-03-13 21:58:23','2020-03-13 21:58:23'),(637,786,785,0,0,'2020-03-13 21:59:21','2020-03-13 21:59:21'),(638,787,785,0,1,'2020-03-13 21:59:21','2020-03-13 21:59:21'),(639,788,785,0,2,'2020-03-13 21:59:21','2020-03-13 21:59:21'),(640,790,789,0,0,'2020-03-13 21:59:53','2020-03-13 21:59:53'),(641,791,789,0,1,'2020-03-13 21:59:53','2020-03-13 21:59:53'),(642,792,789,0,2,'2020-03-13 21:59:53','2020-03-13 21:59:53'),(643,794,793,0,0,'2020-03-13 22:00:11','2020-03-13 22:00:11'),(644,795,793,0,1,'2020-03-13 22:00:11','2020-03-13 22:00:11'),(645,796,793,0,2,'2020-03-13 22:00:11','2020-03-13 22:00:11'),(646,798,797,0,0,'2020-03-13 22:00:32','2020-03-13 22:00:32'),(647,799,797,0,1,'2020-03-13 22:00:32','2020-03-13 22:00:32'),(648,800,797,0,2,'2020-03-13 22:00:32','2020-03-13 22:00:32'),(649,802,801,0,0,'2020-03-13 22:00:54','2020-03-13 22:00:54'),(650,803,801,0,1,'2020-03-13 22:00:54','2020-03-13 22:00:54'),(651,804,801,0,2,'2020-03-13 22:00:54','2020-03-13 22:00:54'),(652,806,805,0,0,'2020-03-13 22:01:24','2020-03-13 22:01:24'),(653,807,805,0,1,'2020-03-13 22:01:24','2020-03-13 22:01:24'),(654,808,805,0,2,'2020-03-13 22:01:24','2020-03-13 22:01:24'),(655,810,809,0,0,'2020-03-13 22:02:05','2020-03-13 22:02:05'),(656,811,809,0,1,'2020-03-13 22:02:05','2020-03-13 22:02:05'),(657,812,809,0,2,'2020-03-13 22:02:05','2020-03-13 22:02:05'),(658,813,809,0,3,'2020-03-13 22:02:05','2020-03-13 22:02:05'),(659,814,809,0,4,'2020-03-13 22:02:05','2020-03-13 22:02:05'),(660,815,809,0,5,'2020-03-13 22:02:05','2020-03-13 22:02:05'),(661,817,816,0,0,'2020-03-13 22:03:44','2020-03-13 22:03:44'),(662,818,816,0,1,'2020-03-13 22:03:44','2020-03-13 22:03:44'),(663,819,816,0,2,'2020-03-13 22:03:44','2020-03-13 22:03:44'),(664,820,816,0,3,'2020-03-13 22:03:44','2020-03-13 22:03:44'),(665,821,816,0,4,'2020-03-13 22:03:44','2020-03-13 22:03:44'),(666,822,816,0,5,'2020-03-13 22:03:44','2020-03-13 22:03:44'),(667,824,823,0,0,'2020-03-13 22:05:36','2020-03-13 22:05:36'),(668,825,823,0,1,'2020-03-13 22:05:36','2020-03-13 22:05:36'),(669,826,823,0,2,'2020-03-13 22:05:36','2020-03-13 22:05:36'),(670,827,823,0,3,'2020-03-13 22:05:36','2020-03-13 22:05:36'),(671,828,823,0,4,'2020-03-13 22:05:36','2020-03-13 22:05:36'),(672,829,823,0,5,'2020-03-13 22:05:36','2020-03-13 22:05:36'),(673,831,160,0,2,'2020-03-16 23:57:41','2020-03-16 23:57:41'),(674,832,160,1,2,'2020-03-16 23:57:55','2020-03-16 23:57:55'),(675,833,160,2,2,'2020-03-16 23:58:04','2020-03-16 23:58:04'),(676,834,160,3,2,'2020-03-16 23:58:15','2020-03-16 23:58:15'),(677,835,160,4,2,'2020-03-16 23:58:23','2020-03-16 23:58:23'),(678,836,160,5,2,'2020-03-16 23:58:29','2020-03-16 23:58:29'),(679,837,160,6,2,'2020-03-16 23:58:36','2020-03-16 23:58:36'),(680,838,160,7,2,'2020-03-16 23:58:43','2020-03-16 23:58:43'),(681,839,160,0,3,'2020-03-16 23:58:50','2020-03-16 23:58:50'),(682,840,160,1,3,'2020-03-16 23:58:56','2020-03-16 23:58:56'),(683,841,160,2,3,'2020-03-16 23:59:04','2020-03-16 23:59:04'),(684,842,160,3,3,'2020-03-16 23:59:11','2020-03-16 23:59:11'),(685,843,160,4,3,'2020-03-16 23:59:17','2020-03-16 23:59:17'),(686,844,160,5,3,'2020-03-16 23:59:25','2020-03-16 23:59:25'),(687,845,160,6,3,'2020-03-16 23:59:31','2020-03-16 23:59:31'),(688,846,160,7,3,'2020-03-16 23:59:38','2020-03-16 23:59:38'),(689,847,160,0,4,'2020-03-16 23:59:45','2020-03-16 23:59:45'),(690,848,160,1,4,'2020-03-16 23:59:51','2020-03-16 23:59:51'),(691,849,160,2,4,'2020-03-16 23:59:56','2020-03-16 23:59:56'),(692,850,160,3,4,'2020-03-17 00:00:02','2020-03-17 00:00:02'),(693,851,160,4,4,'2020-03-17 00:00:08','2020-03-17 00:00:08'),(694,852,160,5,4,'2020-03-17 00:00:17','2020-03-17 00:00:17'),(695,853,160,6,4,'2020-03-17 00:00:34','2020-03-17 00:00:34'),(696,854,160,7,4,'2020-03-17 00:00:41','2020-03-17 00:00:41'),(697,855,160,0,5,'2020-03-17 00:00:49','2020-03-17 00:00:49'),(698,856,160,1,5,'2020-03-17 00:00:57','2020-03-17 00:00:57'),(699,857,160,2,5,'2020-03-17 00:01:06','2020-03-17 00:01:06'),(700,858,160,3,5,'2020-03-17 00:01:13','2020-03-17 00:01:13'),(701,859,160,4,5,'2020-03-17 00:01:20','2020-03-17 00:01:20'),(702,860,160,5,5,'2020-03-17 00:01:28','2020-03-17 00:01:28'),(703,861,160,6,5,'2020-03-17 00:01:35','2020-03-17 00:01:35'),(704,862,160,7,5,'2020-03-17 00:02:02','2020-03-17 00:02:02'),(705,863,160,0,6,'2020-03-17 00:02:10','2020-03-17 00:02:10'),(706,864,160,1,6,'2020-03-17 00:02:17','2020-03-17 00:02:17'),(707,865,160,2,6,'2020-03-17 00:02:24','2020-03-17 00:02:24'),(708,866,160,3,6,'2020-03-17 00:02:32','2020-03-17 00:02:32'),(709,867,160,4,6,'2020-03-17 00:02:40','2020-03-17 00:02:40'),(710,868,160,5,6,'2020-03-17 00:02:47','2020-03-17 00:02:47'),(711,869,160,6,6,'2020-03-17 00:02:54','2020-03-17 00:02:54'),(712,870,160,7,6,'2020-03-17 00:03:00','2020-03-17 00:03:00'),(713,871,160,0,7,'2020-03-17 00:03:46','2020-03-17 00:03:46'),(714,872,160,1,7,'2020-03-17 00:03:53','2020-03-17 00:03:53'),(715,873,160,2,7,'2020-03-17 00:04:02','2020-03-17 00:04:02'),(716,874,160,3,7,'2020-03-17 00:04:10','2020-03-17 00:04:10'),(717,875,160,4,7,'2020-03-17 00:04:15','2020-03-17 00:04:15'),(718,876,160,5,7,'2020-03-17 00:04:22','2020-03-17 00:04:22'),(719,877,160,6,7,'2020-03-17 00:04:29','2020-03-17 00:04:29'),(720,878,160,7,7,'2020-03-17 00:04:37','2020-03-17 00:04:37'),(721,879,160,0,8,'2020-03-17 00:04:44','2020-03-17 00:04:44'),(722,880,160,1,8,'2020-03-17 00:04:51','2020-03-17 00:04:51'),(723,881,160,2,8,'2020-03-17 00:04:59','2020-03-17 00:04:59'),(724,882,160,3,8,'2020-03-17 00:05:04','2020-03-17 00:05:04'),(725,883,160,4,8,'2020-03-17 00:05:10','2020-03-17 00:05:10'),(726,884,160,5,8,'2020-03-17 00:05:16','2020-03-17 00:05:16'),(727,885,160,6,8,'2020-03-17 00:05:22','2020-03-17 00:05:22'),(728,886,160,7,8,'2020-03-17 00:05:28','2020-03-17 00:05:28'),(729,887,160,0,9,'2020-03-17 00:05:34','2020-03-17 00:05:34'),(730,888,160,1,9,'2020-03-17 00:05:40','2020-03-17 00:05:40'),(731,889,160,2,9,'2020-03-17 00:05:47','2020-03-17 00:05:47'),(732,890,160,3,9,'2020-03-17 00:05:53','2020-03-17 00:05:53'),(733,891,160,4,9,'2020-03-17 00:05:59','2020-03-17 00:05:59'),(734,892,160,5,9,'2020-03-17 00:06:06','2020-03-17 00:06:06'),(735,893,160,6,9,'2020-03-17 00:06:14','2020-03-17 00:06:14'),(736,894,160,7,9,'2020-03-17 00:06:21','2020-03-17 00:06:21'),(737,895,160,0,10,'2020-03-17 00:06:28','2020-03-17 00:06:28'),(738,896,160,1,10,'2020-03-17 00:06:35','2020-03-17 00:06:35'),(739,897,160,2,10,'2020-03-17 00:06:41','2020-03-17 00:06:41'),(740,898,160,3,10,'2020-03-17 00:06:47','2020-03-17 00:06:47'),(741,899,160,4,10,'2020-03-17 00:06:54','2020-03-17 00:06:54'),(742,900,160,5,10,'2020-03-17 00:07:00','2020-03-17 00:07:00'),(743,901,160,6,10,'2020-03-17 00:07:06','2020-03-17 00:07:06'),(744,902,160,7,10,'2020-03-17 00:07:12','2020-03-17 00:07:12'),(745,903,160,0,11,'2020-03-17 00:07:18','2020-03-17 00:07:18'),(746,904,160,1,11,'2020-03-17 00:07:27','2020-03-17 00:07:27'),(747,905,160,2,11,'2020-03-17 00:07:32','2020-03-17 00:07:32'),(748,906,160,3,11,'2020-03-17 00:07:39','2020-03-17 00:07:39'),(749,907,160,4,11,'2020-03-17 00:07:44','2020-03-17 00:07:44'),(750,908,160,5,11,'2020-03-17 00:07:52','2020-03-17 00:07:52'),(751,909,160,6,11,'2020-03-17 00:07:59','2020-03-17 00:07:59'),(752,910,160,7,11,'2020-03-17 00:08:05','2020-03-17 00:08:05'),(753,912,911,0,0,'2020-03-17 00:09:59','2020-03-17 00:09:59'),(754,913,911,1,0,'2020-03-17 00:10:07','2020-03-17 00:10:07'),(755,914,911,2,0,'2020-03-17 00:10:14','2020-03-17 00:10:14'),(756,915,911,3,0,'2020-03-17 00:10:23','2020-03-17 00:10:23'),(757,916,911,4,0,'2020-03-17 00:10:29','2020-03-17 00:10:29'),(758,917,911,5,0,'2020-03-17 00:10:37','2020-03-17 00:10:37'),(759,918,911,6,0,'2020-03-17 00:10:44','2020-03-17 00:10:44'),(760,919,911,7,0,'2020-03-17 00:11:24','2020-03-17 00:11:24'),(761,920,911,0,1,'2020-03-17 00:11:41','2020-03-17 00:11:41'),(762,921,911,1,1,'2020-03-17 00:11:49','2020-03-17 00:11:49'),(763,922,911,2,1,'2020-03-17 00:11:58','2020-03-17 00:11:58'),(764,923,911,3,1,'2020-03-17 00:12:04','2020-03-17 00:12:04'),(765,924,911,4,1,'2020-03-17 00:12:09','2020-03-17 00:12:09'),(766,925,911,5,1,'2020-03-17 00:12:16','2020-03-17 00:12:16'),(767,926,911,6,1,'2020-03-17 00:12:24','2020-03-17 00:12:24'),(768,927,911,7,1,'2020-03-17 00:12:33','2020-03-17 00:12:33'),(769,929,928,0,0,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(770,930,928,0,1,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(771,931,928,0,2,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(772,932,928,0,3,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(773,933,928,0,4,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(774,934,928,0,5,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(775,935,928,0,6,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(776,936,928,0,7,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(777,937,928,0,8,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(778,938,928,0,9,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(779,939,928,0,10,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(780,940,928,0,11,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(781,941,928,1,0,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(782,942,928,1,1,'2020-03-17 00:47:52','2020-03-17 00:47:52'),(783,943,928,1,2,'2020-03-17 00:48:03','2020-03-17 00:48:03'),(784,944,928,1,3,'2020-03-17 00:48:03','2020-03-17 00:48:03'),(785,945,928,1,4,'2020-03-17 00:48:03','2020-03-17 00:48:03'),(786,946,928,1,5,'2020-03-17 00:48:03','2020-03-17 00:48:03'),(787,947,928,1,6,'2020-03-17 00:48:03','2020-03-17 00:48:03'),(788,948,928,1,7,'2020-03-17 00:48:03','2020-03-17 00:48:03'),(789,949,928,1,8,'2020-03-17 00:48:03','2020-03-17 00:48:03'),(790,951,950,0,0,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(791,952,950,0,1,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(792,953,950,0,2,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(793,954,950,0,3,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(794,955,950,0,4,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(795,956,950,0,5,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(796,957,950,0,6,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(797,958,950,0,7,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(798,959,950,0,8,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(799,960,950,0,9,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(800,961,950,0,10,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(801,962,950,0,11,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(802,963,950,1,0,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(803,964,950,1,1,'2020-03-17 00:48:41','2020-03-17 00:48:41'),(804,965,950,1,2,'2020-03-17 00:48:45','2020-03-17 00:48:45'),(805,966,950,1,3,'2020-03-17 00:48:45','2020-03-17 00:48:45'),(806,967,950,1,4,'2020-03-17 00:48:45','2020-03-17 00:48:45'),(807,968,950,1,5,'2020-03-17 00:48:45','2020-03-17 00:48:45'),(808,969,950,1,6,'2020-03-17 00:48:45','2020-03-17 00:48:45'),(809,970,950,1,7,'2020-03-17 00:48:45','2020-03-17 00:48:45'),(810,971,950,1,8,'2020-03-17 00:48:45','2020-03-17 00:48:45'),(811,973,972,0,0,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(812,974,972,0,1,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(813,975,972,0,2,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(814,976,972,0,3,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(815,977,972,0,4,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(816,978,972,0,5,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(817,979,972,0,6,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(818,980,972,0,7,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(819,981,972,0,8,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(820,982,972,0,9,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(821,983,972,0,10,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(822,984,972,0,11,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(823,985,972,1,0,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(824,986,972,1,1,'2020-03-17 00:53:06','2020-03-17 00:53:06'),(825,989,988,0,0,'2020-03-17 00:54:44','2020-03-17 00:54:44'),(826,990,988,0,1,'2020-03-17 00:54:44','2020-03-17 00:54:44'),(827,991,988,0,2,'2020-03-17 00:54:44','2020-03-17 00:54:44'),(828,992,988,0,3,'2020-03-17 00:54:44','2020-03-17 00:54:44'),(829,993,988,0,4,'2020-03-17 00:54:44','2020-03-17 00:54:44'),(830,994,988,0,5,'2020-03-17 00:54:44','2020-03-17 00:54:44'),(831,995,988,0,6,'2020-03-17 00:54:44','2020-03-17 00:54:44'),(832,999,998,0,0,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(833,1000,998,0,1,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(834,1001,998,0,2,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(835,1002,998,0,3,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(836,1003,998,0,4,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(837,1004,998,0,5,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(838,1005,998,0,6,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(839,1006,998,0,7,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(840,1007,998,0,8,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(841,1008,998,0,9,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(842,1009,998,0,10,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(843,1010,998,0,11,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(844,1011,998,1,0,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(845,1012,998,1,1,'2020-03-17 01:06:38','2020-03-17 01:06:38'),(846,1013,998,1,2,'2020-03-17 01:06:42','2020-03-17 01:06:42'),(847,1014,998,1,3,'2020-03-17 01:06:42','2020-03-17 01:06:42'),(848,1015,998,1,4,'2020-03-17 01:06:42','2020-03-17 01:06:42'),(849,1016,998,1,5,'2020-03-17 01:06:42','2020-03-17 01:06:42'),(850,1017,998,1,6,'2020-03-17 01:06:42','2020-03-17 01:06:42'),(851,1018,998,1,7,'2020-03-17 01:06:42','2020-03-17 01:06:42'),(852,1019,998,1,8,'2020-03-17 01:06:42','2020-03-17 01:06:42'),(853,1021,1020,0,0,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(854,1022,1020,0,1,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(855,1023,1020,0,2,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(856,1024,1020,0,3,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(857,1025,1020,0,4,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(858,1026,1020,0,5,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(859,1027,1020,0,6,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(860,1028,1020,0,7,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(861,1029,1020,0,8,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(862,1030,1020,0,9,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(863,1031,1020,0,10,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(864,1032,1020,0,11,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(865,1033,1020,1,0,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(866,1034,1020,1,1,'2020-03-17 01:18:31','2020-03-17 01:18:31'),(867,1035,1020,1,2,'2020-03-17 01:19:21','2020-03-17 01:19:21'),(868,1036,1020,1,3,'2020-03-17 01:19:21','2020-03-17 01:19:21'),(869,1037,1020,1,4,'2020-03-17 01:19:21','2020-03-17 01:19:21'),(870,1038,1020,1,5,'2020-03-17 01:19:21','2020-03-17 01:19:21'),(871,1039,1020,1,6,'2020-03-17 01:19:21','2020-03-17 01:19:21'),(872,1040,1020,1,7,'2020-03-17 01:19:21','2020-03-17 01:19:21'),(873,1041,1020,1,8,'2020-03-17 01:19:21','2020-03-17 01:19:21'),(874,1043,1042,0,0,'2020-03-17 01:21:55','2020-03-17 01:21:55'),(875,1044,1042,0,1,'2020-03-17 01:21:55','2020-03-17 01:21:55'),(876,1045,1042,0,2,'2020-03-17 01:21:55','2020-03-17 01:21:55'),(877,1046,1042,0,3,'2020-03-17 01:21:55','2020-03-17 01:21:55'),(878,1047,1042,0,4,'2020-03-17 01:21:55','2020-03-17 01:21:55'),(879,1048,1042,0,5,'2020-03-17 01:21:55','2020-03-17 01:21:55'),(880,1049,1042,0,6,'2020-03-17 01:21:55','2020-03-17 01:21:55'),(881,1051,1050,0,0,'2020-03-17 01:24:20','2020-03-17 01:24:20'),(882,1052,1050,0,1,'2020-03-17 01:24:20','2020-03-17 01:24:20'),(883,1053,1050,0,2,'2020-03-17 01:24:20','2020-03-17 01:24:20'),(884,1054,1050,0,3,'2020-03-17 01:24:20','2020-03-17 01:24:20'),(885,1055,1050,0,4,'2020-03-17 01:24:20','2020-03-17 01:24:20'),(886,1056,1050,0,5,'2020-03-17 01:24:20','2020-03-17 01:24:20'),(887,1057,1050,0,6,'2020-03-17 01:24:20','2020-03-17 01:24:20'),(888,1058,1050,0,7,'2020-03-17 01:24:23','2020-03-17 01:24:23'),(889,1059,1050,0,8,'2020-03-17 01:24:23','2020-03-17 01:24:23'),(890,1060,1050,0,9,'2020-03-17 01:24:23','2020-03-17 01:24:23'),(891,1061,1050,0,10,'2020-03-17 01:24:23','2020-03-17 01:24:23'),(892,1062,1050,0,11,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(893,1063,1050,1,0,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(894,1064,1050,1,1,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(895,1065,1050,1,2,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(896,1066,1050,1,3,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(897,1067,1050,1,4,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(898,1068,1050,1,5,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(899,1069,1050,1,6,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(900,1070,1050,1,7,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(901,1071,1050,1,8,'2020-03-17 01:24:24','2020-03-17 01:24:24'),(902,1073,1072,0,0,'2020-03-17 01:26:01','2020-03-17 01:26:01'),(903,1074,1072,0,1,'2020-03-17 01:26:01','2020-03-17 01:26:01'),(904,1075,1072,0,2,'2020-03-17 01:26:01','2020-03-17 01:26:01'),(905,1076,1072,0,3,'2020-03-17 01:26:01','2020-03-17 01:26:01'),(906,1077,1072,0,4,'2020-03-17 01:26:01','2020-03-17 01:26:01'),(907,1078,1072,0,5,'2020-03-17 01:26:01','2020-03-17 01:26:01'),(908,1079,1072,0,6,'2020-03-17 01:26:01','2020-03-17 01:26:01'),(909,1080,1072,0,7,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(910,1081,1072,0,8,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(911,1082,1072,0,9,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(912,1083,1072,0,10,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(913,1084,1072,0,11,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(914,1085,1072,1,0,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(915,1086,1072,1,1,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(916,1087,1072,1,2,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(917,1088,1072,1,3,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(918,1089,1072,1,4,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(919,1090,1072,1,5,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(920,1091,1072,1,6,'2020-03-17 01:26:08','2020-03-17 01:26:08'),(921,1092,1072,1,7,'2020-03-17 01:26:09','2020-03-17 01:26:09'),(922,1093,1072,1,8,'2020-03-17 01:26:09','2020-03-17 01:26:09'),(923,1095,1094,0,0,'2020-03-17 01:26:34','2020-03-17 01:26:34'),(924,1096,1094,0,1,'2020-03-17 01:26:34','2020-03-17 01:26:34'),(925,1097,1094,0,2,'2020-03-17 01:26:34','2020-03-17 01:26:34'),(926,1098,1094,0,3,'2020-03-17 01:26:34','2020-03-17 01:26:34'),(927,1099,1094,0,4,'2020-03-17 01:26:34','2020-03-17 01:26:34'),(928,1100,1094,0,5,'2020-03-17 01:26:34','2020-03-17 01:26:34'),(929,1101,1094,0,6,'2020-03-17 01:26:34','2020-03-17 01:26:34'),(930,1103,1102,0,0,'2020-03-17 01:27:15','2020-03-17 01:27:15'),(931,1104,1102,0,1,'2020-03-17 01:27:15','2020-03-17 01:27:15'),(932,1105,1102,0,2,'2020-03-17 01:27:15','2020-03-17 01:27:15'),(933,1106,1102,0,3,'2020-03-17 01:27:15','2020-03-17 01:27:15'),(934,1107,1102,0,4,'2020-03-17 01:27:15','2020-03-17 01:27:15'),(935,1108,1102,0,5,'2020-03-17 01:27:15','2020-03-17 01:27:15'),(936,1109,1102,0,6,'2020-03-17 01:27:15','2020-03-17 01:27:15'),(937,1110,1102,0,7,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(938,1111,1102,0,8,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(939,1112,1102,0,9,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(940,1113,1102,0,10,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(941,1114,1102,0,11,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(942,1115,1102,1,0,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(943,1116,1102,1,1,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(944,1117,1102,1,2,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(945,1118,1102,1,3,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(946,1119,1102,1,4,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(947,1120,1102,1,5,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(948,1121,1102,1,6,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(949,1122,1102,1,7,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(950,1123,1102,1,8,'2020-03-17 01:27:19','2020-03-17 01:27:19'),(951,1125,1124,0,0,'2020-03-17 01:28:57','2020-03-17 01:28:57'),(952,1126,1124,0,1,'2020-03-17 01:28:57','2020-03-17 01:28:57'),(953,1127,1124,0,2,'2020-03-17 01:28:57','2020-03-17 01:28:57'),(954,1128,1124,0,3,'2020-03-17 01:28:57','2020-03-17 01:28:57'),(955,1129,1124,0,4,'2020-03-17 01:28:57','2020-03-17 01:28:57'),(956,1130,1124,0,5,'2020-03-17 01:28:57','2020-03-17 01:28:57'),(957,1131,1124,0,6,'2020-03-17 01:28:57','2020-03-17 01:28:57'),(958,1133,1132,0,0,'2020-03-17 01:30:38','2020-03-17 01:30:38'),(959,1134,1132,0,1,'2020-03-17 01:30:38','2020-03-17 01:30:38'),(960,1135,1132,0,2,'2020-03-17 01:30:38','2020-03-17 01:30:38'),(961,1136,1132,0,3,'2020-03-17 01:30:38','2020-03-17 01:30:38'),(962,1137,1132,0,4,'2020-03-17 01:30:38','2020-03-17 01:30:38'),(963,1138,1132,0,5,'2020-03-17 01:30:38','2020-03-17 01:30:38'),(964,1139,1132,0,6,'2020-03-17 01:30:38','2020-03-17 01:30:38'),(965,1140,1132,0,7,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(966,1141,1132,0,8,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(967,1142,1132,0,9,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(968,1143,1132,0,10,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(969,1144,1132,0,11,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(970,1145,1132,1,0,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(971,1146,1132,1,1,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(972,1147,1132,1,2,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(973,1148,1132,1,3,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(974,1149,1132,1,4,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(975,1150,1132,1,5,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(976,1151,1132,1,6,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(977,1152,1132,1,7,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(978,1153,1132,1,8,'2020-03-17 01:30:52','2020-03-17 01:30:52'),(979,1155,1154,0,0,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(980,1156,1154,0,1,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(981,1157,1154,0,2,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(982,1158,1154,0,3,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(983,1159,1154,0,4,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(984,1160,1154,0,5,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(985,1161,1154,0,6,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(986,1162,1154,0,7,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(987,1163,1154,0,8,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(988,1164,1154,0,9,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(989,1165,1154,0,10,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(990,1166,1154,0,11,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(991,1167,1154,1,0,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(992,1168,1154,1,1,'2020-03-17 01:45:44','2020-03-17 01:45:44'),(993,1170,1169,0,0,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(994,1171,1169,0,1,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(995,1172,1169,0,2,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(996,1173,1169,0,3,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(997,1174,1169,0,4,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(998,1175,1169,0,5,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(999,1176,1169,0,6,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1000,1177,1169,0,7,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1001,1178,1169,0,8,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1002,1179,1169,0,9,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1003,1180,1169,0,10,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1004,1181,1169,0,11,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1005,1182,1169,1,0,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1006,1183,1169,1,1,'2020-03-17 01:46:30','2020-03-17 01:46:30'),(1007,1184,1169,1,2,'2020-03-17 01:46:35','2020-03-17 01:46:35'),(1008,1185,1169,1,3,'2020-03-17 01:46:35','2020-03-17 01:46:35'),(1009,1186,1169,1,4,'2020-03-17 01:46:35','2020-03-17 01:46:35'),(1010,1187,1169,1,5,'2020-03-17 01:46:35','2020-03-17 01:46:35'),(1011,1188,1169,1,6,'2020-03-17 01:46:35','2020-03-17 01:46:35'),(1012,1189,1169,1,7,'2020-03-17 01:46:35','2020-03-17 01:46:35'),(1013,1190,1169,1,8,'2020-03-17 01:46:35','2020-03-17 01:46:35'),(1014,1192,1191,0,0,'2020-03-17 01:47:52','2020-03-17 01:47:52'),(1015,1193,1191,0,1,'2020-03-17 01:47:52','2020-03-17 01:47:52'),(1016,1194,1191,0,2,'2020-03-17 01:47:52','2020-03-17 01:47:52'),(1017,1195,1191,0,3,'2020-03-17 01:47:52','2020-03-17 01:47:52'),(1018,1196,1191,0,4,'2020-03-17 01:47:52','2020-03-17 01:47:52'),(1019,1197,1191,0,5,'2020-03-17 01:47:52','2020-03-17 01:47:52'),(1020,1198,1191,0,6,'2020-03-17 01:47:52','2020-03-17 01:47:52'),(1021,1200,1199,0,0,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1022,1201,1199,0,1,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1023,1202,1199,0,2,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1024,1203,1199,0,3,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1025,1204,1199,0,4,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1026,1205,1199,0,5,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1027,1206,1199,0,6,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1028,1207,1199,0,7,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1029,1208,1199,0,8,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1030,1209,1199,0,9,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1031,1210,1199,0,10,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1032,1211,1199,0,11,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1033,1212,1199,1,0,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1034,1213,1199,1,1,'2020-03-17 01:51:01','2020-03-17 01:51:01'),(1035,1215,1214,0,0,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1036,1216,1214,0,1,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1037,1217,1214,0,2,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1038,1218,1214,0,3,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1039,1219,1214,0,4,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1040,1220,1214,0,5,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1041,1221,1214,0,6,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1042,1222,1214,0,7,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1043,1223,1214,0,8,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1044,1224,1214,0,9,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1045,1225,1214,0,10,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1046,1226,1214,0,11,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1047,1227,1214,1,0,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1048,1228,1214,1,1,'2020-03-17 01:51:37','2020-03-17 01:51:37'),(1049,1229,1214,1,2,'2020-03-17 01:51:41','2020-03-17 01:51:41'),(1050,1230,1214,1,3,'2020-03-17 01:51:41','2020-03-17 01:51:41'),(1051,1231,1214,1,4,'2020-03-17 01:51:41','2020-03-17 01:51:41'),(1052,1232,1214,1,5,'2020-03-17 01:51:41','2020-03-17 01:51:41'),(1053,1233,1214,1,6,'2020-03-17 01:51:41','2020-03-17 01:51:41'),(1054,1234,1214,1,7,'2020-03-17 01:51:41','2020-03-17 01:51:41'),(1055,1235,1214,1,8,'2020-03-17 01:51:41','2020-03-17 01:51:41'),(1056,1237,1236,0,0,'2020-03-17 01:53:36','2020-03-17 01:53:36'),(1057,1238,1236,0,1,'2020-03-17 01:53:36','2020-03-17 01:53:36'),(1058,1239,1236,0,2,'2020-03-17 01:53:36','2020-03-17 01:53:36'),(1059,1240,1236,0,3,'2020-03-17 01:53:36','2020-03-17 01:53:36'),(1060,1241,1236,0,4,'2020-03-17 01:53:36','2020-03-17 01:53:36'),(1061,1242,1236,0,5,'2020-03-17 01:53:36','2020-03-17 01:53:36'),(1062,1243,1236,0,6,'2020-03-17 01:53:36','2020-03-17 01:53:36'),(1063,1245,1244,0,0,'2020-03-17 01:53:54','2020-03-17 01:53:54'),(1064,1246,1244,0,1,'2020-03-17 01:53:54','2020-03-17 01:53:54'),(1065,1247,1244,0,2,'2020-03-17 01:53:54','2020-03-17 01:53:54'),(1066,1248,1244,0,3,'2020-03-17 01:53:54','2020-03-17 01:53:54'),(1067,1249,1244,0,4,'2020-03-17 01:53:54','2020-03-17 01:53:54'),(1068,1250,1244,0,5,'2020-03-17 01:53:54','2020-03-17 01:53:54'),(1069,1251,1244,0,6,'2020-03-17 01:53:54','2020-03-17 01:53:54'),(1070,1253,1252,0,0,'2020-03-17 01:56:25','2020-03-17 01:56:25'),(1071,1254,1252,0,1,'2020-03-17 01:56:25','2020-03-17 01:56:25'),(1072,1255,1252,0,2,'2020-03-17 01:56:25','2020-03-17 01:56:25'),(1073,1256,1252,0,3,'2020-03-17 01:56:25','2020-03-17 01:56:25'),(1074,1257,1252,0,4,'2020-03-17 01:56:25','2020-03-17 01:56:25'),(1075,1258,1252,0,5,'2020-03-17 01:56:25','2020-03-17 01:56:25'),(1076,1259,1252,0,6,'2020-03-17 01:56:25','2020-03-17 01:56:25'),(1077,1261,1260,0,0,'2020-03-17 01:57:43','2020-03-17 01:57:43'),(1078,1262,1260,0,1,'2020-03-17 01:57:43','2020-03-17 01:57:43'),(1079,1263,1260,0,2,'2020-03-17 01:57:43','2020-03-17 01:57:43'),(1080,1264,1260,0,3,'2020-03-17 01:57:43','2020-03-17 01:57:43'),(1081,1265,1260,0,4,'2020-03-17 01:57:43','2020-03-17 01:57:43'),(1082,1266,1260,0,5,'2020-03-17 01:57:43','2020-03-17 01:57:43'),(1083,1267,1260,0,6,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1084,1268,1260,0,7,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1085,1269,1260,0,8,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1086,1270,1260,0,9,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1087,1271,1260,0,10,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1088,1272,1260,0,11,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1089,1273,1260,1,0,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1090,1274,1260,1,1,'2020-03-17 01:57:44','2020-03-17 01:57:44'),(1091,1276,1275,0,0,'2020-03-17 01:58:52','2020-03-17 01:58:52'),(1092,1277,1275,0,1,'2020-03-17 01:58:52','2020-03-17 01:58:52'),(1093,1278,1275,0,2,'2020-03-17 01:58:52','2020-03-17 01:58:52'),(1094,1279,1275,0,3,'2020-03-17 01:58:52','2020-03-17 01:58:52'),(1095,1280,1275,0,4,'2020-03-17 01:58:52','2020-03-17 01:58:52'),(1096,1281,1275,0,5,'2020-03-17 01:58:52','2020-03-17 01:58:52'),(1097,1282,1275,0,6,'2020-03-17 01:58:52','2020-03-17 01:58:52'),(1098,1284,1283,0,0,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1099,1285,1283,0,1,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1100,1286,1283,0,2,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1101,1287,1283,0,3,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1102,1288,1283,0,4,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1103,1289,1283,0,5,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1104,1290,1283,0,6,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1105,1291,1283,0,7,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1106,1292,1283,0,8,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1107,1293,1283,0,9,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1108,1294,1283,0,10,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1109,1295,1283,0,11,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1110,1296,1283,1,0,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1111,1297,1283,1,1,'2020-03-17 01:59:36','2020-03-17 01:59:36'),(1112,1299,1298,0,0,'2020-03-17 01:59:55','2020-03-17 01:59:55'),(1113,1300,1298,0,1,'2020-03-17 01:59:55','2020-03-17 01:59:55'),(1114,1301,1298,0,2,'2020-03-17 01:59:55','2020-03-17 01:59:55'),(1115,1302,1298,0,3,'2020-03-17 01:59:55','2020-03-17 01:59:55'),(1116,1303,1298,0,4,'2020-03-17 01:59:55','2020-03-17 01:59:55'),(1117,1304,1298,0,5,'2020-03-17 01:59:55','2020-03-17 01:59:55'),(1118,1305,1298,0,6,'2020-03-17 01:59:55','2020-03-17 01:59:55'),(1119,1306,1298,0,7,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1120,1307,1298,0,8,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1121,1308,1298,0,9,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1122,1309,1298,0,10,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1123,1310,1298,0,11,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1124,1311,1298,1,0,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1125,1312,1298,1,1,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1126,1313,1298,1,2,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1127,1314,1298,1,3,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1128,1315,1298,1,4,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1129,1316,1298,1,5,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1130,1317,1298,1,6,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1131,1318,1298,1,7,'2020-03-17 01:59:58','2020-03-17 01:59:58'),(1132,1319,1298,1,8,'2020-03-17 01:59:58','2020-03-17 01:59:58');
/*!40000 ALTER TABLE `part_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `plan_associations`
--

DROP TABLE IF EXISTS `plan_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `plan_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `plan_id` int(11) DEFAULT NULL,
  `operation_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`),
  KEY `index_plan_associations_on_operation_id` (`operation_id`),
  KEY `index_plan_associations_on_plan_id` (`plan_id`)
) ENGINE=InnoDB AUTO_INCREMENT=82 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `plan_associations`
--

LOCK TABLES `plan_associations` WRITE;
/*!40000 ALTER TABLE `plan_associations` DISABLE KEYS */;
INSERT INTO `plan_associations` VALUES (1,1,1,'2020-03-11 16:30:09','2020-03-11 16:30:09'),(2,2,2,'2020-03-11 17:33:15','2020-03-11 17:33:15'),(3,3,3,'2020-03-11 20:58:20','2020-03-11 20:58:20'),(4,4,4,'2020-03-11 22:19:28','2020-03-11 22:19:28'),(10,10,11,'2020-03-12 22:36:14','2020-03-12 22:36:14'),(11,11,12,'2020-03-12 22:57:17','2020-03-12 22:57:17'),(12,12,13,'2020-03-12 22:58:47','2020-03-12 22:58:47'),(13,13,14,'2020-03-12 22:58:58','2020-03-12 22:58:58'),(14,14,16,'2020-03-13 20:32:48','2020-03-13 20:32:48'),(15,14,17,'2020-03-13 20:32:48','2020-03-13 20:32:48'),(16,14,18,'2020-03-13 20:32:48','2020-03-13 20:32:48'),(17,15,19,'2020-03-13 20:37:00','2020-03-13 20:37:00'),(18,15,20,'2020-03-13 20:37:00','2020-03-13 20:37:00'),(19,15,21,'2020-03-13 20:37:00','2020-03-13 20:37:00'),(20,16,22,'2020-03-13 20:37:18','2020-03-13 20:37:18'),(22,16,24,'2020-03-13 20:37:18','2020-03-13 20:37:18'),(23,16,25,'2020-03-13 20:39:05','2020-03-13 20:39:05'),(24,17,26,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(25,17,27,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(26,17,28,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(27,17,29,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(28,16,30,'2020-03-13 21:50:54','2020-03-13 21:50:54'),(29,18,31,'2020-03-13 21:52:12','2020-03-13 21:52:12'),(30,18,32,'2020-03-13 21:52:12','2020-03-13 21:52:12'),(31,18,33,'2020-03-13 21:52:12','2020-03-13 21:52:12'),(32,18,34,'2020-03-13 21:52:13','2020-03-13 21:52:13'),(33,19,35,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(34,19,36,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(35,19,37,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(36,19,38,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(37,20,39,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(38,20,40,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(39,20,41,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(40,20,42,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(41,21,43,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(42,21,44,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(43,21,45,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(44,21,46,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(45,22,47,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(47,22,49,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(48,22,50,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(49,22,51,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(50,23,52,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(51,23,53,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(52,23,54,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(53,23,55,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(54,24,56,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(55,24,57,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(56,24,58,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(57,24,59,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(58,25,60,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(59,25,61,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(60,25,62,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(61,25,63,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(62,26,64,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(63,26,65,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(64,26,66,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(65,26,67,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(66,27,68,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(67,27,69,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(68,27,70,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(69,27,71,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(70,28,72,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(71,28,73,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(72,28,74,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(73,28,75,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(74,29,76,'2020-03-17 01:56:06','2020-03-17 01:56:06'),(75,29,77,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(76,29,78,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(77,29,79,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(78,30,80,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(79,30,81,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(80,30,82,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(81,30,83,'2020-03-17 01:57:24','2020-03-17 01:57:24');
/*!40000 ALTER TABLE `plan_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `plans`
--

DROP TABLE IF EXISTS `plans`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `plans` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `status` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `cost_limit` float DEFAULT NULL,
  `folder` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `layout` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`),
  KEY `index_plans_on_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `plans`
--

LOCK TABLES `plans` WRITE;
/*!40000 ALTER TABLE `plans` DISABLE KEYS */;
INSERT INTO `plans` VALUES (1,1,'2020-03-11 16:30:09','2020-03-11 16:30:21',1,'RNA_QC',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(2,1,'2020-03-11 17:33:15','2020-03-11 17:35:15',1,'RNA_QC (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(3,1,'2020-03-11 20:58:20','2020-03-11 21:07:08',1,'RNA_QC',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(4,1,'2020-03-11 22:19:28','2020-03-12 22:21:20',1,'RNA_Prep',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(10,1,'2020-03-12 22:36:14','2020-03-12 22:36:41',1,'RNA_Prep',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(11,1,'2020-03-12 22:57:17','2020-03-12 22:57:39',1,'RNA_Prep (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(12,1,'2020-03-12 22:58:47','2020-03-12 22:58:51',1,'RNA_Prep (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(13,1,'2020-03-12 22:58:58','2020-03-12 23:00:24',1,'RNA_Prep (copy) (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(14,1,'2020-03-13 20:32:48','2020-03-13 20:33:02',1,'RNA_Prep',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(15,1,'2020-03-13 20:37:00','2020-03-13 20:37:10',1,'RNA_Prep (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(16,1,'2020-03-13 20:37:17','2020-03-13 20:39:10',1,'RNA_Prep (copy) (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(17,1,'2020-03-13 21:44:52','2020-03-13 21:45:49',1,'C_DNA_QC',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(18,1,'2020-03-13 21:52:12','2020-03-13 21:52:38',1,';kjdjhsfjghkdsfjgjk',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(19,1,'2020-03-13 21:52:22','2020-03-13 21:52:27',1,'C_DNA_QC (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(20,1,'2020-03-13 21:58:56','2020-03-13 21:59:00',1,'C_DNA_QC (copy) (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(21,1,'2020-03-13 21:59:07','2020-03-13 21:59:11',1,';kjdjhsfjghkdsfjgjk (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(22,1,'2020-03-17 00:31:53','2020-03-17 00:47:14',1,'RNA_QC',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(23,1,'2020-03-17 00:46:14','2020-03-17 00:47:06',1,'Normalization Pooling',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(24,1,'2020-03-17 01:20:19','2020-03-17 01:20:23',1,'Normalization Pooling (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(25,1,'2020-03-17 01:20:30','2020-03-17 01:20:37',1,'Normalization Pooling (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(26,1,'2020-03-17 01:23:30','2020-03-17 01:23:35',1,'RNA_QC (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(27,1,'2020-03-17 01:43:47','2020-03-17 01:44:06',1,'RNA_QC (copy) (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(28,1,'2020-03-17 01:43:53','2020-03-17 01:43:58',1,'Normalization Pooling (copy) (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(29,1,'2020-03-17 01:56:06','2020-03-17 01:56:13',1,'Normalization Pooling (copy) (copy) (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}'),(30,1,'2020-03-17 01:57:24','2020-03-17 01:57:29',1,'RNA_QC (copy) (copy) (copy)',NULL,NULL,NULL,'{\"id\":0,\"parent_id\":-1,\"name\":\"Untitled Module 0\",\"x\":160,\"y\":160,\"width\":160,\"height\":60,\"model\":{\"model\":\"Module\"},\"input\":null,\"output\":null,\"documentation\":\"No documentation yet for this module.\",\"children\":null,\"wires\":null,\"text_boxes\":null}');
/*!40000 ALTER TABLE `plans` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sample_types`
--

DROP TABLE IF EXISTS `sample_types`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sample_types` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sample_types`
--

LOCK TABLES `sample_types` WRITE;
/*!40000 ALTER TABLE `sample_types` DISABLE KEYS */;
INSERT INTO `sample_types` VALUES (1,'RNA Sample','An individual unique sample of RNA','2020-03-11 15:57:53','2020-03-11 15:57:53');
/*!40000 ALTER TABLE `sample_types` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `samples`
--

DROP TABLE IF EXISTS `samples`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `samples` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `sample_type_id` int(11) DEFAULT NULL,
  `project` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `data` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=293 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `samples`
--

LOCK TABLES `samples` WRITE;
/*!40000 ALTER TABLE `samples` DISABLE KEYS */;
INSERT INTO `samples` VALUES (1,'6011-S1',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S1',NULL),(2,'6011-S2',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S2',NULL),(3,'6011-S3',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S3',NULL),(4,'6011-S4',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S4',NULL),(5,'6011-S5',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S5',NULL),(6,'6011-S6',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S6',NULL),(7,'6011-S7',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S7',NULL),(8,'6011-S8',1,'6011','2020-03-11 16:06:02','2020-03-11 16:06:02',1,'6011-S8',NULL),(9,'8011-S1',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S1',NULL),(10,'8011-S4',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S4',NULL),(11,'8011-S5',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S5',NULL),(12,'8011-S2',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S2',NULL),(13,'8011-S3',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S3',NULL),(14,'8011-S6',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S6',NULL),(15,'8011-S7',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S7',NULL),(16,'8011-S8',1,'8011','2020-03-11 16:13:45','2020-03-11 16:13:45',1,'8011-S8',NULL),(17,'8011-S9',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S9',NULL),(18,'8011-S1',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S1',NULL),(19,'8011-S10',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S10',NULL),(20,'8011-S4',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S4',NULL),(21,'8011-S11',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S11',NULL),(22,'8011-S5',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S5',NULL),(23,'8011-S12',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S12',NULL),(24,'8011-S2',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S2',NULL),(25,'8011-S13',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S13',NULL),(26,'8011-S3',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S3',NULL),(27,'8011-S14',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S14',NULL),(28,'8011-S6',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S6',NULL),(29,'8011-S15',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S15',NULL),(30,'8011-S16',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S16',NULL),(31,'8011-S7',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S7',NULL),(32,'8011-S17',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S17',NULL),(33,'8011-S8',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S8',NULL),(34,'8011-S18',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S18',NULL),(35,'8011-S19',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S19',NULL),(36,'8011-S9',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S9',NULL),(37,'8011-S20',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S20',NULL),(38,'8011-S10',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S10',NULL),(39,'8011-S21',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S21',NULL),(40,'8011-S11',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S11',NULL),(41,'8011-S22',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S22',NULL),(42,'8011-S12',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S12',NULL),(43,'8011-S23',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S23',NULL),(44,'8011-S13',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S13',NULL),(45,'8011-S24',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S24',NULL),(46,'8011-S14',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S14',NULL),(47,'8011-S25',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S25',NULL),(48,'8011-S15',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S15',NULL),(49,'8011-S26',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S26',NULL),(50,'8011-S16',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S16',NULL),(51,'8011-S27',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S27',NULL),(52,'8011-S17',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S17',NULL),(53,'8011-S28',1,'8011','2020-03-11 16:13:46','2020-03-11 16:13:46',1,'8011-S28',NULL),(54,'8011-S18',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S18',NULL),(55,'8011-S29',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S29',NULL),(56,'8011-S19',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S19',NULL),(57,'8011-S30',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S30',NULL),(58,'8011-S20',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S20',NULL),(59,'8011-S31',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S31',NULL),(60,'8011-S21',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S21',NULL),(61,'8011-S32',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S32',NULL),(62,'8011-S22',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S22',NULL),(63,'8011-S23',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S23',NULL),(64,'8011-S33',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S33',NULL),(65,'8011-S34',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S34',NULL),(66,'8011-S24',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S24',NULL),(67,'8011-S35',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S35',NULL),(68,'8011-S25',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S25',NULL),(69,'8011-S36',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S36',NULL),(70,'8011-S26',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S26',NULL),(71,'8011-S37',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S37',NULL),(72,'8011-S27',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S27',NULL),(73,'8011-S38',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S38',NULL),(74,'8011-S28',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S28',NULL),(75,'8011-S39',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S39',NULL),(76,'8011-S29',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S29',NULL),(77,'8011-S30',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S30',NULL),(78,'8011-S40',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S40',NULL),(79,'8011-S31',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S31',NULL),(80,'8011-S41',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S41',NULL),(81,'8011-S32',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S32',NULL),(82,'8011-S42',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S42',NULL),(83,'8011-S33',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S33',NULL),(84,'8011-S43',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S43',NULL),(85,'8011-S34',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S34',NULL),(86,'8011-S44',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S44',NULL),(87,'8011-S35',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S35',NULL),(88,'8011-S45',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S45',NULL),(89,'8011-S36',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S36',NULL),(90,'8011-S46',1,'8011','2020-03-11 16:13:47','2020-03-11 16:13:47',1,'8011-S46',NULL),(91,'8011-S37',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S37',NULL),(92,'8011-S47',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S47',NULL),(93,'8011-S38',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S38',NULL),(94,'8011-S48',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S48',NULL),(95,'8011-S39',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S39',NULL),(96,'8011-S49',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S49',NULL),(97,'8011-S40',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S40',NULL),(98,'8011-S50',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S50',NULL),(99,'8011-S41',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S41',NULL),(100,'8011-S51',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S51',NULL),(101,'8011-S42',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S42',NULL),(102,'8011-S52',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S52',NULL),(103,'8011-S43',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S43',NULL),(104,'8011-S53',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S53',NULL),(105,'8011-S44',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S44',NULL),(106,'8011-S54',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S54',NULL),(107,'8011-S45',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S45',NULL),(108,'8011-S55',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S55',NULL),(109,'8011-S46',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S46',NULL),(110,'8011-S56',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S56',NULL),(111,'8011-S47',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S47',NULL),(112,'8011-S57',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S57',NULL),(113,'8011-S48',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S48',NULL),(114,'8011-S58',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S58',NULL),(115,'8011-S49',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S49',NULL),(116,'8011-S59',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S59',NULL),(117,'8011-S50',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S50',NULL),(118,'8011-S60',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S60',NULL),(119,'8011-S51',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S51',NULL),(120,'8011-S61',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S61',NULL),(121,'8011-S52',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S52',NULL),(122,'8011-S62',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S62',NULL),(123,'8011-S53',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S53',NULL),(124,'8011-S63',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S63',NULL),(125,'8011-S54',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S54',NULL),(126,'8011-S64',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S64',NULL),(127,'8011-S55',1,'8011','2020-03-11 16:13:48','2020-03-11 16:13:48',1,'8011-S55',NULL),(128,'8011-S65',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S65',NULL),(129,'8011-S56',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S56',NULL),(130,'8011-S66',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S66',NULL),(131,'8011-S57',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S57',NULL),(132,'8011-S67',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S67',NULL),(133,'8011-S58',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S58',NULL),(134,'8011-S68',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S68',NULL),(135,'8011-S59',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S59',NULL),(136,'8011-S69',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S69',NULL),(137,'8011-S60',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S60',NULL),(138,'8011-S61',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S61',NULL),(139,'8011-S70',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S70',NULL),(140,'8011-S62',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S62',NULL),(141,'8011-S71',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S71',NULL),(142,'8011-S63',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S63',NULL),(143,'8011-S72',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S72',NULL),(144,'8011-S64',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S64',NULL),(145,'8011-S73',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S73',NULL),(146,'8011-S65',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S65',NULL),(147,'8011-S74',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S74',NULL),(148,'8011-S66',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S66',NULL),(149,'8011-S75',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S75',NULL),(150,'8011-S67',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S67',NULL),(151,'8011-S76',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S76',NULL),(152,'8011-S68',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S68',NULL),(153,'8011-S77',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S77',NULL),(154,'8011-S69',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S69',NULL),(155,'8011-S78',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S78',NULL),(156,'8011-S70',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S70',NULL),(157,'8011-S79',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S79',NULL),(158,'8011-S71',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S71',NULL),(159,'8011-S80',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S80',NULL),(160,'8011-S72',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S72',NULL),(161,'8011-S81',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S81',NULL),(162,'8011-S73',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S73',NULL),(163,'8011-S82',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S82',NULL),(164,'8011-S74',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S74',NULL),(165,'8011-S83',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S83',NULL),(166,'8011-S75',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S75',NULL),(167,'8011-S84',1,'8011','2020-03-11 16:13:49','2020-03-11 16:13:49',1,'8011-S84',NULL),(168,'8011-S76',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S76',NULL),(169,'8011-S85',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S85',NULL),(170,'8011-S77',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S77',NULL),(171,'8011-S86',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S86',NULL),(172,'8011-S78',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S78',NULL),(173,'8011-S87',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S87',NULL),(174,'8011-S79',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S79',NULL),(175,'8011-S88',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S88',NULL),(176,'8011-S80',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S80',NULL),(177,'8011-S89',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S89',NULL),(178,'8011-S81',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S81',NULL),(179,'8011-S90',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S90',NULL),(180,'8011-S82',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S82',NULL),(181,'8011-S91',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S91',NULL),(182,'8011-S83',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S83',NULL),(183,'8011-S92',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S92',NULL),(184,'8011-S84',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S84',NULL),(185,'8011-S93',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S93',NULL),(186,'8011-S85',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S85',NULL),(187,'8011-S94',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S94',NULL),(188,'8011-S86',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S86',NULL),(189,'8011-S95',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S95',NULL),(190,'8011-S87',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S87',NULL),(191,'8011-S96',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S96',NULL),(192,'8011-S88',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S88',NULL),(193,'8011-S97',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S97',NULL),(194,'8011-S89',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S89',NULL),(195,'8011-S98',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S98',NULL),(196,'8011-S90',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S90',NULL),(197,'8011-S99',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S99',NULL),(198,'8011-S91',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S91',NULL),(199,'8011-S100',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S100',NULL),(200,'8011-S92',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S92',NULL),(201,'8011-S101',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S101',NULL),(202,'8011-S93',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S93',NULL),(203,'8011-S102',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S102',NULL),(204,'8011-S94',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S94',NULL),(205,'8011-S103',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S103',NULL),(206,'8011-S95',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S95',NULL),(207,'8011-S104',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S104',NULL),(208,'8011-S96',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S96',NULL),(209,'8011-S105',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S105',NULL),(210,'8011-S97',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S97',NULL),(211,'8011-S106',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S106',NULL),(212,'8011-S98',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S98',NULL),(213,'8011-S107',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S107',NULL),(214,'8011-S99',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S99',NULL),(215,'8011-S108',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S108',NULL),(216,'8011-S100',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S100',NULL),(217,'8011-S109',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S109',NULL),(218,'8011-S101',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S101',NULL),(219,'8011-S110',1,'8011','2020-03-11 16:13:50','2020-03-11 16:13:50',1,'8011-S110',NULL),(220,'8011-S102',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S102',NULL),(221,'8011-S111',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S111',NULL),(222,'8011-S103',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S103',NULL),(223,'8011-S112',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S112',NULL),(224,'8011-S104',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S104',NULL),(225,'8011-S113',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S113',NULL),(226,'8011-S105',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S105',NULL),(227,'8011-S114',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S114',NULL),(228,'8011-S106',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S106',NULL),(229,'8011-S115',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S115',NULL),(230,'8011-S107',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S107',NULL),(231,'8011-S116',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S116',NULL),(232,'8011-S108',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S108',NULL),(233,'8011-S117',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S117',NULL),(234,'8011-S109',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S109',NULL),(235,'8011-S118',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S118',NULL),(236,'8011-S110',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S110',NULL),(237,'8011-S119',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S119',NULL),(238,'8011-S111',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S111',NULL),(239,'8011-S120',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S120',NULL),(240,'8011-S112',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S112',NULL),(241,'8011-S121',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S121',NULL),(242,'8011-S122',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S122',NULL),(243,'8011-S113',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S113',NULL),(244,'8011-S123',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S123',NULL),(245,'8011-S114',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S114',NULL),(246,'8011-S124',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S124',NULL),(247,'8011-S115',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S115',NULL),(248,'8011-S125',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S125',NULL),(249,'8011-S116',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S116',NULL),(250,'8011-S126',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S126',NULL),(251,'8011-S117',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S117',NULL),(252,'8011-S127',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S127',NULL),(253,'8011-S118',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S118',NULL),(254,'8011-S128',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S128',NULL),(255,'8011-S119',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S119',NULL),(256,'8011-S129',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S129',NULL),(257,'8011-S120',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S120',NULL),(258,'8011-S121',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S121',NULL),(259,'8011-S130',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S130',NULL),(260,'8011-S131',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S131',NULL),(261,'8011-S122',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S122',NULL),(262,'8011-S132',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S132',NULL),(263,'8011-S123',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S123',NULL),(264,'8011-S133',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S133',NULL),(265,'8011-S124',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S124',NULL),(266,'8011-S134',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S134',NULL),(267,'8011-S125',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S125',NULL),(268,'8011-S135',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S135',NULL),(269,'8011-S126',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S126',NULL),(270,'8011-S136',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S136',NULL),(271,'8011-S127',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S127',NULL),(272,'8011-S137',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S137',NULL),(273,'8011-S128',1,'8011','2020-03-11 16:13:51','2020-03-11 16:13:51',1,'8011-S128',NULL),(274,'8011-S138',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S138',NULL),(275,'8011-S129',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S129',NULL),(276,'8011-S139',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S139',NULL),(277,'8011-S130',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S130',NULL),(278,'8011-S140',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S140',NULL),(279,'8011-S131',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S131',NULL),(280,'8011-S141',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S141',NULL),(281,'8011-S132',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S132',NULL),(282,'8011-S142',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S142',NULL),(283,'8011-S133',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S133',NULL),(284,'8011-S134',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S134',NULL),(285,'8011-S135',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S135',NULL),(286,'8011-S136',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S136',NULL),(287,'8011-S137',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S137',NULL),(288,'8011-S138',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S138',NULL),(289,'8011-S139',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S139',NULL),(290,'8011-S140',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S140',NULL),(291,'8011-S141',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S141',NULL),(292,'8011-S142',1,'8011','2020-03-11 16:13:52','2020-03-11 16:13:52',1,'8011-S142',NULL);
/*!40000 ALTER TABLE `samples` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `schema_migrations`
--

DROP TABLE IF EXISTS `schema_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `schema_migrations` (
  `version` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  UNIQUE KEY `unique_schema_migrations` (`version`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('20131029153603'),('20131029153634'),('20131111143554'),('20131111143621'),('20131113172448'),('20131113181345'),('20131119164152'),('20131119164208'),('20131122032927'),('20131223192901'),('20140131235419'),('20140404201838'),('20140404201900'),('20140404204258'),('20140408224245'),('20140428213241'),('20140507230919'),('20140508203643'),('20140513225335'),('20140616190537'),('20140714220057'),('20140907220135'),('20150124195318'),('20150124201744'),('20150129213358'),('20150129221830'),('20150212051010'),('20150212051027'),('20150213173621'),('20150222153442'),('20150326202149'),('20150405154727'),('20150515160553'),('20150515160619'),('20150719221125'),('20150719221226'),('20150719221253'),('20150719223053'),('20150720044538'),('20150828232337'),('20150923014954'),('20150923015030'),('20150923184243'),('20150924044044'),('20150926162327'),('20151027164741'),('20151029034310'),('20151118210640'),('20151203054202'),('20160128203950'),('20160128205317'),('20160128205943'),('20160129021809'),('20160129164244'),('20160129165100'),('20160330023703'),('20160330033810'),('20160330185947'),('20160330190634'),('20160411130601'),('20160411131711'),('20160412010529'),('20160427043024'),('20160427043546'),('20160429232330'),('20160429232408'),('20160429232434'),('20160430000308'),('20160430152749'),('20160514044605'),('20160526204339'),('20160607162741'),('20160615161649'),('20160720211005'),('20161113203042'),('20161219172133'),('20170330173426'),('20170421231924'),('20170426225719'),('20170504211619'),('20170504212208'),('20170604165355'),('20170627173019'),('20170725190809'),('20170729024546'),('20170806145525'),('20170813203843'),('20171103151518'),('20180509200425'),('20180529204642'),('20180809012224'),('20181221174622');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `timings`
--

DROP TABLE IF EXISTS `timings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `timings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT NULL,
  `parent_class` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `days` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `start` int(11) DEFAULT NULL,
  `stop` int(11) DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `timings`
--

LOCK TABLES `timings` WRITE;
/*!40000 ALTER TABLE `timings` DISABLE KEYS */;
/*!40000 ALTER TABLE `timings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `uploads`
--

DROP TABLE IF EXISTS `uploads`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `uploads` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `job_id` int(11) DEFAULT NULL,
  `upload_file_name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `upload_content_type` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `upload_file_size` int(11) DEFAULT NULL,
  `upload_updated_at` datetime DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `uploads`
--

LOCK TABLES `uploads` WRITE;
/*!40000 ALTER TABLE `uploads` DISABLE KEYS */;
/*!40000 ALTER TABLE `uploads` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_budget_associations`
--

DROP TABLE IF EXISTS `user_budget_associations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_budget_associations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `budget_id` int(11) DEFAULT NULL,
  `quota` float DEFAULT NULL,
  `disabled` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_budget_associations`
--

LOCK TABLES `user_budget_associations` WRITE;
/*!40000 ALTER TABLE `user_budget_associations` DISABLE KEYS */;
INSERT INTO `user_budget_associations` VALUES (1,1,1,1000,0,'2018-07-17 22:10:10','2018-07-17 22:10:10');
/*!40000 ALTER TABLE `user_budget_associations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `login` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `password_digest` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `remember_token` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `admin` tinyint(1) DEFAULT '0',
  `key` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `index_users_on_login` (`login`),
  KEY `index_users_on_remember_token` (`remember_token`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Joe Neptune','neptune','2013-06-16 17:26:54','2017-10-19 04:59:18','$2a$10$HxgxLX5/ITcYpII1InAL1.jUYAiHk/rMftHniPJVvauy43VDoo8yW','TYmoWfyV42AL7dSoYcgmug',1,'VHzz9IW3xnNx8O3cA_P0rKsUWmTVH_Qz9mHKqgE-hNI');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wires`
--

DROP TABLE IF EXISTS `wires`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wires` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `from_id` int(11) DEFAULT NULL,
  `to_id` int(11) DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=231 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wires`
--

LOCK TABLES `wires` WRITE;
/*!40000 ALTER TABLE `wires` DISABLE KEYS */;
INSERT INTO `wires` VALUES (1,2758,2763,1,'2020-03-13 20:32:48','2020-03-13 20:32:48'),(2,2759,2767,1,'2020-03-13 20:32:48','2020-03-13 20:32:48'),(3,2760,2768,1,'2020-03-13 20:32:48','2020-03-13 20:32:48'),(4,2773,2778,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00'),(5,2774,2782,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00'),(6,2775,2783,NULL,'2020-03-13 20:37:00','2020-03-13 20:37:00'),(10,2788,2802,1,'2020-03-13 20:39:05','2020-03-13 20:39:05'),(11,2789,2806,1,'2020-03-13 20:39:05','2020-03-13 20:39:05'),(12,2790,2807,1,'2020-03-13 20:39:05','2020-03-13 20:39:05'),(13,2822,2810,1,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(14,2821,2809,1,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(15,2818,2808,1,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(16,2818,2808,1,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(17,2818,2811,1,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(18,2821,2813,1,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(19,2822,2814,1,'2020-03-13 21:44:52','2020-03-13 21:44:52'),(20,2788,2826,1,'2020-03-13 21:50:54','2020-03-13 21:50:54'),(21,2789,2828,1,'2020-03-13 21:50:54','2020-03-13 21:50:54'),(22,2790,2829,1,'2020-03-13 21:50:54','2020-03-13 21:50:54'),(23,2833,2841,NULL,'2020-03-13 21:52:13','2020-03-13 21:52:13'),(24,2834,2842,NULL,'2020-03-13 21:52:13','2020-03-13 21:52:13'),(25,2835,2843,NULL,'2020-03-13 21:52:13','2020-03-13 21:52:13'),(26,2833,2844,NULL,'2020-03-13 21:52:13','2020-03-13 21:52:13'),(27,2834,2846,NULL,'2020-03-13 21:52:13','2020-03-13 21:52:13'),(28,2835,2847,NULL,'2020-03-13 21:52:13','2020-03-13 21:52:13'),(29,2864,2852,NULL,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(30,2863,2851,NULL,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(31,2860,2850,NULL,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(32,2860,2850,NULL,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(33,2860,2853,NULL,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(34,2863,2855,NULL,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(35,2864,2856,NULL,'2020-03-13 21:52:22','2020-03-13 21:52:22'),(36,2882,2870,NULL,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(37,2881,2869,NULL,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(38,2878,2868,NULL,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(39,2878,2868,NULL,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(40,2878,2871,NULL,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(41,2881,2873,NULL,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(42,2882,2874,NULL,'2020-03-13 21:58:56','2020-03-13 21:58:56'),(43,2887,2895,NULL,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(44,2888,2896,NULL,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(45,2889,2897,NULL,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(46,2887,2898,NULL,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(47,2888,2900,NULL,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(48,2889,2901,NULL,'2020-03-13 21:59:07','2020-03-13 21:59:07'),(49,2907,2934,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(50,2907,2948,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(51,2919,2950,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(52,2920,2951,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(53,2921,2952,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(54,2922,2953,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(55,2923,2954,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(56,2924,2955,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(57,2925,2956,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(58,2926,2957,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(59,2927,2958,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(60,2928,2959,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(61,2929,2960,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(62,2930,2961,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(63,2931,2962,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(64,2919,2935,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(65,2920,2936,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(66,2921,2937,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(67,2922,2938,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(68,2923,2939,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(69,2924,2940,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(70,2925,2941,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(71,2926,2942,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(72,2927,2943,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(73,2928,2944,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(74,2929,2945,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(75,2930,2946,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(76,2931,2947,1,'2020-03-17 00:31:53','2020-03-17 00:31:53'),(77,3011,2989,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(78,3012,2991,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(79,3013,2992,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(80,3014,2993,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(81,3015,2994,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(82,3016,2995,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(83,3017,2996,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(84,3011,3003,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(85,3012,3004,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(86,3013,3005,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(87,3014,3006,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(88,3015,3007,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(89,3016,3008,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(90,3017,3009,1,'2020-03-17 00:46:14','2020-03-17 00:46:14'),(91,3053,3031,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(92,3054,3033,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(93,3055,3034,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(94,3056,3035,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(95,3057,3036,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(96,3058,3037,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(97,3059,3038,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(98,3053,3045,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(99,3054,3046,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(100,3055,3047,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(101,3056,3048,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(102,3057,3049,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(103,3058,3050,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(104,3059,3051,NULL,'2020-03-17 01:20:19','2020-03-17 01:20:19'),(105,3095,3073,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(106,3096,3075,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(107,3097,3076,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(108,3098,3077,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(109,3099,3078,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(110,3100,3079,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(111,3101,3080,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(112,3095,3087,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(113,3096,3088,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(114,3097,3089,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(115,3098,3090,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(116,3099,3091,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(117,3100,3092,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(118,3101,3093,NULL,'2020-03-17 01:20:30','2020-03-17 01:20:30'),(119,3130,3157,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(120,3130,3171,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(121,3142,3173,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(122,3143,3174,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(123,3144,3175,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(124,3145,3176,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(125,3146,3177,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(126,3147,3178,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(127,3148,3179,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(128,3149,3180,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(129,3150,3181,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(130,3151,3182,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(131,3152,3183,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(132,3153,3184,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(133,3154,3185,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(134,3142,3158,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(135,3143,3159,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(136,3144,3160,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(137,3145,3161,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(138,3146,3162,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(139,3147,3163,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(140,3148,3164,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(141,3149,3165,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(142,3150,3166,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(143,3151,3167,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(144,3152,3168,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(145,3153,3169,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(146,3154,3170,NULL,'2020-03-17 01:23:30','2020-03-17 01:23:30'),(147,3214,3241,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(148,3214,3255,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(149,3226,3257,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(150,3227,3258,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(151,3228,3259,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(152,3229,3260,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(153,3230,3261,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(154,3231,3262,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(155,3232,3263,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(156,3233,3264,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(157,3234,3265,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(158,3235,3266,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(159,3236,3267,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(160,3237,3268,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(161,3238,3269,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(162,3226,3242,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(163,3227,3243,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(164,3228,3244,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(165,3229,3245,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(166,3230,3246,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(167,3231,3247,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(168,3232,3248,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(169,3233,3249,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(170,3234,3250,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(171,3235,3251,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(172,3236,3252,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(173,3237,3253,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(174,3238,3254,NULL,'2020-03-17 01:43:47','2020-03-17 01:43:47'),(175,3305,3283,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(176,3306,3285,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(177,3307,3286,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(178,3308,3287,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(179,3309,3288,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(180,3310,3289,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(181,3311,3290,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(182,3305,3297,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(183,3306,3298,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(184,3307,3299,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(185,3308,3300,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(186,3309,3301,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(187,3310,3302,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(188,3311,3303,NULL,'2020-03-17 01:43:53','2020-03-17 01:43:53'),(189,3347,3325,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(190,3348,3327,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(191,3349,3328,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(192,3350,3329,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(193,3351,3330,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(194,3352,3331,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(195,3353,3332,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(196,3347,3339,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(197,3348,3340,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(198,3349,3341,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(199,3350,3342,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(200,3351,3343,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(201,3352,3344,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(202,3353,3345,NULL,'2020-03-17 01:56:07','2020-03-17 01:56:07'),(203,3382,3409,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(204,3382,3423,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(205,3394,3425,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(206,3395,3426,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(207,3396,3427,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(208,3397,3428,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(209,3398,3429,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(210,3399,3430,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(211,3400,3431,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(212,3401,3432,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(213,3402,3433,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(214,3403,3434,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(215,3404,3435,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(216,3405,3436,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(217,3406,3437,NULL,'2020-03-17 01:57:24','2020-03-17 01:57:24'),(218,3394,3410,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(219,3395,3411,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(220,3396,3412,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(221,3397,3413,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(222,3398,3414,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(223,3399,3415,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(224,3400,3416,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(225,3401,3417,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(226,3402,3418,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(227,3403,3419,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(228,3404,3420,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(229,3405,3421,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25'),(230,3406,3422,NULL,'2020-03-17 01:57:25','2020-03-17 01:57:25');
/*!40000 ALTER TABLE `wires` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `wizards`
--

DROP TABLE IF EXISTS `wizards`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wizards` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `specification` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `description` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `wizards`
--

LOCK TABLES `wizards` WRITE;
/*!40000 ALTER TABLE `wizards` DISABLE KEYS */;
/*!40000 ALTER TABLE `wizards` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `workers`
--

DROP TABLE IF EXISTS `workers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `workers` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `message` varchar(255) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `workers`
--

LOCK TABLES `workers` WRITE;
/*!40000 ALTER TABLE `workers` DISABLE KEYS */;
INSERT INTO `workers` VALUES (1,'publisher',NULL,'running','2018-11-16 16:09:14','2018-11-16 16:09:14'),(2,'publisher',NULL,'done','2018-11-16 16:10:31','2018-11-16 16:11:22'),(3,'publisher',NULL,'done','2018-11-16 16:11:16','2018-11-16 16:12:03'),(4,'publisher',NULL,'done','2018-11-16 16:15:00','2018-11-16 16:15:39'),(5,'publisher',NULL,'done','2018-11-16 16:16:19','2018-11-16 16:17:11'),(6,'publisher',NULL,'done','2018-11-16 16:19:23','2018-11-16 16:19:56'),(7,'publisher',NULL,'done','2018-11-16 17:45:28','2018-11-16 17:45:45'),(8,'publisher',NULL,'done','2018-11-16 17:48:08','2018-11-16 17:48:18'),(9,'publisher',NULL,'done','2018-11-16 18:43:18','2018-11-16 18:43:39'),(10,'publisher',NULL,'done','2018-11-16 18:46:03','2018-11-16 18:46:17'),(11,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON','error','2018-11-16 18:48:41','2018-11-16 18:48:47'),(12,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON','error','2018-11-16 18:54:15','2018-11-16 18:54:21'),(13,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON','error','2018-11-16 18:55:55','2018-11-16 18:56:00'),(14,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON','error','2018-11-16 19:01:31','2018-11-16 19:01:35'),(15,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON','error','2018-11-16 19:02:46','2018-11-16 19:02:51'),(16,'publisher',NULL,'running','2018-11-16 19:08:07','2018-11-16 19:08:07'),(17,'publisher',NULL,'running','2018-11-16 19:14:15','2018-11-16 19:14:15'),(18,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON: (erb):21:in `make_index\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 19:21:57','2018-11-16 19:22:02'),(19,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON: (erb):21:in `make_index\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 19:24:08','2018-11-16 19:24:14'),(20,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON: (erb):21:in `make_index\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 19:27:22','2018-11-16 19:27:28'),(21,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON: (erb):21:in `make_index\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 19:30:01','2018-11-16 19:30:07'),(22,'publisher','undefined method `join\' for nil:NilClass\nDid you mean?  JSON: (erb):21:in `make_index\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 19:33:00','2018-11-16 19:33:05'),(23,'publisher',NULL,'done','2018-11-16 19:34:25','2018-11-16 19:34:39'),(24,'publisher',NULL,'done','2018-11-16 19:35:54','2018-11-16 19:36:09'),(25,'publisher','undefined method `each\' for nil:NilClass: (erb):20:in `make_about_md\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 20:41:04','2018-11-16 20:41:09'),(26,'publisher','undefined method `each\' for nil:NilClass: (erb):20:in `make_about_md\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 20:45:28','2018-11-16 20:45:33'),(27,'publisher','undefined method `each\' for nil:NilClass: (erb):13:in `make_about_md\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `block in result\'','error','2018-11-16 20:47:12','2018-11-16 20:47:16'),(28,'publisher',NULL,'done','2018-11-16 20:48:39','2018-11-16 20:48:55'),(29,'publisher',NULL,'done','2018-11-16 20:53:35','2018-11-16 20:53:50'),(30,'publisher',NULL,'done','2018-11-16 20:54:37','2018-11-16 20:54:51'),(31,'publisher',NULL,'done','2018-11-16 20:55:41','2018-11-16 20:55:56'),(32,'publisher',NULL,'done','2018-11-16 21:58:44','2018-11-16 21:58:58'),(33,'publisher',NULL,'running','2018-11-16 22:02:27','2018-11-16 22:02:27'),(34,'publisher','undefined local variable or method `zipname\' for #<Aquadoc::Render:0x00007ffe86a82230>: (erb):5:in `make_about_md\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb.rb:861:in `eval\', /Users/ericklavins/.rvm/rubies/ruby-2.3.7/lib/ruby/2.3.0/erb','error','2018-11-16 22:07:51','2018-11-16 22:07:56'),(35,'publisher',NULL,'done','2018-11-16 22:09:37','2018-11-16 22:09:48'),(36,'publisher',NULL,'done','2018-11-16 22:12:31','2018-11-16 22:12:51'),(37,'publisher',NULL,'done','2018-11-16 22:17:24','2018-11-16 22:17:51'),(38,'publisher',NULL,'done','2018-11-16 22:22:22','2018-11-16 22:22:33'),(39,'publisher',NULL,'done','2018-11-27 23:09:12','2018-11-27 23:10:09'),(40,'publisher',NULL,'done','2018-11-27 23:28:01','2018-11-27 23:28:36'),(41,'publisher',NULL,'done','2018-11-27 23:30:47','2018-11-27 23:31:14'),(42,'publisher',NULL,'done','2018-11-27 23:34:57','2018-11-27 23:35:13'),(43,'publisher',NULL,'done','2018-11-27 23:36:23','2018-11-27 23:36:51'),(44,'publisher',NULL,'done','2018-11-27 23:41:27','2018-11-27 23:42:18'),(45,'publisher',NULL,'done','2018-12-12 18:29:44','2018-12-12 18:31:08'),(46,'publisher',NULL,'done','2018-12-17 21:35:41','2018-12-17 21:36:01'),(47,'publisher',NULL,'done','2018-12-17 21:45:33','2018-12-17 21:45:52'),(48,'publisher',NULL,'done','2018-12-17 22:15:09','2018-12-17 22:15:29'),(49,'publisher',NULL,'done','2018-12-17 22:30:15','2018-12-17 22:30:33'),(50,'publisher',NULL,'done','2018-12-17 22:37:31','2018-12-17 22:37:51'),(51,'publisher',NULL,'done','2018-12-17 22:48:07','2018-12-17 22:48:14'),(52,'publisher',NULL,'done','2018-12-17 23:11:22','2018-12-17 23:11:40'),(53,'publisher',NULL,'done','2020-03-17 15:09:09','2020-03-17 15:10:19');
/*!40000 ALTER TABLE `workers` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-03-31  9:32:17
